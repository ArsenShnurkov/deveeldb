2011-12-17  Antonello Provenzano  <antonello@deveel.com>
	* IQueryContext.cs: 
		- Method GetTable to obtain a reference to a table 
		in the database context.
		- Method GetUserGrants to obtain user privileges
		on a database object
		- Added support for exception state of context

2011-12-15  Antonello Provenzano  <antonello@deveel.com>
	* IQueryContext.cs: Added the method RemoveVariable to
	explicitly remove a variable from the given context.

2011-12-11  Antonello Provenzano  <antonello@deveel.com>
	* TableDataConglomerate.cs: added in-memory store for
	handling temporary tables

2011-12-10  Antonello Provenzano  <antonello@deveel.com>
	* DataTableInfo.cs: columns now cannot be added directly anymore:
	the only way is to provide name and type.
	* GTDataSource.cs: 
		- made public (for future external plugins architecture)
		- removed inheritance from IMutableTableDataSource
		(now inherits from ITableDataSource)
	* SimpleTransaction.cs: added method GetMutableTable to
	enforce the contract from IMutableTableSource

2011-12-09  Antonello Provenzano  <antonello@deveel.com>
	* TableDataConglomerate.cs:
		- conglomerate name (states) is now set at constructor
		(since there's a 1:1 relationship between a Database
		and a TableDataConglomerate, we assign this one the
		name of the database)
		- Exists method now without the specification of the
		name of the conglomerate
	* ViewDef.cs: renamed to View
	* DataTableDef.cs: renamed to DataTableInfo
	* DataTableColumnDef.cs: renamed to DataTableColumnInfo
	* TType.cs: 
		- introduced abstract property DbType
		- added methods for fast binary serialization/deserialization
	* DataTableColumnInfo.cs:
		- removed specific components of the type (eg. size, scale,
		locale, etc.): now the column type is set through TType

2011-12-07  Antonello Provenzano  <antonello@deveel.com>
	* MasterTableDataSource.cs:
		- Split up into multiple partial classes for better
		manageability and readability
		- Refactoring of the class to be implemented externally
		from the kernel

2011-12-04  Antonello Provenzano  <antonello@deveel.com>
	* TObject.cs:
		- Split in multiple partial classes for better manageability
		- Explicit converter operators converted to implicit
		- ToBoolean(out bool) converted to ToNullableBoolean()
		- Removed redundant Null property and field NullObject
		renamed to Null

2011-12-03  Antonello Provenzano  <antonello@deveel.com>
	* DatabaseSystem.cs: replaced list of IDatabaseEvent objects
	with pure delegates for the Shutdown event
	* Database.cs: 
		- splitted into multiple partial classes for easier 
		manageability
		- overload of the method RegisterShutdownDelegate
		with IDatabaseEvent removed

2010-05-01  Antonello Provenzano  <antonello@deveel.com>
	* TableName.cs: added an overload of the method ToString
	that accepts a boolean to include the 'UnknownSchema'.
	
2010-02-05  Antonello Provenzano  <antonello@deveel.com>
	* InternalDbHelper.cs: InternalConnection constructor
	reflects the new internal constructor of DeveelDbConnection
	
2010-01-24  Antonello Provenzano  <antonello@deveel.com>
	* DatabaseSystem.cs: 
	
2009-12-21  Antonello Provenzano  <antonello@deveel.com>	
	* RowData.cs:
		- renamed to 'DataRow'
		- methods SetColumnData, SetColumnDataFromObject
		and SetColumnDataFromTObject joined into a single
		method 'SetValue'
		- constructors made 'internal'
		- method GetCellData renamed to 'GetValue'
	* DataTable.cs: method 'CreateRowDataObject' renamed
	to 'NewDataRow' (also parameter IQueryContext removed).
	* TType.cs: Encode/Decode support for INTERVAL
	
2009-12-15  Antonello Provenzano  <antonello@deveel.com>
	* TIntervalType.cs: 
		- definition of the type doesn't require the length 
		anymore and accept an SqlType specification
		- CompareTo type refactored to accept comparisons
		only with Interval and for the type given
	* TType.cs: the 'IntervalType' field now is built upon
	a FULL INTERVAL type.
	* SqlType.cs: 
		- removed fields Year, Month, Day, Hour, Minute 
		and Second
		- added fields YearToMonth and DayToSecond
	* TObject.cs: 
		- replaced support for INTERVAL types
		from TimeStamp to Interval
		- 'implicit' operators replaced with 'explicit's
	* ObjectTransfer.cs: 
		- INTERVAL types are now handled by	Interval type
		- changed serialization type of DateTimes
	
2009-12-11  Antonello Provenzano  <antonello@deveel.com>
	* IQueryContext.cs: 
		- introduced reference methods to support cursors 
		management (declaration, opening, closing, dropping)
		- added method DeclareVariable to support the
		declaration of variables within the context
	* Transaction.cs: implements interface ICursorContext to
	generalize disposal of cursros
	* Cursor.cs: replaced reference to Transaction object with
	reference to ICursorContext.
	
2009-12-10  Antonello Provenzano  <antonello@deveel.com>
	* TableDataConglomerate.cs: implemented methods for
	handling temporary tables.
	* Transaction.cs: added support for TEMPORARY tables
	
2009-12-09  Antonello Provenzano  <antonello@deveel.com>
	* DatabaseConnection.cs: callback methods to Transaction
	class for UDTs management.
	
2009-12-06  Antonello Provenzano  <antonello@deveel.com>
	* ObjectTransfer.cs: ReadFrom accepts a TType as argument
	* V2MasterTableDataSource.cs: calls to ObjectTransfer
	now pass also the TType of the column (to support UDTs)
	* SimpleTransaction.cs: the constructor now accepts a 
	UDTManager instance as argument
	
2009-12-03  Antonello Provenzano  <antonello@deveel.com>
	* Cursor.cs: 
		- the boolean flags have been replaced by an instance 
		of CursorAttributes
		- supports ABSOLUTE and RELATIVE orientations
		- it is now possible to fetch into a given set of
		variables or table
	* DatabaseConnection.cs: method 'DeclareCursor' now 
	accepts CursorAttributes as argument
	
2009-12-01  Antonello Provenzano  <antonello@deveel.com>
	* Expression.cs: support for CaseExpressions
	* Variable.cs: added the overload method for SetValue
	to support the direct set of the value.
	
2009-11-30  Antonello Provenzano  <antonello@deveel.com>
	* DataTable.cs: supports function for deleting the
	row at the current index of a cursor.
	* Expression.cs: added support for evaluation the 
	generation and evaluation of query plans.
	* TObject.cs: implemented method GetQueryPlan to
	support the creation of TQueryPlanType objects.
	
2009-11-28  Antonello Provenzano  <antonello@deveel.com>
	* Expression.cs: added static method 'Evaluate' to evaluate
	a given string into an expression out of context.
	* TObject.cs: implements the IConvertible interface.
	* ObjectTransfer.cs: initial support for IUserDefinedType
	* TableDataConglomerate.cs: added logic for the creation
	of the tables dedicated to the handling of UDTs.
	
2009-11-27  Antonello Provenzano  <antonello@deveel.com>
	* Variable.cs: renamed to VariableName to support the
	definition of a more complex variable set system
	* Variable.cs: implemented to support the definition
	of varibales, with types and names set
	* DatabaseConnection.cs: added support for handling
	session variables:
		- 'GetVariable' method renamed to 'GetPersistentVariable'
		- 'SetVariable' method renamed to 'SetPersistentVariable'
		- implemented method 'GetVariable' to return session
		variables
		- modified the implementation of the method	'SetVariable'
	* SimpleTransaction.cs: implemented variable handling mechanism
	* Database.cs: generated table sUSRConnectionVariables
	granted
	* Expression.cs: resolves variable references
	* IQueryContext.cs: added method GetVariable
	
2009-11-25  Antonello Provenzano  <antonello@deveel.com>
	* Transaction.cs: added support for cursors
	* DatabaseConnection.cs: implemented methods to callback
	to the transaction instance for cursor management
	* IStoreSystem.cs: moved to Deveel.Data.Store namespace
	for coherency
	* V1FileStoreSystem.cs: moved to Deveel.Data.Store 
	namespace for coherency
	* V1HeapStoreSystem.cs: moved to Deveel.Data.Store namespace
	for coherency
	* TransactionSystem.cs: 
		- added support for the specification of external 
		implementations of IStoreSystem
		- V1FileStoreSystem initialization moved from the
		TransactionSystem.Init method to the V1FileStoreSystem.Init
		method.
		- LoggingBufferManager reference moved to V1FileStoreSystem
	
2009-11-23  Antonello Provenzano  <antonello@deveel.com>
	* Operator.cs: 
		- Added static properties for representing each 
		single operator type
		- Method 'Evaluate' overloaded to support static
		operation (no context).
	
2009-11-16  Antonello Provenzano  <antonello@deveel.com>
	* Cache.cs: moved to namespace Deveel.Data.Caching
	* DataCellCache.cs: moved to namespace Deveel.Data.Caching
	* TransactionSystem.cs: implemented the support for
	confugrable cache systems
	
2009-11-15  Antonello Provenzano  <antonello@deveel.com>
	* SqlType.cs: added member 'Identity'
	* GTSQLTypeInfoDataSource.cs: now checks for the
	AUTO_INCREMENT field (true = SqlType.Identity)
	
2009-11-09  Antonello Provenzano  <antonello@deveel.com>
	* Database.cs: added the statement for creating the view
	INFORMATION_SCHEMA.DATA_TYPES to obtain information
	about the built-in data types
	
2009-11-07  Antonello Provenzano  <antonello@deveel.com>
	* SQLTypes.cs: 
		- renamed to SqlTypes
		- members case normalized to C# naming style
	* DbTypes.cs:
		- renamed to DbType
		- prefix DB_ stripped out
		- members case normalized to C# naming style
	* SelectableScheme.cs: method InternalOrderIndexSet
	now returns IIntegerList
	* ProductInfo.cs: made internal
	
2009-10-31  Antonello Provenzano  <antonello@deveel.com>
	* TransactionSystem.cs: 
		- added property Debug that returns
		a contextual IDebugLogger instance to log debug messages
		for a specific database (suppressed Debug singleton from
		Deveel.Diagnostics to support specific database logging).
		- logic for setting up the debug logger moved to 
		DefaultDebugLogger implementation (though new method Init
		in IDebugLogger).

2009-10-30  Antonello Provenzano  <antonello@deveel.com>
	* IStatementTreeObject.cs: 
		- made internal
		- moved to namespace Deveel.Data.Sql
	* Transaction.cs: 
		- fields INITIALLY_DEFERRED, INITIALLY_IMMEDIATE 
		and NOT_DEFERRABLE moved to the separate enumeration
		ConstraintDeferrability
		- fields for constraint actions moved to separate
		enumeration ConstraintAction
	* TableDataConglometate.cs: columns handling constraint
	actions now store numeric values
	
2009-10-29  Antonello Provenzano  <antonello@deveel.com>
	* IDatabaseHandler.cs: implemented to generalize database
	management (according to the new ChangeDatabase function).
	
2009-10-25  Antonello Provenzano  <antonello@deveel.com>
	* DatabaseQueryContext.cs: added a new property Connection
	to access the underlying DatabaseConnection
	
2009-10-24  Antonello Provenzano  <antonello@deveel.com>
	* TriggerEventType.cs:
		- signed as Flag for multiplicity
		- includes Before, After and combinations
	* TableModificationEvent.cs: constants for the event types
	replaced with TriggerEventType references
	
2009-10-20  Antonello Provenzano  <antonello@deveel.com>
	* SQLTypes.cs: added the members for interval type (SECOND,
	MINUTE, HOUR, DAY, MONTH, YEAR and INTERVAL)
	* TObject.cs: 
		- added function SoundsLike to compute SOUNDEX of two 
		strings
		- 'Add' method now takes in consideration TStringType,
		by calling Concat to join.
	* Operator.cs: added operator 'sounds like'.
	
2009-10-15  Antonello Provenzano  <antonello@deveel.com>
	* DatabaseConnection.cs: method GetDbConnection now returns
	a generic IDbConnection.
	* TransactionSystem.cs: now implements IDisposable pattern.

2009-10-14  Antonello Provenzano  <antonello@deveel.com>
	* TObject.cs: 
		- introduced implicit and explicit operators.
		- implemented the Mod function
	
2009-10-12  Antonello Provenzano  <antonello@deveel.com>
	* SelectableScheme.cs: removed methods WriteTo and ReadFrom 
	(present in the old version of McKoi), to prepare the
		introduction of new indices.
	* BlobStore.cs: removed references to #ZipLib to replace
	it with Deveel Zip.
	
2009-10-09  Antonello Provenzano  <antonello@deveel.com>
	* TableDataConglomerate.cs: global renaming for code clarity
		- SYS_INFO -> SYSTEM
		- SYSTEM.sUSRSchemaInfo -> SYSTEM.SCHEMA_INFO
	* Database.cs: 
		- renamed SYS_INFO schema to 'SYSTEM' for code clarity
		- renamed SYS_JDBC to INFORMATION_SCHEMA to comply with
		the SQL standards
			+ Catalogs -> CATALOGS (basically, no change)
			+ Schemas -> SCHEMATA
			+ Tables -> TABLES (basically, no change)
			+ Columns -> COLUMNS (basically, no change)
			+ ColumnPrivileges -> COLUMN_PRIVILEGES
			+ TablePrivileges -> TABLE_PRIVILEGES
	* ParameterSubstiturion.cs: implemented support for named
	parameters.

2009-10-05  Antonello Provenzano  <antonello@deveel.com>
	* DatabaseEventHandler.cs: implementation to handle a different
	behavior of the database event interface logic.
	* Database.cs: 
		- added an overload of the methods Execute and CreateEvent 
		to accept EventHandler delegates.
		- modified the RegisterShutDownDelegate method parameters
		to comply with the new database event interface logic.
	* DatabaseSystem.cs: 
		- modified the parameters of the method RegisterShutDownDelegate 
		to comply with the new database event interface logic.
		- Naming conventions applied

2009-10-04  Antonello Provenzano  <antonello@deveel.com>
	* IDatabaseEvent.cs: Created the interface to replace the logic
	of Database.CreateEevent, from delegate to interface implementation.
	* Database.cs: modified the parameter of CreateEvent and Execute
	methods to implement the new interface logic.
	* TransactionSystem.cs: modified the parameter of CreateEvent to 
	implement the new interface logic.
	* DatabaseDispatcher.cs: 
		- changed the parameter of CreateEvent to implement the new 
		interface logic.
		- modified the inner class DatabaseEvent to accomplish with
		the new interface logic.
		- run method now calls IDatabaseEvent.Execute instead of the
		EventHandler passed.
	* DatabaseConnection.cs: created the class FirePendingTriggerEventsImpl
	to comply with the new database event interface logic.
	* RIDList.cs: implemented the class CreateRIDCacheEventImpl to comply with
	the new database event interface logic.
	* TriggerManager.cs: the inner class FireTriggersDelegate
	now implements the IDatabaseEvent interface.
	* DatabaseSystem.cs: modified the parameter of the method Execute to
	support the new database event interface logic.
	* WorkerPool.cs: modified the parameter of the method Execute to
	support the new database event interface logic.
	* WorkerThread.cs: modified the parameter of the method Execute to
	support the new database event interface logic.