/* Generated By:CSharpCC: Do not edit this line. SQLTokenManager.cs */
namespace Deveel.Data.Sql {

using System;
using System.Collections;
using System.Collections.Generic;
using Functions;
using Text;
using Types;

internal  class SQLTokenManager : SQLConstants {
  public  System.IO.TextWriter debugStream = Console.Out;
  public  void SetDebugStream(System.IO.TextWriter ds) { debugStream = ds; }
private int mccStopAtPos(int pos, int kind)
{
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   return pos + 1;
}
private int mccMoveStringLiteralDfa0_0()
{
   switch((int)curChar) {
      case 9:
         mccmatchedKind = 2;
         return mccMoveNfa_0(5, 0);
      case 10:
         mccmatchedKind = 3;
         return mccMoveNfa_0(5, 0);
      case 13:
         mccmatchedKind = 4;
         return mccMoveNfa_0(5, 0);
      case 32:
         mccmatchedKind = 1;
         return mccMoveNfa_0(5, 0);
      case 37:
         mccmatchedKind = 19;
         return mccMoveNfa_0(5, 0);
      case 40:
         mccmatchedKind = 248;
         return mccMoveNfa_0(5, 0);
      case 41:
         mccmatchedKind = 249;
         return mccMoveNfa_0(5, 0);
      case 42:
         mccmatchedKind = 7;
         return mccMoveNfa_0(5, 0);
      case 43:
         mccmatchedKind = 16;
         return mccMoveNfa_0(5, 0);
      case 44:
         mccmatchedKind = 250;
         return mccMoveNfa_0(5, 0);
      case 45:
         mccmatchedKind = 17;
         return mccMoveNfa_0(5, 0);
      case 47:
         mccmatchedKind = 15;
         return mccMoveNfa_0(5, 0);
      case 59:
         mccmatchedKind = 20;
         return mccMoveNfa_0(5, 0);
      case 60:
         mccmatchedKind = 11;
         return mccMoveStringLiteralDfa1_0(8192L, 0L, 0L, 0L);
      case 61:
         mccmatchedKind = 8;
         return mccMoveStringLiteralDfa1_0(512L, 0L, 0L, 0L);
      case 62:
         mccmatchedKind = 10;
         return mccMoveStringLiteralDfa1_0(4096L, 0L, 0L, 0L);
      case 63:
         mccmatchedKind = 243;
         return mccMoveNfa_0(5, 0);
      case 64:
         mccmatchedKind = 244;
         return mccMoveNfa_0(5, 0);
      case 65:
         return mccMoveStringLiteralDfa1_0(10239751856586752L, 288234774198255616L, 0L, 68853956608L);
      case 66:
         return mccMoveStringLiteralDfa1_0(1152921504606846976L, 4611686293305294848L, 9288674231451648L, 137L);
      case 67:
         return mccMoveStringLiteralDfa1_0(648518359763124224L, 72129063033635328L, 22589467491565704L, 8053063680L);
      case 68:
         return mccMoveStringLiteralDfa1_0(138529472512L, 576460752303423489L, 72620546139422721L, 8589934658L);
      case 69:
         return mccMoveStringLiteralDfa1_0(432486318895792128L, 2533274790395904L, 147460L, 0L);
      case 70:
         return mccMoveStringLiteralDfa1_0(4629700416936869888L, 69793218560L, 1153062276454940736L, 8388608L);
      case 71:
         return mccMoveStringLiteralDfa1_0(0L, 8813272891392L, 549755822080L, 0L);
      case 72:
         return mccMoveStringLiteralDfa1_0(0L, 18014398509481984L, 576460752303423488L, 0L);
      case 73:
         return mccMoveStringLiteralDfa1_0(4949949808640L, 562950003752962L, 1143913371140096L, 274877911552L);
      case 74:
         return mccMoveStringLiteralDfa1_0(0L, 4L, 0L, 0L);
      case 75:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 68719476736L, 0L);
      case 76:
         return mccMoveStringLiteralDfa1_0(-9223372036854775808L, 1152921504615236640L, 1048576L, 17196744704L);
      case 77:
         return mccMoveStringLiteralDfa1_0(0L, 0L, -6917529027641081808L, 0L);
      case 78:
         return mccMoveStringLiteralDfa1_0(4521191817609216L, 2305843009213696000L, 35184372088832L, 549789368352L);
      case 79:
         return mccMoveStringLiteralDfa1_0(2254067556417536L, 35184640528384L, 32768L, 137438953488L);
      case 80:
         return mccMoveStringLiteralDfa1_0(0L, 140737488355328L, 2216744192000L, 67108864L);
      case 82:
         return mccMoveStringLiteralDfa1_0(36028831378702336L, 144132917702950912L, 2251804108653824L, 34631843840L);
      case 83:
         return mccMoveStringLiteralDfa1_0(2306124759236083712L, 5631698557534208L, 4611690416473899520L, 4196356L);
      case 84:
         return mccMoveStringLiteralDfa1_0(8796093022208L, -9223372036850573176L, 180152781322063872L, 147712L);
      case 85:
         return mccMoveStringLiteralDfa1_0(562950221856768L, 36029396166902016L, 0L, 0L);
      case 86:
         return mccMoveStringLiteralDfa1_0(0L, 9007199254741008L, 2L, 9216L);
      case 87:
         return mccMoveStringLiteralDfa1_0(0L, 278592L, 0L, 0L);
      case 89:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 288230376151711744L, 0L);
      case 97:
         return mccMoveStringLiteralDfa1_0(10239751856586752L, 288234774198255616L, 0L, 68853956608L);
      case 98:
         return mccMoveStringLiteralDfa1_0(1152921504606846976L, 4611686293305294848L, 9288674231451648L, 137L);
      case 99:
         return mccMoveStringLiteralDfa1_0(648518359763124224L, 72129063033635328L, 22589467491565704L, 8053063680L);
      case 100:
         return mccMoveStringLiteralDfa1_0(138529472512L, 576460752303423489L, 72620546139422721L, 8589934658L);
      case 101:
         return mccMoveStringLiteralDfa1_0(432486318895792128L, 2533274790395904L, 147460L, 0L);
      case 102:
         return mccMoveStringLiteralDfa1_0(4629700416936869888L, 69793218560L, 1153062276454940736L, 8388608L);
      case 103:
         return mccMoveStringLiteralDfa1_0(0L, 8813272891392L, 549755822080L, 0L);
      case 104:
         return mccMoveStringLiteralDfa1_0(0L, 18014398509481984L, 576460752303423488L, 0L);
      case 105:
         return mccMoveStringLiteralDfa1_0(4949949808640L, 562950003752962L, 1143913371140096L, 274877911552L);
      case 106:
         return mccMoveStringLiteralDfa1_0(0L, 4L, 0L, 0L);
      case 107:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 68719476736L, 0L);
      case 108:
         return mccMoveStringLiteralDfa1_0(-9223372036854775808L, 1152921504615236640L, 1048576L, 17196744704L);
      case 109:
         return mccMoveStringLiteralDfa1_0(0L, 0L, -6917529027641081808L, 0L);
      case 110:
         return mccMoveStringLiteralDfa1_0(4521191817609216L, 2305843009213696000L, 35184372088832L, 549789368352L);
      case 111:
         return mccMoveStringLiteralDfa1_0(2254067556417536L, 35184640528384L, 32768L, 137438953488L);
      case 112:
         return mccMoveStringLiteralDfa1_0(0L, 140737488355328L, 2216744192000L, 67108864L);
      case 114:
         return mccMoveStringLiteralDfa1_0(36028831378702336L, 144132917702950912L, 2251804108653824L, 34631843840L);
      case 115:
         return mccMoveStringLiteralDfa1_0(2306124759236083712L, 5631698557534208L, 4611690416473899520L, 4196356L);
      case 116:
         return mccMoveStringLiteralDfa1_0(8796093022208L, -9223372036850573176L, 180152781322063872L, 147712L);
      case 117:
         return mccMoveStringLiteralDfa1_0(562950221856768L, 36029396166902016L, 0L, 0L);
      case 118:
         return mccMoveStringLiteralDfa1_0(0L, 9007199254741008L, 2L, 9216L);
      case 119:
         return mccMoveStringLiteralDfa1_0(0L, 278592L, 0L, 0L);
      case 121:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 288230376151711744L, 0L);
      case 124:
         return mccMoveStringLiteralDfa1_0(262144L, 0L, 0L, 0L);
      default :
         return mccMoveNfa_0(5, 0);
   }
}
private int mccMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 0);
   }
   switch((int)curChar) {
      case 61:
         if ((active0 & 512L) != 0L)
         {
            mccmatchedKind = 9;
            mccmatchedPos = 1;
         }
         else if ((active0 & 4096L) != 0L)
         {
            mccmatchedKind = 12;
            mccmatchedPos = 1;
         }
         else if ((active0 & 8192L) != 0L)
         {
            mccmatchedKind = 13;
            mccmatchedPos = 1;
         }
         break;
      case 65:
         return mccMoveStringLiteralDfa2_0(active0, 936748722493063168L, active1, 2332864606983162368L, active2, 72690912736577578L, active3, 553657344L);
      case 66:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 8724152336L);
      case 67:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 289362873128321024L, active2, 0L, active3, 0L);
      case 68:
         return mccMoveStringLiteralDfa2_0(active0, 9007199254740992L, active1, 0L, active2, 17592186306560L, active3, 0L);
      case 69:
         return mccMoveStringLiteralDfa2_0(active0, -9218586823603781632L, active1, 6485201536635895809L, active2, 4938210260847494913L, active3, 34669592640L);
      case 70:
         if ((active0 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 42;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 32768L, active2, 0L, active3, 0L);
      case 71:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 562949953421312L, active2, 0L, active3, 0L);
      case 72:
         return mccMoveStringLiteralDfa2_0(active0, 274911461376L, active1, 537157632L, active2, 18014398517870592L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 1084227664L, active2, -9078975373801684976L, active3, 17188274441L);
      case 76:
         return mccMoveStringLiteralDfa2_0(active0, 146402172328738816L, active1, 67108864L, active2, 1166432303488958464L, active3, 0L);
      case 77:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 33554432L, active3, 2048L);
      case 78:
         if ((active0 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 41;
            mccmatchedPos = 1;
         }
         else if ((active3 & 274877906944L) != 0L)
         {
            mccmatchedKind = 230;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 211108380016640L, active1, 36029357562527746L, active2, 1126321151279104L, active3, 68719481344L);
      case 79:
         if ((active0 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 43;
            mccmatchedPos = 1;
         }
         else if ((active0 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 44;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 3512807756593627136L, active1, 76561193665430564L, active2, 2882340080834314368L, active3, 549755912322L);
      case 80:
         return mccMoveStringLiteralDfa2_0(active0, 68987912192L, active1, 35184372092928L, active2, 0L, active3, 0L);
      case 82:
         if ((active3 & 137438953472L) != 0L)
         {
            mccmatchedKind = 229;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 4611686018981036032L, active1, -9223363223447666680L, active2, 2766500048896L, active3, 67239936L);
      case 83:
         if ((active0 & 549755813888L) != 0L)
         {
            mccmatchedKind = 39;
            mccmatchedPos = 1;
         }
         else if ((active0 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 40;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 1688849860263936L, active1, 70407398883584L, active2, 0L, active3, 0L);
      case 84:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 65536L, active2, 0L, active3, 4L);
      case 85:
         return mccMoveStringLiteralDfa2_0(active0, 4194304L, active1, 141837268418560L, active2, 140737505132608L, active3, 7516454944L);
      case 88:
         return mccMoveStringLiteralDfa2_0(active0, 17179869184L, active1, 2533274790395904L, active2, 147460L, active3, 0L);
      case 89:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 524416L, active2, 0L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa2_0(active0, 936748722493063168L, active1, 2332864606983162368L, active2, 72690912736577578L, active3, 553657344L);
      case 98:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 8724152336L);
      case 99:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 289362873128321024L, active2, 0L, active3, 0L);
      case 100:
         return mccMoveStringLiteralDfa2_0(active0, 9007199254740992L, active1, 0L, active2, 17592186306560L, active3, 0L);
      case 101:
         return mccMoveStringLiteralDfa2_0(active0, -9218586823603781632L, active1, 6485201536635895809L, active2, 4938210260847494913L, active3, 34669592640L);
      case 102:
         if ((active0 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 42;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 32768L, active2, 0L, active3, 0L);
      case 103:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 562949953421312L, active2, 0L, active3, 0L);
      case 104:
         return mccMoveStringLiteralDfa2_0(active0, 274911461376L, active1, 537157632L, active2, 18014398517870592L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 1084227664L, active2, -9078975373801684976L, active3, 17188274441L);
      case 108:
         return mccMoveStringLiteralDfa2_0(active0, 146402172328738816L, active1, 67108864L, active2, 1166432303488958464L, active3, 0L);
      case 109:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 33554432L, active3, 2048L);
      case 110:
         if ((active0 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 41;
            mccmatchedPos = 1;
         }
         else if ((active3 & 274877906944L) != 0L)
         {
            mccmatchedKind = 230;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 211108380016640L, active1, 36029357562527746L, active2, 1126321151279104L, active3, 68719481344L);
      case 111:
         if ((active0 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 43;
            mccmatchedPos = 1;
         }
         else if ((active0 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 44;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 3512807756593627136L, active1, 76561193665430564L, active2, 2882340080834314368L, active3, 549755912322L);
      case 112:
         return mccMoveStringLiteralDfa2_0(active0, 68987912192L, active1, 35184372092928L, active2, 0L, active3, 0L);
      case 114:
         if ((active3 & 137438953472L) != 0L)
         {
            mccmatchedKind = 229;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 4611686018981036032L, active1, -9223363223447666680L, active2, 2766500048896L, active3, 67239936L);
      case 115:
         if ((active0 & 549755813888L) != 0L)
         {
            mccmatchedKind = 39;
            mccmatchedPos = 1;
         }
         else if ((active0 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 40;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 1688849860263936L, active1, 70407398883584L, active2, 0L, active3, 0L);
      case 116:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 65536L, active2, 0L, active3, 4L);
      case 117:
         return mccMoveStringLiteralDfa2_0(active0, 4194304L, active1, 141837268418560L, active2, 140737505132608L, active3, 7516454944L);
      case 120:
         return mccMoveStringLiteralDfa2_0(active0, 17179869184L, active1, 2533274790395904L, active2, 147460L, active3, 0L);
      case 121:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 524416L, active2, 0L, active3, 0L);
      case 124:
         if ((active0 & 262144L) != 0L)
         {
            mccmatchedKind = 18;
            mccmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 1);
}
private int mccMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 1);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 1);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 1152921556146520064L, active2, 308496574483271936L, active3, 1705984L);
      case 66:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 140737492549632L, active2, 0L, active3, 0L);
      case 67:
         if ((active0 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 50;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 288230376151711744L, active1, 864972603433418784L, active2, 4611690416475996160L, active3, 64L);
      case 68:
         if ((active0 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 47;
            mccmatchedPos = 2;
         }
         else if ((active0 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 51;
            mccmatchedPos = 2;
         }
         else if ((active0 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 53;
            mccmatchedPos = 2;
         }
         else if ((active3 & 68719476736L) != 0L)
         {
            mccmatchedKind = 228;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 268435456L, active1, 2181038080L, active2, 412316893184L, active3, 0L);
      case 69:
         if ((active0 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 49;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 536870912L, active1, 537162000L, active2, 17592186306564L, active3, 0L);
      case 70:
         return mccMoveStringLiteralDfa3_0(active0, -9223372036854775808L, active1, 274877906944L, active2, 6442516481L, active3, 0L);
      case 71:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 2097152L, active2, 0L, active3, 34359738369L);
      case 72:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 1196268651020288L, active2, 0L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, -9185091427137224692L, active2, 2216807104512L, active3, 67108864L);
      case 74:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 16L);
      case 75:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 17179869184L);
      case 76:
         if ((active0 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 45;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 576460787875315712L, active1, 81065343048482816L, active2, 141836999983112L, active3, 268435456L);
      case 77:
         return mccMoveStringLiteralDfa3_0(active0, 2305843022098595840L, active1, 8390656L, active2, 144115188243628032L, active3, 16416L);
      case 78:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 562951043941376L, active2, -6917458657822113584L, active3, 98568L);
      case 79:
         return mccMoveStringLiteralDfa3_0(active0, 4611686018477719552L, active1, 8796294348800L, active2, 1166432853248974848L, active3, 128L);
      case 80:
         return mccMoveStringLiteralDfa3_0(active0, 17179869184L, active1, 128L, active2, 0L, active3, 2097152L);
      case 81:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 512L, active3, 0L);
      case 82:
         if ((active0 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 54;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 3298534883328L, active2, 8830469537794L, active3, 7528784900L);
      case 83:
         return mccMoveStringLiteralDfa3_0(active0, 216172921700220928L, active1, 513L, active2, 8590461952L, active3, 687865856L);
      case 84:
         if ((active0 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 48;
            mccmatchedPos = 2;
         }
         else if ((active2 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 176;
            mccmatchedPos = 2;
         }
         else if ((active2 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 178;
            mccmatchedPos = 2;
         }
         else if ((active3 & 549755813888L) != 0L)
         {
            mccmatchedKind = 231;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 1152921573393432576L, active1, 7061684004562436162L, active2, 72057594306510848L, active3, 8590201344L);
      case 85:
         return mccMoveStringLiteralDfa3_0(active0, 274877906944L, active1, 4503599627501568L, active2, 576460752303423488L, active3, 2L);
      case 86:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 18031990695526400L, active2, 0L, active3, 0L);
      case 87:
         if ((active0 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 52;
            mccmatchedPos = 2;
         }
         else if ((active0 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 55;
            mccmatchedPos = 2;
         }
         break;
      case 88:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 36028797018964000L, active3, 33554432L);
      case 89:
         if ((active0 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 46;
            mccmatchedPos = 2;
         }
         else if ((active2 & 68719476736L) != 0L)
         {
            mccmatchedKind = 164;
            mccmatchedPos = 2;
         }
         else if ((active2 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 177;
            mccmatchedPos = 2;
         }
         break;
      case 95:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 35184372088832L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 1152921556146520064L, active2, 308496574483271936L, active3, 1705984L);
      case 98:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 140737492549632L, active2, 0L, active3, 0L);
      case 99:
         if ((active0 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 50;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 288230376151711744L, active1, 864972603433418784L, active2, 4611690416475996160L, active3, 64L);
      case 100:
         if ((active0 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 47;
            mccmatchedPos = 2;
         }
         else if ((active0 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 51;
            mccmatchedPos = 2;
         }
         else if ((active0 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 53;
            mccmatchedPos = 2;
         }
         else if ((active3 & 68719476736L) != 0L)
         {
            mccmatchedKind = 228;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 268435456L, active1, 2181038080L, active2, 412316893184L, active3, 0L);
      case 101:
         if ((active0 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 49;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 536870912L, active1, 537162000L, active2, 17592186306564L, active3, 0L);
      case 102:
         return mccMoveStringLiteralDfa3_0(active0, -9223372036854775808L, active1, 274877906944L, active2, 6442516481L, active3, 0L);
      case 103:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 2097152L, active2, 0L, active3, 34359738369L);
      case 104:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 1196268651020288L, active2, 0L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, -9185091427137224692L, active2, 2216807104512L, active3, 67108864L);
      case 106:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 16L);
      case 107:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 17179869184L);
      case 108:
         if ((active0 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 45;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 576460787875315712L, active1, 81065343048482816L, active2, 141836999983112L, active3, 268435456L);
      case 109:
         return mccMoveStringLiteralDfa3_0(active0, 2305843022098595840L, active1, 8390656L, active2, 144115188243628032L, active3, 16416L);
      case 110:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 562951043941376L, active2, -6917458657822113584L, active3, 98568L);
      case 111:
         return mccMoveStringLiteralDfa3_0(active0, 4611686018477719552L, active1, 8796294348800L, active2, 1166432853248974848L, active3, 128L);
      case 112:
         return mccMoveStringLiteralDfa3_0(active0, 17179869184L, active1, 128L, active2, 0L, active3, 2097152L);
      case 113:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 512L, active3, 0L);
      case 114:
         if ((active0 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 54;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 3298534883328L, active2, 8830469537794L, active3, 7528784900L);
      case 115:
         return mccMoveStringLiteralDfa3_0(active0, 216172921700220928L, active1, 513L, active2, 8590461952L, active3, 687865856L);
      case 116:
         if ((active0 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 48;
            mccmatchedPos = 2;
         }
         else if ((active2 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 176;
            mccmatchedPos = 2;
         }
         else if ((active2 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 178;
            mccmatchedPos = 2;
         }
         else if ((active3 & 549755813888L) != 0L)
         {
            mccmatchedKind = 231;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 1152921573393432576L, active1, 7061684004562436162L, active2, 72057594306510848L, active3, 8590201344L);
      case 117:
         return mccMoveStringLiteralDfa3_0(active0, 274877906944L, active1, 4503599627501568L, active2, 576460752303423488L, active3, 2L);
      case 118:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 18031990695526400L, active2, 0L, active3, 0L);
      case 119:
         if ((active0 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 52;
            mccmatchedPos = 2;
         }
         else if ((active0 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 55;
            mccmatchedPos = 2;
         }
         break;
      case 120:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 36028797018964000L, active3, 33554432L);
      case 121:
         if ((active0 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 46;
            mccmatchedPos = 2;
         }
         else if ((active2 & 68719476736L) != 0L)
         {
            mccmatchedKind = 164;
            mccmatchedPos = 2;
         }
         else if ((active2 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 177;
            mccmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 2);
}
private int mccMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 2);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 2);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa4_0(active0, 805306368L, active1, 70369817919488L, active2, 1152921504606846977L, active3, 268435464L);
      case 66:
         if ((active2 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 180;
            mccmatchedPos = 3;
         }
         else if ((active2 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 181;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 8194L);
      case 67:
         if ((active1 & 1L) != 0L)
         {
            mccmatchedKind = 64;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 137438953472L, active1, 69256347648L, active2, 4194372L, active3, 536871936L);
      case 68:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 1152921504606846976L, active2, 35184372089088L, active3, 1572864L);
      case 69:
         if ((active0 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 56;
            mccmatchedPos = 3;
         }
         else if ((active0 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 57;
            mccmatchedPos = 3;
         }
         else if ((active0 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 61;
            mccmatchedPos = 3;
         }
         else if ((active1 & 128L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 3;
         }
         else if ((active1 & 2048L) != 0L)
         {
            mccmatchedKind = 75;
            mccmatchedPos = 3;
         }
         else if ((active2 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 184;
            mccmatchedPos = 3;
         }
         else if ((active2 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 185;
            mccmatchedPos = 3;
         }
         else if ((active3 & 17179869184L) != 0L)
         {
            mccmatchedKind = 226;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 3422552064L, active1, 1407377349836800L, active2, 462011203584L, active3, 34361856560L);
      case 71:
         if ((active1 & 1024L) != 0L)
         {
            mccmatchedKind = 74;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, -9223372002495037440L, active2, 1048576L, active3, 98304L);
      case 72:
         if ((active0 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 58;
            mccmatchedPos = 3;
         }
         else if ((active0 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 60;
            mccmatchedPos = 3;
         }
         else if ((active1 & 64L) != 0L)
         {
            mccmatchedKind = 70;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 3145728L, active2, 0L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa4_0(active0, 68719476736L, active1, 18053980936470528L, active2, 4096L, active3, 8594128965L);
      case 75:
         if ((active1 & 32L) != 0L)
         {
            mccmatchedKind = 69;
            mccmatchedPos = 3;
         }
         break;
      case 76:
         if ((active0 & 4194304L) != 0L)
         {
            mccmatchedKind = 22;
            mccmatchedPos = 3;
         }
         else if ((active0 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 59;
            mccmatchedPos = 3;
         }
         else if ((active2 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 179;
            mccmatchedPos = 3;
         }
         else if ((active3 & 128L) != 0L)
         {
            mccmatchedKind = 199;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 51539607552L, active1, 576601489796497408L, active2, 141836999983112L, active3, 2048L);
      case 77:
         if ((active0 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 62;
            mccmatchedPos = 3;
         }
         else if ((active1 & 8L) != 0L)
         {
            mccmatchedKind = 67;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 4294967296L, active1, 0L, active2, 2216203124736L, active3, 0L);
      case 78:
         if ((active1 & 4L) != 0L)
         {
            mccmatchedKind = 66;
            mccmatchedPos = 3;
         }
         else if ((active1 & 4096L) != 0L)
         {
            mccmatchedKind = 76;
            mccmatchedPos = 3;
         }
         else if ((active1 & 8192L) != 0L)
         {
            mccmatchedKind = 77;
            mccmatchedPos = 3;
         }
         else if ((active1 & 16384L) != 0L)
         {
            mccmatchedKind = 78;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4503621102338048L, active2, 17592186306560L, active3, 131072L);
      case 79:
         if ((active1 & 2L) != 0L)
         {
            mccmatchedKind = 65;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 288813950538088448L, active2, 4611760785218076672L, active3, 201588736L);
      case 80:
         if ((active0 & 16777216L) != 0L)
         {
            mccmatchedKind = 24;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 8589934592L, active1, 0L, active2, 134217728L, active3, 0L);
      case 81:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 36028797018963968L, active2, 0L, active3, 0L);
      case 82:
         if ((active1 & 256L) != 0L)
         {
            mccmatchedKind = 72;
            mccmatchedPos = 3;
         }
         else if ((active2 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 182;
            mccmatchedPos = 3;
         }
         else if ((active2 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 186;
            mccmatchedPos = 3;
         }
         else if ((active2 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 187;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 327680L, active2, 27279360L, active3, 7516192768L);
      case 83:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 2252899526639616L, active2, 1073744000L, active3, 8388608L);
      case 84:
         if ((active0 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 63;
            mccmatchedPos = 3;
         }
         else if ((active1 & 512L) != 0L)
         {
            mccmatchedKind = 73;
            mccmatchedPos = 3;
         }
         else if ((active2 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 183;
            mccmatchedPos = 3;
         }
         else if ((active3 & 16777216L) != 0L)
         {
            mccmatchedKind = 216;
            mccmatchedPos = 3;
         }
         else if ((active3 & 33554432L) != 0L)
         {
            mccmatchedKind = 217;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 274877906944L, active1, 0L, active2, 2305851805374350336L, active3, 0L);
      case 85:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 2531031924114194432L, active2, -9223371487098953216L, active3, 0L);
      case 86:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 536870960L, active3, 0L);
      case 87:
         if ((active0 & 33554432L) != 0L)
         {
            mccmatchedKind = 25;
            mccmatchedPos = 3;
         }
         else if ((active1 & 16L) != 0L)
         {
            mccmatchedKind = 68;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4611686018427387904L, active2, 0L, active3, 0L);
      case 89:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 2L, active3, 256L);
      case 97:
         return mccMoveStringLiteralDfa4_0(active0, 805306368L, active1, 70369817919488L, active2, 1152921504606846977L, active3, 268435464L);
      case 98:
         if ((active2 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 180;
            mccmatchedPos = 3;
         }
         else if ((active2 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 181;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 8194L);
      case 99:
         if ((active1 & 1L) != 0L)
         {
            mccmatchedKind = 64;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 137438953472L, active1, 69256347648L, active2, 4194372L, active3, 536871936L);
      case 100:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 1152921504606846976L, active2, 35184372089088L, active3, 1572864L);
      case 101:
         if ((active0 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 56;
            mccmatchedPos = 3;
         }
         else if ((active0 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 57;
            mccmatchedPos = 3;
         }
         else if ((active0 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 61;
            mccmatchedPos = 3;
         }
         else if ((active1 & 128L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 3;
         }
         else if ((active1 & 2048L) != 0L)
         {
            mccmatchedKind = 75;
            mccmatchedPos = 3;
         }
         else if ((active2 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 184;
            mccmatchedPos = 3;
         }
         else if ((active2 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 185;
            mccmatchedPos = 3;
         }
         else if ((active3 & 17179869184L) != 0L)
         {
            mccmatchedKind = 226;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 3422552064L, active1, 1407377349836800L, active2, 462011203584L, active3, 34361856560L);
      case 103:
         if ((active1 & 1024L) != 0L)
         {
            mccmatchedKind = 74;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, -9223372002495037440L, active2, 1048576L, active3, 98304L);
      case 104:
         if ((active0 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 58;
            mccmatchedPos = 3;
         }
         else if ((active0 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 60;
            mccmatchedPos = 3;
         }
         else if ((active1 & 64L) != 0L)
         {
            mccmatchedKind = 70;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 3145728L, active2, 0L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa4_0(active0, 68719476736L, active1, 18053980936470528L, active2, 4096L, active3, 8594128965L);
      case 107:
         if ((active1 & 32L) != 0L)
         {
            mccmatchedKind = 69;
            mccmatchedPos = 3;
         }
         break;
      case 108:
         if ((active0 & 4194304L) != 0L)
         {
            mccmatchedKind = 22;
            mccmatchedPos = 3;
         }
         else if ((active0 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 59;
            mccmatchedPos = 3;
         }
         else if ((active2 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 179;
            mccmatchedPos = 3;
         }
         else if ((active3 & 128L) != 0L)
         {
            mccmatchedKind = 199;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 51539607552L, active1, 576601489796497408L, active2, 141836999983112L, active3, 2048L);
      case 109:
         if ((active0 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 62;
            mccmatchedPos = 3;
         }
         else if ((active1 & 8L) != 0L)
         {
            mccmatchedKind = 67;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 4294967296L, active1, 0L, active2, 2216203124736L, active3, 0L);
      case 110:
         if ((active1 & 4L) != 0L)
         {
            mccmatchedKind = 66;
            mccmatchedPos = 3;
         }
         else if ((active1 & 4096L) != 0L)
         {
            mccmatchedKind = 76;
            mccmatchedPos = 3;
         }
         else if ((active1 & 8192L) != 0L)
         {
            mccmatchedKind = 77;
            mccmatchedPos = 3;
         }
         else if ((active1 & 16384L) != 0L)
         {
            mccmatchedKind = 78;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4503621102338048L, active2, 17592186306560L, active3, 131072L);
      case 111:
         if ((active1 & 2L) != 0L)
         {
            mccmatchedKind = 65;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 288813950538088448L, active2, 4611760785218076672L, active3, 201588736L);
      case 112:
         if ((active0 & 16777216L) != 0L)
         {
            mccmatchedKind = 24;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 8589934592L, active1, 0L, active2, 134217728L, active3, 0L);
      case 113:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 36028797018963968L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 256L) != 0L)
         {
            mccmatchedKind = 72;
            mccmatchedPos = 3;
         }
         else if ((active2 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 182;
            mccmatchedPos = 3;
         }
         else if ((active2 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 186;
            mccmatchedPos = 3;
         }
         else if ((active2 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 187;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 327680L, active2, 27279360L, active3, 7516192768L);
      case 115:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 2252899526639616L, active2, 1073744000L, active3, 8388608L);
      case 116:
         if ((active0 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 63;
            mccmatchedPos = 3;
         }
         else if ((active1 & 512L) != 0L)
         {
            mccmatchedKind = 73;
            mccmatchedPos = 3;
         }
         else if ((active2 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 183;
            mccmatchedPos = 3;
         }
         else if ((active3 & 16777216L) != 0L)
         {
            mccmatchedKind = 216;
            mccmatchedPos = 3;
         }
         else if ((active3 & 33554432L) != 0L)
         {
            mccmatchedKind = 217;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 274877906944L, active1, 0L, active2, 2305851805374350336L, active3, 0L);
      case 117:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 2531031924114194432L, active2, -9223371487098953216L, active3, 0L);
      case 118:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 536870960L, active3, 0L);
      case 119:
         if ((active0 & 33554432L) != 0L)
         {
            mccmatchedKind = 25;
            mccmatchedPos = 3;
         }
         else if ((active1 & 16L) != 0L)
         {
            mccmatchedKind = 68;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4611686018427387904L, active2, 0L, active3, 0L);
      case 121:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 2L, active3, 256L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 3);
}
private int mccMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 3);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 3);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 1835008L);
      case 65:
         return mccMoveStringLiteralDfa5_0(active0, 25769803776L, active1, 576460752303423488L, active2, 3315723157552L, active3, 543162368L);
      case 66:
         return mccMoveStringLiteralDfa5_0(active0, 34359738368L, active1, 0L, active2, 8L, active3, 0L);
      case 67:
         return mccMoveStringLiteralDfa5_0(active0, 134217728L, active1, 549755813888L, active2, 0L, active3, 16L);
      case 68:
         return mccMoveStringLiteralDfa5_0(active0, 274877906944L, active1, 4503599627370496L, active2, 33554432L, active3, 0L);
      case 69:
         if ((active1 & 262144L) != 0L)
         {
            mccmatchedKind = 82;
            mccmatchedPos = 4;
         }
         else if ((active1 & 524288L) != 0L)
         {
            mccmatchedKind = 83;
            mccmatchedPos = 4;
         }
         else if ((active1 & 1048576L) != 0L)
         {
            mccmatchedKind = 84;
            mccmatchedPos = 4;
         }
         else if ((active1 & 4194304L) != 0L)
         {
            mccmatchedKind = 86;
            mccmatchedPos = 4;
         }
         else if ((active1 & 67108864L) != 0L)
         {
            mccmatchedKind = 90;
            mccmatchedPos = 4;
         }
         else if ((active1 & 34359738368L) != 0L)
         {
            mccmatchedKind = 99;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 4620693217682128896L, active2, 35184395158016L, active3, 7516192768L);
      case 71:
         if ((active1 & 4294967296L) != 0L)
         {
            mccmatchedKind = 96;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, -9223372036854775808L, active2, 0L, active3, 512L);
      case 72:
         if ((active1 & 68719476736L) != 0L)
         {
            mccmatchedKind = 100;
            mccmatchedPos = 4;
         }
         else if ((active2 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 189;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 1024L);
      case 73:
         return mccMoveStringLiteralDfa5_0(active0, 4294967296L, active1, 1153062242095202304L, active2, 8831057264642L, active3, 8448L);
      case 75:
         if ((active1 & 536870912L) != 0L)
         {
            mccmatchedKind = 93;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 17592186044416L, active2, 0L, active3, 0L);
      case 76:
         if ((active1 & 1073741824L) != 0L)
         {
            mccmatchedKind = 94;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 2199023255552L, active2, 4096L, active3, 134219778L);
      case 77:
         return mccMoveStringLiteralDfa5_0(active0, 68719476736L, active1, 73183493944770560L, active2, 0L, active3, 8589934656L);
      case 78:
         if ((active1 & 8589934592L) != 0L)
         {
            mccmatchedKind = 97;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 18014398509481984L, active2, 4611760793808011264L, active3, 5L);
      case 79:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 40681930227712L, active2, 134217984L, active3, 0L);
      case 80:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 290271069732864L, active2, 549755822080L, active3, 0L);
      case 82:
         if ((active0 & 67108864L) != 0L)
         {
            mccmatchedKind = 26;
            mccmatchedPos = 4;
         }
         else if ((active1 & 32768L) != 0L)
         {
            mccmatchedKind = 79;
            mccmatchedPos = 4;
         }
         else if ((active1 & 16777216L) != 0L)
         {
            mccmatchedKind = 88;
            mccmatchedPos = 4;
         }
         else if ((active1 & 268435456L) != 0L)
         {
            mccmatchedKind = 92;
            mccmatchedPos = 4;
         }
         else if ((active1 & 2147483648L) != 0L)
         {
            mccmatchedKind = 95;
            mccmatchedPos = 4;
         }
         else if ((active3 & 67108864L) != 0L)
         {
            mccmatchedKind = 218;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 139586437120L, active1, 2450591928304009216L, active2, 6711116800L, active3, 4136L);
      case 83:
         if ((active1 & 134217728L) != 0L)
         {
            mccmatchedKind = 91;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 147456L);
      case 84:
         if ((active1 & 65536L) != 0L)
         {
            mccmatchedKind = 80;
            mccmatchedPos = 4;
         }
         else if ((active1 & 131072L) != 0L)
         {
            mccmatchedKind = 81;
            mccmatchedPos = 4;
         }
         else if ((active1 & 2097152L) != 0L)
         {
            mccmatchedKind = 85;
            mccmatchedPos = 4;
         }
         else if ((active1 & 8388608L) != 0L)
         {
            mccmatchedKind = 87;
            mccmatchedPos = 4;
         }
         else if ((active1 & 17179869184L) != 0L)
         {
            mccmatchedKind = 98;
            mccmatchedPos = 4;
         }
         else if ((active2 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 188;
            mccmatchedPos = 4;
         }
         else if ((active3 & 8388608L) != 0L)
         {
            mccmatchedKind = 215;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 1879048192L, active1, 2251799813685248L, active2, -9223354443594727232L, active3, 268435456L);
      case 85:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 324259173170675712L, active2, 1048581L, active3, 0L);
      case 86:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 98304L);
      case 87:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 2048L, active3, 0L);
      case 88:
         if ((active1 & 33554432L) != 0L)
         {
            mccmatchedKind = 89;
            mccmatchedPos = 4;
         }
         else if ((active3 & 34359738368L) != 0L)
         {
            mccmatchedKind = 227;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 412316860416L, active3, 0L);
      case 95:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 140737488355328L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa5_0(active0, 25769803776L, active1, 576460752303423488L, active2, 3315723157552L, active3, 543162368L);
      case 98:
         return mccMoveStringLiteralDfa5_0(active0, 34359738368L, active1, 0L, active2, 8L, active3, 0L);
      case 99:
         return mccMoveStringLiteralDfa5_0(active0, 134217728L, active1, 549755813888L, active2, 0L, active3, 16L);
      case 100:
         return mccMoveStringLiteralDfa5_0(active0, 274877906944L, active1, 4503599627370496L, active2, 33554432L, active3, 0L);
      case 101:
         if ((active1 & 262144L) != 0L)
         {
            mccmatchedKind = 82;
            mccmatchedPos = 4;
         }
         else if ((active1 & 524288L) != 0L)
         {
            mccmatchedKind = 83;
            mccmatchedPos = 4;
         }
         else if ((active1 & 1048576L) != 0L)
         {
            mccmatchedKind = 84;
            mccmatchedPos = 4;
         }
         else if ((active1 & 4194304L) != 0L)
         {
            mccmatchedKind = 86;
            mccmatchedPos = 4;
         }
         else if ((active1 & 67108864L) != 0L)
         {
            mccmatchedKind = 90;
            mccmatchedPos = 4;
         }
         else if ((active1 & 34359738368L) != 0L)
         {
            mccmatchedKind = 99;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 4620693217682128896L, active2, 35184395158016L, active3, 7516192768L);
      case 103:
         if ((active1 & 4294967296L) != 0L)
         {
            mccmatchedKind = 96;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, -9223372036854775808L, active2, 0L, active3, 512L);
      case 104:
         if ((active1 & 68719476736L) != 0L)
         {
            mccmatchedKind = 100;
            mccmatchedPos = 4;
         }
         else if ((active2 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 189;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 1024L);
      case 105:
         return mccMoveStringLiteralDfa5_0(active0, 4294967296L, active1, 1153062242095202304L, active2, 8831057264642L, active3, 8448L);
      case 107:
         if ((active1 & 536870912L) != 0L)
         {
            mccmatchedKind = 93;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 17592186044416L, active2, 0L, active3, 0L);
      case 108:
         if ((active1 & 1073741824L) != 0L)
         {
            mccmatchedKind = 94;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 2199023255552L, active2, 4096L, active3, 134219778L);
      case 109:
         return mccMoveStringLiteralDfa5_0(active0, 68719476736L, active1, 73183493944770560L, active2, 0L, active3, 8589934656L);
      case 110:
         if ((active1 & 8589934592L) != 0L)
         {
            mccmatchedKind = 97;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 18014398509481984L, active2, 4611760793808011264L, active3, 5L);
      case 111:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 40681930227712L, active2, 134217984L, active3, 0L);
      case 112:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 290271069732864L, active2, 549755822080L, active3, 0L);
      case 114:
         if ((active0 & 67108864L) != 0L)
         {
            mccmatchedKind = 26;
            mccmatchedPos = 4;
         }
         else if ((active1 & 32768L) != 0L)
         {
            mccmatchedKind = 79;
            mccmatchedPos = 4;
         }
         else if ((active1 & 16777216L) != 0L)
         {
            mccmatchedKind = 88;
            mccmatchedPos = 4;
         }
         else if ((active1 & 268435456L) != 0L)
         {
            mccmatchedKind = 92;
            mccmatchedPos = 4;
         }
         else if ((active1 & 2147483648L) != 0L)
         {
            mccmatchedKind = 95;
            mccmatchedPos = 4;
         }
         else if ((active3 & 67108864L) != 0L)
         {
            mccmatchedKind = 218;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 139586437120L, active1, 2450591928304009216L, active2, 6711116800L, active3, 4136L);
      case 115:
         if ((active1 & 134217728L) != 0L)
         {
            mccmatchedKind = 91;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 147456L);
      case 116:
         if ((active1 & 65536L) != 0L)
         {
            mccmatchedKind = 80;
            mccmatchedPos = 4;
         }
         else if ((active1 & 131072L) != 0L)
         {
            mccmatchedKind = 81;
            mccmatchedPos = 4;
         }
         else if ((active1 & 2097152L) != 0L)
         {
            mccmatchedKind = 85;
            mccmatchedPos = 4;
         }
         else if ((active1 & 8388608L) != 0L)
         {
            mccmatchedKind = 87;
            mccmatchedPos = 4;
         }
         else if ((active1 & 17179869184L) != 0L)
         {
            mccmatchedKind = 98;
            mccmatchedPos = 4;
         }
         else if ((active2 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 188;
            mccmatchedPos = 4;
         }
         else if ((active3 & 8388608L) != 0L)
         {
            mccmatchedKind = 215;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 1879048192L, active1, 2251799813685248L, active2, -9223354443594727232L, active3, 268435456L);
      case 117:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 324259173170675712L, active2, 1048581L, active3, 0L);
      case 118:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 98304L);
      case 119:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 2048L, active3, 0L);
      case 120:
         if ((active1 & 33554432L) != 0L)
         {
            mccmatchedKind = 89;
            mccmatchedPos = 4;
         }
         else if ((active3 & 34359738368L) != 0L)
         {
            mccmatchedKind = 227;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 412316860416L, active3, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 4);
}
private int mccMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 4);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 4);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 549755854848L, active3, 0L);
      case 65:
         if ((active1 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 114;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 34359738368L, active1, 2305843009213693952L, active2, 8796161179784L, active3, 230464L);
      case 67:
         if ((active1 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 111;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 8589934592L, active1, 0L, active2, 35184380493824L, active3, 786432L);
      case 68:
         if ((active2 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 190;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 145135539060736L, active3, 536870912L);
      case 69:
         if ((active0 & 268435456L) != 0L)
         {
            mccmatchedKind = 28;
            mccmatchedPos = 5;
         }
         else if ((active0 & 536870912L) != 0L)
         {
            mccmatchedKind = 29;
            mccmatchedPos = 5;
         }
         else if ((active0 & 1073741824L) != 0L)
         {
            mccmatchedKind = 30;
            mccmatchedPos = 5;
         }
         else if ((active1 & 274877906944L) != 0L)
         {
            mccmatchedKind = 102;
            mccmatchedPos = 5;
         }
         else if ((active1 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 108;
            mccmatchedPos = 5;
         }
         else if ((active1 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 113;
            mccmatchedPos = 5;
         }
         else if ((active1 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 119;
            mccmatchedPos = 5;
         }
         else if ((active2 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 191;
            mccmatchedPos = 5;
         }
         else if ((active3 & 2L) != 0L)
         {
            mccmatchedKind = 193;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, -4611686018427387904L, active2, 4294967296L, active3, 8589935104L);
      case 71:
         if ((active1 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 118;
            mccmatchedPos = 5;
         }
         else if ((active3 & 4L) != 0L)
         {
            mccmatchedKind = 194;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 34359738368L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa6_0(active0, 223338299392L, active1, 0L, active2, 87960964043840L, active3, 268437536L);
      case 75:
         if ((active1 & 549755813888L) != 0L)
         {
            mccmatchedKind = 103;
            mccmatchedPos = 5;
         }
         break;
      case 76:
         if ((active1 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 105;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 536870961L, active3, 4194304L);
      case 77:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 2097152L, active3, 0L);
      case 78:
         if ((active1 & 137438953472L) != 0L)
         {
            mccmatchedKind = 101;
            mccmatchedPos = 5;
         }
         else if ((active1 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 106;
            mccmatchedPos = 5;
         }
         else if ((active1 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 109;
            mccmatchedPos = 5;
         }
         else if ((active1 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 120;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 1585267068834414592L, active2, 17433346L, active3, 7516201216L);
      case 79:
         return mccMoveStringLiteralDfa6_0(active0, 274877906944L, active1, 0L, active2, 2048L, active3, 0L);
      case 80:
         if ((active1 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 110;
            mccmatchedPos = 5;
         }
         break;
      case 82:
         if ((active1 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 104;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 576460752303423488L, active2, 2219558633472L, active3, 0L);
      case 83:
         if ((active1 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 107;
            mccmatchedPos = 5;
         }
         else if ((active1 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 115;
            mccmatchedPos = 5;
         }
         else if ((active1 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 116;
            mccmatchedPos = 5;
         }
         else if ((active1 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 117;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 8858370048L, active3, 0L);
      case 84:
         if ((active0 & 134217728L) != 0L)
         {
            mccmatchedKind = 27;
            mccmatchedPos = 5;
         }
         else if ((active0 & 2147483648L) != 0L)
         {
            mccmatchedKind = 31;
            mccmatchedPos = 5;
         }
         else if ((active0 & 4294967296L) != 0L)
         {
            mccmatchedKind = 32;
            mccmatchedPos = 5;
         }
         else if ((active1 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 112;
            mccmatchedPos = 5;
         }
         else if ((active3 & 1L) != 0L)
         {
            mccmatchedKind = 192;
            mccmatchedPos = 5;
         }
         else if ((active3 & 16L) != 0L)
         {
            mccmatchedKind = 196;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 1099511627780L, active3, 2113536L);
      case 85:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 135266304L);
      case 86:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 4096L);
      case 89:
         if ((active3 & 8L) != 0L)
         {
            mccmatchedKind = 195;
            mccmatchedPos = 5;
         }
         break;
      case 95:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 412316860416L, active3, 0L);
      case 97:
         if ((active1 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 114;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 34359738368L, active1, 2305843009213693952L, active2, 8796161179784L, active3, 230464L);
      case 99:
         if ((active1 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 111;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 8589934592L, active1, 0L, active2, 35184380493824L, active3, 786432L);
      case 100:
         if ((active2 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 190;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 145135539060736L, active3, 536870912L);
      case 101:
         if ((active0 & 268435456L) != 0L)
         {
            mccmatchedKind = 28;
            mccmatchedPos = 5;
         }
         else if ((active0 & 536870912L) != 0L)
         {
            mccmatchedKind = 29;
            mccmatchedPos = 5;
         }
         else if ((active0 & 1073741824L) != 0L)
         {
            mccmatchedKind = 30;
            mccmatchedPos = 5;
         }
         else if ((active1 & 274877906944L) != 0L)
         {
            mccmatchedKind = 102;
            mccmatchedPos = 5;
         }
         else if ((active1 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 108;
            mccmatchedPos = 5;
         }
         else if ((active1 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 113;
            mccmatchedPos = 5;
         }
         else if ((active1 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 119;
            mccmatchedPos = 5;
         }
         else if ((active2 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 191;
            mccmatchedPos = 5;
         }
         else if ((active3 & 2L) != 0L)
         {
            mccmatchedKind = 193;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, -4611686018427387904L, active2, 4294967296L, active3, 8589935104L);
      case 103:
         if ((active1 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 118;
            mccmatchedPos = 5;
         }
         else if ((active3 & 4L) != 0L)
         {
            mccmatchedKind = 194;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 34359738368L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa6_0(active0, 223338299392L, active1, 0L, active2, 87960964043840L, active3, 268437536L);
      case 107:
         if ((active1 & 549755813888L) != 0L)
         {
            mccmatchedKind = 103;
            mccmatchedPos = 5;
         }
         break;
      case 108:
         if ((active1 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 105;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 536870961L, active3, 4194304L);
      case 109:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 2097152L, active3, 0L);
      case 110:
         if ((active1 & 137438953472L) != 0L)
         {
            mccmatchedKind = 101;
            mccmatchedPos = 5;
         }
         else if ((active1 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 106;
            mccmatchedPos = 5;
         }
         else if ((active1 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 109;
            mccmatchedPos = 5;
         }
         else if ((active1 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 120;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 1585267068834414592L, active2, 17433346L, active3, 7516201216L);
      case 111:
         return mccMoveStringLiteralDfa6_0(active0, 274877906944L, active1, 0L, active2, 2048L, active3, 0L);
      case 112:
         if ((active1 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 110;
            mccmatchedPos = 5;
         }
         break;
      case 114:
         if ((active1 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 104;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 576460752303423488L, active2, 2219558633472L, active3, 0L);
      case 115:
         if ((active1 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 107;
            mccmatchedPos = 5;
         }
         else if ((active1 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 115;
            mccmatchedPos = 5;
         }
         else if ((active1 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 116;
            mccmatchedPos = 5;
         }
         else if ((active1 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 117;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 8858370048L, active3, 0L);
      case 116:
         if ((active0 & 134217728L) != 0L)
         {
            mccmatchedKind = 27;
            mccmatchedPos = 5;
         }
         else if ((active0 & 2147483648L) != 0L)
         {
            mccmatchedKind = 31;
            mccmatchedPos = 5;
         }
         else if ((active0 & 4294967296L) != 0L)
         {
            mccmatchedKind = 32;
            mccmatchedPos = 5;
         }
         else if ((active1 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 112;
            mccmatchedPos = 5;
         }
         else if ((active3 & 1L) != 0L)
         {
            mccmatchedKind = 192;
            mccmatchedPos = 5;
         }
         else if ((active3 & 16L) != 0L)
         {
            mccmatchedKind = 196;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 1099511627780L, active3, 2113536L);
      case 117:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 135266304L);
      case 118:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 4096L);
      case 121:
         if ((active3 & 8L) != 0L)
         {
            mccmatchedKind = 195;
            mccmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 5);
}
private int mccMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 5);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 5);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 4401435639808L, active3, 2125824L);
      case 66:
         return mccMoveStringLiteralDfa7_0(active0, 137438953472L, active1, 0L, active2, 274877947904L, active3, 0L);
      case 67:
         if ((active3 & 32L) != 0L)
         {
            mccmatchedKind = 197;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 34359738368L, active1, 0L, active2, 87960930747912L, active3, 131072L);
      case 69:
         if ((active1 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 123;
            mccmatchedPos = 6;
         }
         else if ((active2 & 4L) != 0L)
         {
            mccmatchedKind = 130;
            mccmatchedPos = 6;
         }
         else if ((active2 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 168;
            mccmatchedPos = 6;
         }
         else if ((active3 & 536870912L) != 0L)
         {
            mccmatchedKind = 221;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 140738295824384L, active3, 0L);
      case 71:
         if ((active1 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 124;
            mccmatchedPos = 6;
         }
         else if ((active2 & 2L) != 0L)
         {
            mccmatchedKind = 129;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 1048576L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 8589934592L, active3, 4194304L);
      case 76:
         if ((active1 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 125;
            mccmatchedPos = 6;
         }
         else if ((active3 & 64L) != 0L)
         {
            mccmatchedKind = 198;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 67109120L, active3, 0L);
      case 77:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 549755813888L, active3, 0L);
      case 78:
         if ((active0 & 17179869184L) != 0L)
         {
            mccmatchedKind = 34;
            mccmatchedPos = 6;
         }
         else if ((active1 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 126;
            mccmatchedPos = 6;
         }
         else if ((active2 & 34359738368L) != 0L)
         {
            mccmatchedKind = 163;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 141733924992L, active3, 1050624L);
      case 79:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 35184372088896L, active3, 786432L);
      case 82:
         if ((active1 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 127;
            mccmatchedPos = 6;
         }
         else if ((active3 & 512L) != 0L)
         {
            mccmatchedKind = 201;
            mccmatchedPos = 6;
         }
         else if ((active3 & 1024L) != 0L)
         {
            mccmatchedKind = 202;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 8796093024256L, active3, 98304L);
      case 83:
         if ((active1 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 121;
            mccmatchedPos = 6;
         }
         break;
      case 84:
         if ((active0 & 8589934592L) != 0L)
         {
            mccmatchedKind = 33;
            mccmatchedPos = 6;
         }
         else if ((active1 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 122;
            mccmatchedPos = 6;
         }
         else if ((active2 & 1L) != 0L)
         {
            mccmatchedKind = 128;
            mccmatchedPos = 6;
         }
         else if ((active2 & 16384L) != 0L)
         {
            mccmatchedKind = 142;
            mccmatchedPos = 6;
         }
         else if ((active3 & 256L) != 0L)
         {
            mccmatchedKind = 200;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 25427968L, active3, 7650410496L);
      case 85:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 4194352L, active3, 0L);
      case 86:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 268435456L);
      case 87:
         return mccMoveStringLiteralDfa7_0(active0, 274877906944L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
         if ((active2 & 17179869184L) != 0L)
         {
            mccmatchedKind = 162;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 2199023255552L, active3, 0L);
      case 90:
         return mccMoveStringLiteralDfa7_0(active0, 68719476736L, active1, 0L, active2, 0L, active3, 8589934592L);
      case 97:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 4401435639808L, active3, 2125824L);
      case 98:
         return mccMoveStringLiteralDfa7_0(active0, 137438953472L, active1, 0L, active2, 274877947904L, active3, 0L);
      case 99:
         if ((active3 & 32L) != 0L)
         {
            mccmatchedKind = 197;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 34359738368L, active1, 0L, active2, 87960930747912L, active3, 131072L);
      case 101:
         if ((active1 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 123;
            mccmatchedPos = 6;
         }
         else if ((active2 & 4L) != 0L)
         {
            mccmatchedKind = 130;
            mccmatchedPos = 6;
         }
         else if ((active2 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 168;
            mccmatchedPos = 6;
         }
         else if ((active3 & 536870912L) != 0L)
         {
            mccmatchedKind = 221;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 140738295824384L, active3, 0L);
      case 103:
         if ((active1 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 124;
            mccmatchedPos = 6;
         }
         else if ((active2 & 2L) != 0L)
         {
            mccmatchedKind = 129;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 1048576L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 8589934592L, active3, 4194304L);
      case 108:
         if ((active1 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 125;
            mccmatchedPos = 6;
         }
         else if ((active3 & 64L) != 0L)
         {
            mccmatchedKind = 198;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 67109120L, active3, 0L);
      case 109:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 549755813888L, active3, 0L);
      case 110:
         if ((active0 & 17179869184L) != 0L)
         {
            mccmatchedKind = 34;
            mccmatchedPos = 6;
         }
         else if ((active1 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 126;
            mccmatchedPos = 6;
         }
         else if ((active2 & 34359738368L) != 0L)
         {
            mccmatchedKind = 163;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 141733924992L, active3, 1050624L);
      case 111:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 35184372088896L, active3, 786432L);
      case 114:
         if ((active1 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 127;
            mccmatchedPos = 6;
         }
         else if ((active3 & 512L) != 0L)
         {
            mccmatchedKind = 201;
            mccmatchedPos = 6;
         }
         else if ((active3 & 1024L) != 0L)
         {
            mccmatchedKind = 202;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 8796093024256L, active3, 98304L);
      case 115:
         if ((active1 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 121;
            mccmatchedPos = 6;
         }
         break;
      case 116:
         if ((active0 & 8589934592L) != 0L)
         {
            mccmatchedKind = 33;
            mccmatchedPos = 6;
         }
         else if ((active1 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 122;
            mccmatchedPos = 6;
         }
         else if ((active2 & 1L) != 0L)
         {
            mccmatchedKind = 128;
            mccmatchedPos = 6;
         }
         else if ((active2 & 16384L) != 0L)
         {
            mccmatchedKind = 142;
            mccmatchedPos = 6;
         }
         else if ((active3 & 256L) != 0L)
         {
            mccmatchedKind = 200;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 25427968L, active3, 7650410496L);
      case 117:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 4194352L, active3, 0L);
      case 118:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 268435456L);
      case 119:
         return mccMoveStringLiteralDfa7_0(active0, 274877906944L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active2 & 17179869184L) != 0L)
         {
            mccmatchedKind = 162;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 2199023255552L, active3, 0L);
      case 122:
         return mccMoveStringLiteralDfa7_0(active0, 68719476736L, active1, 0L, active2, 0L, active3, 8589934592L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 6);
}
private int mccMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 6);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 6);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 16777216L, active3, 0L);
      case 65:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 88510686035968L, active3, 0L);
      case 66:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 2147483648L, active3, 2162688L);
      case 67:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 140742051758080L, active3, 1081344L);
      case 68:
         if ((active2 & 2048L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 7;
         }
         else if ((active2 & 65536L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 7;
         }
         break;
      case 69:
         if ((active0 & 68719476736L) != 0L)
         {
            mccmatchedKind = 36;
            mccmatchedPos = 7;
         }
         else if ((active0 & 137438953472L) != 0L)
         {
            mccmatchedKind = 37;
            mccmatchedPos = 7;
         }
         else if ((active2 & 16L) != 0L)
         {
            mccmatchedKind = 132;
            mccmatchedPos = 7;
         }
         else if ((active2 & 32L) != 0L)
         {
            mccmatchedKind = 133;
            mccmatchedPos = 7;
         }
         else if ((active2 & 512L) != 0L)
         {
            mccmatchedKind = 137;
            mccmatchedPos = 7;
         }
         else if ((active2 & 1048576L) != 0L)
         {
            mccmatchedKind = 148;
            mccmatchedPos = 7;
         }
         else if ((active3 & 134217728L) != 0L)
         {
            mccmatchedKind = 219;
            mccmatchedPos = 7;
         }
         else if ((active3 & 268435456L) != 0L)
         {
            mccmatchedKind = 220;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 8388608L, active3, 0L);
      case 71:
         if ((active2 & 4096L) != 0L)
         {
            mccmatchedKind = 140;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 536870912L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 1073741824L, active3, 0L);
      case 75:
         if ((active0 & 34359738368L) != 0L)
         {
            mccmatchedKind = 35;
            mccmatchedPos = 7;
         }
         else if ((active2 & 8L) != 0L)
         {
            mccmatchedKind = 131;
            mccmatchedPos = 7;
         }
         break;
      case 76:
         if ((active2 & 131072L) != 0L)
         {
            mccmatchedKind = 145;
            mccmatchedPos = 7;
         }
         else if ((active3 & 4096L) != 0L)
         {
            mccmatchedKind = 204;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 274945015808L, active3, 0L);
      case 77:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 35184372088832L, active3, 802816L);
      case 78:
         if ((active0 & 274877906944L) != 0L)
         {
            mccmatchedKind = 38;
            mccmatchedPos = 7;
         }
         else if ((active2 & 64L) != 0L)
         {
            mccmatchedKind = 134;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 2097152L, active3, 0L);
      case 79:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 137438953472L, active3, 8589934592L);
      case 82:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 4398184923136L, active3, 8192L);
      case 84:
         if ((active2 & 128L) != 0L)
         {
            mccmatchedKind = 135;
            mccmatchedPos = 7;
         }
         else if ((active2 & 1024L) != 0L)
         {
            mccmatchedKind = 138;
            mccmatchedPos = 7;
         }
         else if ((active2 & 524288L) != 0L)
         {
            mccmatchedKind = 147;
            mccmatchedPos = 7;
         }
         else if ((active3 & 2048L) != 0L)
         {
            mccmatchedKind = 203;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 8623489024L, active3, 131072L);
      case 89:
         if ((active2 & 256L) != 0L)
         {
            mccmatchedKind = 136;
            mccmatchedPos = 7;
         }
         else if ((active2 & 8192L) != 0L)
         {
            mccmatchedKind = 141;
            mccmatchedPos = 7;
         }
         else if ((active2 & 32768L) != 0L)
         {
            mccmatchedKind = 143;
            mccmatchedPos = 7;
         }
         else if ((active2 & 262144L) != 0L)
         {
            mccmatchedKind = 146;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 8796093022208L, active3, 0L);
      case 90:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 0L, active3, 4194304L);
      case 95:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 2199023255552L, active3, 7516192768L);
      case 97:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 88510686035968L, active3, 0L);
      case 98:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 2147483648L, active3, 2162688L);
      case 99:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 140742051758080L, active3, 1081344L);
      case 100:
         if ((active2 & 2048L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 7;
         }
         else if ((active2 & 65536L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 68719476736L) != 0L)
         {
            mccmatchedKind = 36;
            mccmatchedPos = 7;
         }
         else if ((active0 & 137438953472L) != 0L)
         {
            mccmatchedKind = 37;
            mccmatchedPos = 7;
         }
         else if ((active2 & 16L) != 0L)
         {
            mccmatchedKind = 132;
            mccmatchedPos = 7;
         }
         else if ((active2 & 32L) != 0L)
         {
            mccmatchedKind = 133;
            mccmatchedPos = 7;
         }
         else if ((active2 & 512L) != 0L)
         {
            mccmatchedKind = 137;
            mccmatchedPos = 7;
         }
         else if ((active2 & 1048576L) != 0L)
         {
            mccmatchedKind = 148;
            mccmatchedPos = 7;
         }
         else if ((active3 & 134217728L) != 0L)
         {
            mccmatchedKind = 219;
            mccmatchedPos = 7;
         }
         else if ((active3 & 268435456L) != 0L)
         {
            mccmatchedKind = 220;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 8388608L, active3, 0L);
      case 103:
         if ((active2 & 4096L) != 0L)
         {
            mccmatchedKind = 140;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 536870912L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 1073741824L, active3, 0L);
      case 107:
         if ((active0 & 34359738368L) != 0L)
         {
            mccmatchedKind = 35;
            mccmatchedPos = 7;
         }
         else if ((active2 & 8L) != 0L)
         {
            mccmatchedKind = 131;
            mccmatchedPos = 7;
         }
         break;
      case 108:
         if ((active2 & 131072L) != 0L)
         {
            mccmatchedKind = 145;
            mccmatchedPos = 7;
         }
         else if ((active3 & 4096L) != 0L)
         {
            mccmatchedKind = 204;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 274945015808L, active3, 0L);
      case 109:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 35184372088832L, active3, 802816L);
      case 110:
         if ((active0 & 274877906944L) != 0L)
         {
            mccmatchedKind = 38;
            mccmatchedPos = 7;
         }
         else if ((active2 & 64L) != 0L)
         {
            mccmatchedKind = 134;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 2097152L, active3, 0L);
      case 111:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 137438953472L, active3, 8589934592L);
      case 114:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 4398184923136L, active3, 8192L);
      case 116:
         if ((active2 & 128L) != 0L)
         {
            mccmatchedKind = 135;
            mccmatchedPos = 7;
         }
         else if ((active2 & 1024L) != 0L)
         {
            mccmatchedKind = 138;
            mccmatchedPos = 7;
         }
         else if ((active2 & 524288L) != 0L)
         {
            mccmatchedKind = 147;
            mccmatchedPos = 7;
         }
         else if ((active3 & 2048L) != 0L)
         {
            mccmatchedKind = 203;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 8623489024L, active3, 131072L);
      case 121:
         if ((active2 & 256L) != 0L)
         {
            mccmatchedKind = 136;
            mccmatchedPos = 7;
         }
         else if ((active2 & 8192L) != 0L)
         {
            mccmatchedKind = 141;
            mccmatchedPos = 7;
         }
         else if ((active2 & 32768L) != 0L)
         {
            mccmatchedKind = 143;
            mccmatchedPos = 7;
         }
         else if ((active2 & 262144L) != 0L)
         {
            mccmatchedKind = 146;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 8796093022208L, active3, 0L);
      case 122:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active2, 0L, active3, 4194304L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 7);
}
private int mccMoveStringLiteralDfa8_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 7);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 7);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 4194304L);
      case 68:
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 2147483648L);
      case 69:
         if ((active2 & 4194304L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 8;
         }
         else if ((active2 & 33554432L) != 0L)
         {
            mccmatchedKind = 153;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active2, 4831838208L, active3, 0L);
      case 72:
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 32768L);
      case 73:
         return mccMoveStringLiteralDfa9_0(active2, 283467841536L, active3, 196608L);
      case 76:
         return mccMoveStringLiteralDfa9_0(active2, 87963077705728L, active3, 2097152L);
      case 77:
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 786432L);
      case 78:
         return mccMoveStringLiteralDfa9_0(active2, 138512695296L, active3, 8589934592L);
      case 79:
         return mccMoveStringLiteralDfa9_0(active2, 140737505132544L, active3, 1048576L);
      case 80:
         if ((active3 & 16384L) != 0L)
         {
            mccmatchedKind = 206;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active2, 35184372088832L, active3, 0L);
      case 82:
         if ((active2 & 8388608L) != 0L)
         {
            mccmatchedKind = 151;
            mccmatchedPos = 8;
         }
         break;
      case 83:
         return mccMoveStringLiteralDfa9_0(active2, 2199023255552L, active3, 0L);
      case 84:
         if ((active2 & 2097152L) != 0L)
         {
            mccmatchedKind = 149;
            mccmatchedPos = 8;
         }
         else if ((active2 & 268435456L) != 0L)
         {
            mccmatchedKind = 156;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 5368709120L);
      case 88:
         if ((active2 & 549755813888L) != 0L)
         {
            mccmatchedKind = 167;
            mccmatchedPos = 8;
         }
         break;
      case 89:
         if ((active2 & 67108864L) != 0L)
         {
            mccmatchedKind = 154;
            mccmatchedPos = 8;
         }
         else if ((active2 & 134217728L) != 0L)
         {
            mccmatchedKind = 155;
            mccmatchedPos = 8;
         }
         else if ((active3 & 8192L) != 0L)
         {
            mccmatchedKind = 205;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active2, 4398046511104L, active3, 0L);
      case 95:
         return mccMoveStringLiteralDfa9_0(active2, 8796093022208L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 4194304L);
      case 100:
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 2147483648L);
      case 101:
         if ((active2 & 4194304L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 8;
         }
         else if ((active2 & 33554432L) != 0L)
         {
            mccmatchedKind = 153;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active2, 4831838208L, active3, 0L);
      case 104:
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 32768L);
      case 105:
         return mccMoveStringLiteralDfa9_0(active2, 283467841536L, active3, 196608L);
      case 108:
         return mccMoveStringLiteralDfa9_0(active2, 87963077705728L, active3, 2097152L);
      case 109:
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 786432L);
      case 110:
         return mccMoveStringLiteralDfa9_0(active2, 138512695296L, active3, 8589934592L);
      case 111:
         return mccMoveStringLiteralDfa9_0(active2, 140737505132544L, active3, 1048576L);
      case 112:
         if ((active3 & 16384L) != 0L)
         {
            mccmatchedKind = 206;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active2, 35184372088832L, active3, 0L);
      case 114:
         if ((active2 & 8388608L) != 0L)
         {
            mccmatchedKind = 151;
            mccmatchedPos = 8;
         }
         break;
      case 115:
         return mccMoveStringLiteralDfa9_0(active2, 2199023255552L, active3, 0L);
      case 116:
         if ((active2 & 2097152L) != 0L)
         {
            mccmatchedKind = 149;
            mccmatchedPos = 8;
         }
         else if ((active2 & 268435456L) != 0L)
         {
            mccmatchedKind = 156;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active2, 0L, active3, 5368709120L);
      case 120:
         if ((active2 & 549755813888L) != 0L)
         {
            mccmatchedKind = 167;
            mccmatchedPos = 8;
         }
         break;
      case 121:
         if ((active2 & 67108864L) != 0L)
         {
            mccmatchedKind = 154;
            mccmatchedPos = 8;
         }
         else if ((active2 & 134217728L) != 0L)
         {
            mccmatchedKind = 155;
            mccmatchedPos = 8;
         }
         else if ((active3 & 8192L) != 0L)
         {
            mccmatchedKind = 205;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active2, 4398046511104L, active3, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 8);
}
private int mccMoveStringLiteralDfa9_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 8);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 8);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 2147516416L);
      case 66:
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 4194304L);
      case 69:
         if ((active2 & 2147483648L) != 0L)
         {
            mccmatchedKind = 159;
            mccmatchedPos = 9;
         }
         else if ((active2 & 137438953472L) != 0L)
         {
            mccmatchedKind = 165;
            mccmatchedPos = 9;
         }
         else if ((active3 & 8589934592L) != 0L)
         {
            mccmatchedKind = 225;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 2097152L);
      case 70:
         if ((active2 & 16777216L) != 0L)
         {
            mccmatchedKind = 152;
            mccmatchedPos = 9;
         }
         break;
      case 73:
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 5369495552L);
      case 77:
         return mccMoveStringLiteralDfa10_0(active2, 140737488355328L, active3, 1048576L);
      case 78:
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 65536L);
      case 79:
         return mccMoveStringLiteralDfa10_0(active2, 35184372088832L, active3, 131072L);
      case 83:
         if ((active2 & 536870912L) != 0L)
         {
            mccmatchedKind = 157;
            mccmatchedPos = 9;
         }
         else if ((active2 & 4294967296L) != 0L)
         {
            mccmatchedKind = 160;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 9070970929152L, active3, 0L);
      case 84:
         if ((active2 & 1073741824L) != 0L)
         {
            mccmatchedKind = 158;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 2199023255552L, active3, 0L);
      case 86:
         return mccMoveStringLiteralDfa10_0(active2, 8589934592L, active3, 0L);
      case 95:
         return mccMoveStringLiteralDfa10_0(active2, 92358976733184L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 2147516416L);
      case 98:
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 4194304L);
      case 101:
         if ((active2 & 2147483648L) != 0L)
         {
            mccmatchedKind = 159;
            mccmatchedPos = 9;
         }
         else if ((active2 & 137438953472L) != 0L)
         {
            mccmatchedKind = 165;
            mccmatchedPos = 9;
         }
         else if ((active3 & 8589934592L) != 0L)
         {
            mccmatchedKind = 225;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 2097152L);
      case 102:
         if ((active2 & 16777216L) != 0L)
         {
            mccmatchedKind = 152;
            mccmatchedPos = 9;
         }
         break;
      case 105:
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 5369495552L);
      case 109:
         return mccMoveStringLiteralDfa10_0(active2, 140737488355328L, active3, 1048576L);
      case 110:
         return mccMoveStringLiteralDfa10_0(active2, 0L, active3, 65536L);
      case 111:
         return mccMoveStringLiteralDfa10_0(active2, 35184372088832L, active3, 131072L);
      case 115:
         if ((active2 & 536870912L) != 0L)
         {
            mccmatchedKind = 157;
            mccmatchedPos = 9;
         }
         else if ((active2 & 4294967296L) != 0L)
         {
            mccmatchedKind = 160;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 9070970929152L, active3, 0L);
      case 116:
         if ((active2 & 1073741824L) != 0L)
         {
            mccmatchedKind = 158;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 2199023255552L, active3, 0L);
      case 118:
         return mccMoveStringLiteralDfa10_0(active2, 8589934592L, active3, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 9);
}
private int mccMoveStringLiteralDfa10_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 9);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 9);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 2097152L);
      case 65:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 65536L);
      case 68:
         return mccMoveStringLiteralDfa11_0(active2, 70368744177664L, active3, 0L);
      case 69:
         if ((active2 & 8589934592L) != 0L)
         {
            mccmatchedKind = 161;
            mccmatchedPos = 10;
         }
         break;
      case 76:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 4194304L);
      case 77:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 5369757696L);
      case 78:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 131072L);
      case 80:
         return mccMoveStringLiteralDfa11_0(active2, 140737488355328L, active3, 0L);
      case 82:
         if ((active3 & 32768L) != 0L)
         {
            mccmatchedKind = 207;
            mccmatchedPos = 10;
         }
         return mccMoveStringLiteralDfa11_0(active2, 2199023255552L, active3, 0L);
      case 83:
         return mccMoveStringLiteralDfa11_0(active2, 57174604644352L, active3, 0L);
      case 84:
         if ((active2 & 274877906944L) != 0L)
         {
            mccmatchedKind = 166;
            mccmatchedPos = 10;
         }
         else if ((active3 & 262144L) != 0L)
         {
            mccmatchedKind = 210;
            mccmatchedPos = 10;
         }
         return mccMoveStringLiteralDfa11_0(active2, 8796093022208L, active3, 2148007936L);
      case 97:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 65536L);
      case 100:
         return mccMoveStringLiteralDfa11_0(active2, 70368744177664L, active3, 0L);
      case 101:
         if ((active2 & 8589934592L) != 0L)
         {
            mccmatchedKind = 161;
            mccmatchedPos = 10;
         }
         break;
      case 108:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 4194304L);
      case 109:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 5369757696L);
      case 110:
         return mccMoveStringLiteralDfa11_0(active2, 0L, active3, 131072L);
      case 112:
         return mccMoveStringLiteralDfa11_0(active2, 140737488355328L, active3, 0L);
      case 114:
         if ((active3 & 32768L) != 0L)
         {
            mccmatchedKind = 207;
            mccmatchedPos = 10;
         }
         return mccMoveStringLiteralDfa11_0(active2, 2199023255552L, active3, 0L);
      case 115:
         return mccMoveStringLiteralDfa11_0(active2, 57174604644352L, active3, 0L);
      case 116:
         if ((active2 & 274877906944L) != 0L)
         {
            mccmatchedKind = 166;
            mccmatchedPos = 10;
         }
         else if ((active3 & 262144L) != 0L)
         {
            mccmatchedKind = 210;
            mccmatchedPos = 10;
         }
         return mccMoveStringLiteralDfa11_0(active2, 8796093022208L, active3, 2148007936L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 10);
}
private int mccMoveStringLiteralDfa11_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 10);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 10);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa12_0(active2, 0L, active3, 131072L);
      case 69:
         if ((active3 & 4194304L) != 0L)
         {
            mccmatchedKind = 214;
            mccmatchedPos = 11;
         }
         else if ((active3 & 1073741824L) != 0L)
         {
            mccmatchedKind = 222;
            mccmatchedPos = 11;
         }
         else if ((active3 & 2147483648L) != 0L)
         {
            mccmatchedKind = 223;
            mccmatchedPos = 11;
         }
         return mccMoveStringLiteralDfa12_0(active2, 72567767433216L, active3, 4294967296L);
      case 73:
         return mccMoveStringLiteralDfa12_0(active2, 35184372088832L, active3, 1048576L);
      case 79:
         return mccMoveStringLiteralDfa12_0(active2, 140737488355328L, active3, 0L);
      case 82:
         return mccMoveStringLiteralDfa12_0(active2, 8796093022208L, active3, 2162688L);
      case 84:
         return mccMoveStringLiteralDfa12_0(active2, 21990232555520L, active3, 524288L);
      case 101:
         if ((active3 & 4194304L) != 0L)
         {
            mccmatchedKind = 214;
            mccmatchedPos = 11;
         }
         else if ((active3 & 1073741824L) != 0L)
         {
            mccmatchedKind = 222;
            mccmatchedPos = 11;
         }
         else if ((active3 & 2147483648L) != 0L)
         {
            mccmatchedKind = 223;
            mccmatchedPos = 11;
         }
         return mccMoveStringLiteralDfa12_0(active2, 72567767433216L, active3, 4294967296L);
      case 105:
         return mccMoveStringLiteralDfa12_0(active2, 35184372088832L, active3, 1048576L);
      case 111:
         return mccMoveStringLiteralDfa12_0(active2, 140737488355328L, active3, 0L);
      case 114:
         return mccMoveStringLiteralDfa12_0(active2, 8796093022208L, active3, 2162688L);
      case 116:
         return mccMoveStringLiteralDfa12_0(active2, 21990232555520L, active3, 524288L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 11);
}
private int mccMoveStringLiteralDfa12_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 11);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 11);
   }
   switch((int)curChar) {
      case 67:
         return mccMoveStringLiteralDfa13_0(active2, 70368744177664L, active3, 0L);
      case 69:
         return mccMoveStringLiteralDfa13_0(active2, 8796093022208L, active3, 2621440L);
      case 73:
         return mccMoveStringLiteralDfa13_0(active2, 0L, active3, 131072L);
      case 78:
         return mccMoveStringLiteralDfa13_0(active2, 2199023255552L, active3, 0L);
      case 82:
         return mccMoveStringLiteralDfa13_0(active2, 21990232555520L, active3, 0L);
      case 83:
         return mccMoveStringLiteralDfa13_0(active2, 140737488355328L, active3, 4294967296L);
      case 84:
         return mccMoveStringLiteralDfa13_0(active2, 35184372088832L, active3, 1048576L);
      case 89:
         if ((active3 & 65536L) != 0L)
         {
            mccmatchedKind = 208;
            mccmatchedPos = 12;
         }
         break;
      case 99:
         return mccMoveStringLiteralDfa13_0(active2, 70368744177664L, active3, 0L);
      case 101:
         return mccMoveStringLiteralDfa13_0(active2, 8796093022208L, active3, 2621440L);
      case 105:
         return mccMoveStringLiteralDfa13_0(active2, 0L, active3, 131072L);
      case 110:
         return mccMoveStringLiteralDfa13_0(active2, 2199023255552L, active3, 0L);
      case 114:
         return mccMoveStringLiteralDfa13_0(active2, 21990232555520L, active3, 0L);
      case 115:
         return mccMoveStringLiteralDfa13_0(active2, 140737488355328L, active3, 4294967296L);
      case 116:
         return mccMoveStringLiteralDfa13_0(active2, 35184372088832L, active3, 1048576L);
      case 121:
         if ((active3 & 65536L) != 0L)
         {
            mccmatchedKind = 208;
            mccmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 12);
}
private int mccMoveStringLiteralDfa13_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 12);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 12);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa14_0(active2, 0L, active3, 2097152L);
      case 68:
         if ((active3 & 524288L) != 0L)
         {
            mccmatchedKind = 211;
            mccmatchedPos = 13;
         }
         break;
      case 69:
         return mccMoveStringLiteralDfa14_0(active2, 21990232555520L, active3, 0L);
      case 71:
         return mccMoveStringLiteralDfa14_0(active2, 2199023255552L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa14_0(active2, 175921860444160L, active3, 0L);
      case 78:
         return mccMoveStringLiteralDfa14_0(active2, 8796093022208L, active3, 0L);
      case 79:
         return mccMoveStringLiteralDfa14_0(active2, 70368744177664L, active3, 0L);
      case 83:
         return mccMoveStringLiteralDfa14_0(active2, 0L, active3, 131072L);
      case 84:
         return mccMoveStringLiteralDfa14_0(active2, 0L, active3, 4296015872L);
      case 97:
         return mccMoveStringLiteralDfa14_0(active2, 0L, active3, 2097152L);
      case 100:
         if ((active3 & 524288L) != 0L)
         {
            mccmatchedKind = 211;
            mccmatchedPos = 13;
         }
         break;
      case 101:
         return mccMoveStringLiteralDfa14_0(active2, 21990232555520L, active3, 0L);
      case 103:
         return mccMoveStringLiteralDfa14_0(active2, 2199023255552L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa14_0(active2, 175921860444160L, active3, 0L);
      case 110:
         return mccMoveStringLiteralDfa14_0(active2, 8796093022208L, active3, 0L);
      case 111:
         return mccMoveStringLiteralDfa14_0(active2, 70368744177664L, active3, 0L);
      case 115:
         return mccMoveStringLiteralDfa14_0(active2, 0L, active3, 131072L);
      case 116:
         return mccMoveStringLiteralDfa14_0(active2, 0L, active3, 4296015872L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 13);
}
private int mccMoveStringLiteralDfa14_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 13);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 13);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa15_0(active2, 0L, active3, 4294967296L);
      case 68:
         if ((active3 & 2097152L) != 0L)
         {
            mccmatchedKind = 213;
            mccmatchedPos = 14;
         }
         break;
      case 69:
         return mccMoveStringLiteralDfa15_0(active2, 0L, active3, 1048576L);
      case 71:
         return mccMoveStringLiteralDfa15_0(active2, 8796093022208L, active3, 0L);
      case 77:
         return mccMoveStringLiteralDfa15_0(active2, 70368744177664L, active3, 0L);
      case 78:
         return mccMoveStringLiteralDfa15_0(active2, 21990232555520L, active3, 0L);
      case 79:
         return mccMoveStringLiteralDfa15_0(active2, 35184372088832L, active3, 131072L);
      case 84:
         return mccMoveStringLiteralDfa15_0(active2, 142936511610880L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa15_0(active2, 0L, active3, 4294967296L);
      case 100:
         if ((active3 & 2097152L) != 0L)
         {
            mccmatchedKind = 213;
            mccmatchedPos = 14;
         }
         break;
      case 101:
         return mccMoveStringLiteralDfa15_0(active2, 0L, active3, 1048576L);
      case 103:
         return mccMoveStringLiteralDfa15_0(active2, 8796093022208L, active3, 0L);
      case 109:
         return mccMoveStringLiteralDfa15_0(active2, 70368744177664L, active3, 0L);
      case 110:
         return mccMoveStringLiteralDfa15_0(active2, 21990232555520L, active3, 0L);
      case 111:
         return mccMoveStringLiteralDfa15_0(active2, 35184372088832L, active3, 131072L);
      case 116:
         return mccMoveStringLiteralDfa15_0(active2, 142936511610880L, active3, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 14);
}
private int mccMoveStringLiteralDfa15_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 14);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 14);
   }
   switch((int)curChar) {
      case 68:
         if ((active3 & 1048576L) != 0L)
         {
            mccmatchedKind = 212;
            mccmatchedPos = 15;
         }
         break;
      case 71:
         return mccMoveStringLiteralDfa16_0(active2, 21990232555520L, active3, 0L);
      case 72:
         if ((active2 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 169;
            mccmatchedPos = 15;
         }
         break;
      case 73:
         return mccMoveStringLiteralDfa16_0(active2, 140737488355328L, active3, 0L);
      case 76:
         return mccMoveStringLiteralDfa16_0(active2, 0L, active3, 131072L);
      case 77:
         return mccMoveStringLiteralDfa16_0(active2, 0L, active3, 4294967296L);
      case 78:
         if ((active2 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 173;
            mccmatchedPos = 15;
         }
         break;
      case 80:
         return mccMoveStringLiteralDfa16_0(active2, 70368744177664L, active3, 0L);
      case 84:
         return mccMoveStringLiteralDfa16_0(active2, 8796093022208L, active3, 0L);
      case 100:
         if ((active3 & 1048576L) != 0L)
         {
            mccmatchedKind = 212;
            mccmatchedPos = 15;
         }
         break;
      case 103:
         return mccMoveStringLiteralDfa16_0(active2, 21990232555520L, active3, 0L);
      case 104:
         if ((active2 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 169;
            mccmatchedPos = 15;
         }
         break;
      case 105:
         return mccMoveStringLiteralDfa16_0(active2, 140737488355328L, active3, 0L);
      case 108:
         return mccMoveStringLiteralDfa16_0(active2, 0L, active3, 131072L);
      case 109:
         return mccMoveStringLiteralDfa16_0(active2, 0L, active3, 4294967296L);
      case 110:
         if ((active2 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 173;
            mccmatchedPos = 15;
         }
         break;
      case 112:
         return mccMoveStringLiteralDfa16_0(active2, 70368744177664L, active3, 0L);
      case 116:
         return mccMoveStringLiteralDfa16_0(active2, 8796093022208L, active3, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 15);
}
private int mccMoveStringLiteralDfa16_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 15);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 15);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa17_0(active2, 0L, active3, 131072L);
      case 72:
         if ((active2 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 171;
            mccmatchedPos = 16;
         }
         break;
      case 79:
         return mccMoveStringLiteralDfa17_0(active2, 211106232532992L, active3, 0L);
      case 80:
         if ((active3 & 4294967296L) != 0L)
         {
            mccmatchedKind = 224;
            mccmatchedPos = 16;
         }
         break;
      case 84:
         return mccMoveStringLiteralDfa17_0(active2, 21990232555520L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa17_0(active2, 0L, active3, 131072L);
      case 104:
         if ((active2 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 171;
            mccmatchedPos = 16;
         }
         break;
      case 111:
         return mccMoveStringLiteralDfa17_0(active2, 211106232532992L, active3, 0L);
      case 112:
         if ((active3 & 4294967296L) != 0L)
         {
            mccmatchedKind = 224;
            mccmatchedPos = 16;
         }
         break;
      case 116:
         return mccMoveStringLiteralDfa17_0(active2, 21990232555520L, active3, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 16);
}
private int mccMoveStringLiteralDfa17_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 16);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 16);
   }
   switch((int)curChar) {
      case 72:
         if ((active2 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 170;
            mccmatchedPos = 17;
         }
         else if ((active2 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 172;
            mccmatchedPos = 17;
         }
         break;
      case 78:
         if ((active2 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 175;
            mccmatchedPos = 17;
         }
         break;
      case 83:
         return mccMoveStringLiteralDfa18_0(active2, 70368744177664L, active3, 0L);
      case 84:
         return mccMoveStringLiteralDfa18_0(active2, 0L, active3, 131072L);
      case 104:
         if ((active2 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 170;
            mccmatchedPos = 17;
         }
         else if ((active2 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 172;
            mccmatchedPos = 17;
         }
         break;
      case 110:
         if ((active2 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 175;
            mccmatchedPos = 17;
         }
         break;
      case 115:
         return mccMoveStringLiteralDfa18_0(active2, 70368744177664L, active3, 0L);
      case 116:
         return mccMoveStringLiteralDfa18_0(active2, 0L, active3, 131072L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 17);
}
private int mccMoveStringLiteralDfa18_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 17);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 17);
   }
   switch((int)curChar) {
      case 73:
         return mccMoveStringLiteralDfa19_0(active2, 70368744177664L, active3, 131072L);
      case 105:
         return mccMoveStringLiteralDfa19_0(active2, 70368744177664L, active3, 131072L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 18);
}
private int mccMoveStringLiteralDfa19_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 18);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 18);
   }
   switch((int)curChar) {
      case 79:
         return mccMoveStringLiteralDfa20_0(active2, 0L, active3, 131072L);
      case 84:
         return mccMoveStringLiteralDfa20_0(active2, 70368744177664L, active3, 0L);
      case 111:
         return mccMoveStringLiteralDfa20_0(active2, 0L, active3, 131072L);
      case 116:
         return mccMoveStringLiteralDfa20_0(active2, 70368744177664L, active3, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 19);
}
private int mccMoveStringLiteralDfa20_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 19);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 19);
   }
   switch((int)curChar) {
      case 73:
         return mccMoveStringLiteralDfa21_0(active2, 70368744177664L, active3, 0L);
      case 78:
         return mccMoveStringLiteralDfa21_0(active2, 0L, active3, 131072L);
      case 105:
         return mccMoveStringLiteralDfa21_0(active2, 70368744177664L, active3, 0L);
      case 110:
         return mccMoveStringLiteralDfa21_0(active2, 0L, active3, 131072L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 20);
}
private int mccMoveStringLiteralDfa21_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 20);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 20);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa22_0(active2, 0L, active3, 131072L);
      case 79:
         return mccMoveStringLiteralDfa22_0(active2, 70368744177664L, active3, 0L);
      case 111:
         return mccMoveStringLiteralDfa22_0(active2, 70368744177664L, active3, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 21);
}
private int mccMoveStringLiteralDfa22_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 21);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 21);
   }
   switch((int)curChar) {
      case 76:
         return mccMoveStringLiteralDfa23_0(active2, 0L, active3, 131072L);
      case 78:
         if ((active2 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 174;
            mccmatchedPos = 22;
         }
         break;
      case 108:
         return mccMoveStringLiteralDfa23_0(active2, 0L, active3, 131072L);
      case 110:
         if ((active2 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 174;
            mccmatchedPos = 22;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 22);
}
private int mccMoveStringLiteralDfa23_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 22);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 22);
   }
   switch((int)curChar) {
      case 69:
         return mccMoveStringLiteralDfa24_0(active3, 131072L);
      case 101:
         return mccMoveStringLiteralDfa24_0(active3, 131072L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 23);
}
private int mccMoveStringLiteralDfa24_0(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 23);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 23);
   }
   switch((int)curChar) {
      case 86:
         return mccMoveStringLiteralDfa25_0(active3, 131072L);
      case 118:
         return mccMoveStringLiteralDfa25_0(active3, 131072L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 24);
}
private int mccMoveStringLiteralDfa25_0(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 24);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 24);
   }
   switch((int)curChar) {
      case 69:
         return mccMoveStringLiteralDfa26_0(active3, 131072L);
      case 101:
         return mccMoveStringLiteralDfa26_0(active3, 131072L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 25);
}
private int mccMoveStringLiteralDfa26_0(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 25);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 25);
   }
   switch((int)curChar) {
      case 76:
         if ((active3 & 131072L) != 0L)
         {
            mccmatchedKind = 209;
            mccmatchedPos = 26;
         }
         break;
      case 108:
         if ((active3 & 131072L) != 0L)
         {
            mccmatchedKind = 209;
            mccmatchedPos = 26;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 26);
}
private void mccCheckNAdd(int state)
{
   if (mccrounds[state] != mccround)
   {
      mccstateSet[mccnewStateCnt++] = state;
      mccrounds[state] = mccround;
   }
}
private void mccAddStates(int start, int end)
{
   do {
      mccstateSet[mccnewStateCnt++] = mccnextStates[start];
   } while (start++ != end);
}
private void mccCheckNAddTwoStates(int state1, int state2)
{
   mccCheckNAdd(state1);
   mccCheckNAdd(state2);
}
private void mccCheckNAddStates(int start, int end)
{
   do {
      mccCheckNAdd(mccnextStates[start]);
   } while (start++ != end);
}
private void mccCheckNAddStates(int start)
{
   mccCheckNAdd(mccnextStates[start]);
   mccCheckNAdd(mccnextStates[start + 1]);
}
static readonly long[] mccbitVec0 = {
   -2, -1L, -1L, -1L
};
static readonly long[] mccbitVec1 = {
   -1L, -1L, -1L, -1L
};
static readonly long[] mccbitVec2 = {
   0L, 0L, -1L, -1L
};
private int mccMoveNfa_0(int startState, int curPos)
{
   int strKind = mccmatchedKind;
   int strPos = mccmatchedPos;
   int seenUpto = curPos + 1;
   input_stream.Backup(seenUpto);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { throw new Exception("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 90;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 5:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 232)
                        kind = 232;
                     mccCheckNAddStates(0, 2);
                  }
                  else if (curChar == 34)
                     mccCheckNAddStates(3, 8);
                  else if (curChar == 58)
                     mccstateSet[mccnewStateCnt++] = 54;
                  else if (curChar == 39)
                     mccCheckNAddStates(9, 12);
                  else if (curChar == 46)
                     mccCheckNAdd(42);
                  else if (curChar == 60)
                     mccstateSet[mccnewStateCnt++] = 14;
                  else if (curChar == 33)
                     mccstateSet[mccnewStateCnt++] = 12;
                  else if (curChar == 45)
                     mccstateSet[mccnewStateCnt++] = 6;
                  else if (curChar == 47)
                     mccstateSet[mccnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 47)
                     mccCheckNAddStates(13, 15);
                  break;
               case 1:
                  if ((-9217 & l) != 0L)
                     mccCheckNAddStates(13, 15);
                  break;
               case 2:
                  if ((9216 & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 45)
                     mccCheckNAddStates(16, 18);
                  break;
               case 7:
                  if ((-9217 & l) != 0L)
                     mccCheckNAddStates(16, 18);
                  break;
               case 8:
                  if ((9216 & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 9:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     mccstateSet[mccnewStateCnt++] = 6;
                  break;
               case 12:
                  if (curChar == 61 && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if (curChar == 33)
                     mccstateSet[mccnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 62 && kind > 14)
                     kind = 14;
                  break;
               case 15:
                  if (curChar == 60)
                     mccstateSet[mccnewStateCnt++] = 14;
                  break;
               case 24:
                  if (curChar == 47)
                     mccCheckNAddStates(19, 21);
                  break;
               case 25:
                  if ((-140737488364545 & l) != 0L)
                     mccCheckNAddStates(19, 21);
                  break;
               case 27:
                  if (curChar != 47)
                     break;
                  if (kind > 23)
                     kind = 23;
                  mccstateSet[mccnewStateCnt++] = 28;
                  break;
               case 29:
                  if (curChar == 32)
                     mccstateSet[mccnewStateCnt++] = 24;
                  break;
               case 35:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  mccCheckNAddStates(0, 2);
                  break;
               case 36:
                  if (curChar == 46)
                     mccCheckNAdd(37);
                  break;
               case 37:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  mccCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(40);
                  break;
               case 40:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  mccCheckNAdd(40);
                  break;
               case 41:
                  if (curChar == 46)
                     mccCheckNAdd(42);
                  break;
               case 42:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  mccCheckNAddTwoStates(42, 38);
                  break;
               case 43:
               case 44:
                  if (curChar == 39)
                     mccCheckNAddStates(9, 12);
                  break;
               case 45:
                  if (curChar == 39)
                     mccstateSet[mccnewStateCnt++] = 44;
                  break;
               case 47:
                  if ((687194767360 & l) != 0L)
                     mccCheckNAddStates(9, 12);
                  break;
               case 48:
                  if ((-549755813889 & l) != 0L)
                     mccCheckNAddStates(9, 12);
                  break;
               case 49:
                  if (curChar == 39 && kind > 233)
                     kind = 233;
                  break;
               case 52:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 242)
                     kind = 242;
                  mccstateSet[mccnewStateCnt++] = 52;
                  break;
               case 53:
                  if (curChar == 58)
                     mccstateSet[mccnewStateCnt++] = 54;
                  break;
               case 55:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 245)
                     kind = 245;
                  mccstateSet[mccnewStateCnt++] = 55;
                  break;
               case 56:
                  if (curChar == 34)
                     mccCheckNAddStates(3, 8);
                  break;
               case 57:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 34 && kind > 234)
                     kind = 234;
                  break;
               case 59:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar != 34)
                     break;
                  if (kind > 237)
                     kind = 237;
                  mccstateSet[mccnewStateCnt++] = 61;
                  break;
               case 61:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 62;
                  break;
               case 62:
                  if (curChar == 34)
                     mccCheckNAddTwoStates(63, 60);
                  break;
               case 63:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(63, 60);
                  break;
               case 64:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 34)
                     mccAddStates(22, 23);
                  break;
               case 66:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 67;
                  break;
               case 67:
                  if (curChar == 34)
                     mccCheckNAddTwoStates(68, 65);
                  break;
               case 68:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(68, 65);
                  break;
               case 69:
                  if (curChar == 42 && kind > 241)
                     kind = 241;
                  break;
               case 70:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 69;
                  break;
               case 72:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  mccstateSet[mccnewStateCnt++] = 72;
                  break;
               case 73:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  mccCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 75;
                  break;
               case 76:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  mccCheckNAddTwoStates(74, 76);
                  break;
               case 77:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(24, 26);
                  break;
               case 78:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 79;
                  break;
               case 80:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(27, 29);
                  break;
               case 83:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 239)
                     kind = 239;
                  mccstateSet[mccnewStateCnt++] = 83;
                  break;
               case 84:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(30, 32);
                  break;
               case 85:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 86;
                  break;
               case 87:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(33, 35);
                  break;
               case 88:
                  if (curChar == 42 && kind > 240)
                     kind = 240;
                  break;
               case 89:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 88;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 5:
                  if ((576460745995190270 & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     mccCheckNAddStates(36, 45);
                  }
                  else if (curChar == 64)
                     mccstateSet[mccnewStateCnt++] = 51;
                  if ((1125899907104768 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 33;
                  else if ((274877907008 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 22;
                  else if ((4503599628419072 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 18;
                  break;
               case 1:
                  mccAddStates(13, 15);
                  break;
               case 7:
                  mccAddStates(16, 18);
                  break;
               case 16:
                  if ((137438953504 & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 17:
                  if ((9007199256838144 & l) != 0L)
                     mccCheckNAdd(16);
                  break;
               case 18:
                  if ((1125899907104768 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((4503599628419072 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((2251799814209536 & l) != 0L)
                     mccCheckNAdd(16);
                  break;
               case 21:
                  if ((17592186048512 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((8589934594 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((274877907008 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 22;
                  break;
               case 25:
                  mccAddStates(19, 21);
                  break;
               case 26:
                  if (curChar == 92)
                     mccstateSet[mccnewStateCnt++] = 24;
                  break;
               case 28:
                  if ((2289183209562624 & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  mccstateSet[mccnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((72057594054705152 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((137438953504 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((549755814016 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((137438953504 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((1125899907104768 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 33;
                  break;
               case 38:
                  if (curChar == 69)
                     mccAddStates(46, 47);
                  break;
               case 46:
                  if (curChar == 92)
                     mccstateSet[mccnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((576460746129408000 & l) != 0L)
                     mccCheckNAddStates(9, 12);
                  break;
               case 48:
                  if ((-268435457 & l) != 0L)
                     mccCheckNAddStates(9, 12);
                  break;
               case 50:
                  if (curChar == 64)
                     mccstateSet[mccnewStateCnt++] = 51;
                  break;
               case 51:
               case 52:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 242)
                     kind = 242;
                  mccCheckNAdd(52);
                  break;
               case 54:
               case 55:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 245)
                     kind = 245;
                  mccCheckNAdd(55);
                  break;
               case 57:
                  mccAddStates(48, 49);
                  break;
               case 59:
                  mccCheckNAddTwoStates(59, 60);
                  break;
               case 63:
                  mccCheckNAddTwoStates(63, 60);
                  break;
               case 64:
                  mccCheckNAddTwoStates(64, 65);
                  break;
               case 68:
                  mccCheckNAddTwoStates(68, 65);
                  break;
               case 71:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  mccCheckNAddStates(36, 45);
                  break;
               case 72:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  mccCheckNAdd(72);
                  break;
               case 73:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  mccCheckNAddTwoStates(73, 74);
                  break;
               case 75:
               case 76:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  mccCheckNAddTwoStates(74, 76);
                  break;
               case 77:
                  if ((576460745995190270 & l) != 0L)
                     mccCheckNAddStates(24, 26);
                  break;
               case 79:
               case 80:
                  if ((576460745995190270 & l) != 0L)
                     mccCheckNAddStates(27, 29);
                  break;
               case 81:
                  if (curChar == 93 && kind > 238)
                     kind = 238;
                  break;
               case 82:
                  if (curChar == 91)
                     mccstateSet[mccnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 239)
                     kind = 239;
                  mccCheckNAdd(83);
                  break;
               case 84:
                  if ((576460745995190270 & l) != 0L)
                     mccCheckNAddStates(30, 32);
                  break;
               case 86:
               case 87:
                  if ((576460745995190270 & l) != 0L)
                     mccCheckNAddStates(33, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 63);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 1:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(13, 15);
                  break;
               case 7:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(16, 18);
                  break;
               case 25:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(19, 21);
                  break;
               case 48:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(9, 12);
                  break;
               case 57:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(48, 49);
                  break;
               case 59:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccCheckNAddTwoStates(59, 60);
                  break;
               case 63:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccCheckNAddTwoStates(63, 60);
                  break;
               case 64:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccCheckNAddTwoStates(64, 65);
                  break;
               case 68:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccCheckNAddTwoStates(68, 65);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 90 - (mccnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { break; }
   }
   if (mccmatchedPos > strPos)
      return curPos;

   int toRet = Math.Max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.Min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.ReadChar(); }
         catch(System.IO.IOException) { throw new Exception("Internal Error : Please send a bug report."); }

   if (mccmatchedPos < strPos)
   {
      mccmatchedKind = strKind;
      mccmatchedPos = strPos;
   }
   else if (mccmatchedPos == strPos && mccmatchedKind > strKind)
      mccmatchedKind = strKind;

   return toRet;
}
static readonly int[] mccnextStates = {
   35, 36, 38, 57, 58, 59, 60, 64, 65, 45, 46, 48, 49, 1, 2, 4, 
   7, 8, 10, 25, 26, 27, 66, 70, 77, 78, 82, 78, 80, 82, 84, 85, 
   89, 85, 87, 89, 72, 73, 74, 77, 78, 82, 83, 84, 85, 89, 39, 40, 
   57, 58, 
};
private static bool mccCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((mccbitVec2[i2] & l2) != 0L);
      default : 
         if ((mccbitVec0[i1] & l1) != 0L)
            if ((mccbitVec1[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
public static readonly string[] mccstrLiteralImages = {
"", null, null, null, null, null, null, "*", "=", "==", ">", "<", ">=", "<=", 
null, "/", "+", "-", "||", "%", ";", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "?", "@", null, null, null, "(", ")", ",", };
public static readonly string[] lexStateNames = {
   "DEFAULT", 
};
static readonly long[] mcctoToken = {
   -127, -1, -1, 522417556774977535, 
};
static readonly long[] mcctoSkip = {
   126, 0, 0, 0, 
};
protected SimpleCharStream input_stream;
private readonly int[] mccrounds = new int[90];
private readonly int[] mccstateSet = new int[180];
protected char curChar;
public SQLTokenManager(SimpleCharStream stream) {
   if (SimpleCharStream.staticFlag)
      throw new System.SystemException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SQLTokenManager(SimpleCharStream stream, int lexState)
   : this(stream) {
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream) {
   mccmatchedPos = mccnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   mccround = -2147483647;
   for (i = 90; i-- > 0;)
      mccrounds[i] = Int32.MinValue;
}
public void ReInit(SimpleCharStream stream, int lexState) {
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState) {
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.InvalidLexicalState);
   else
      curLexState = lexState;
}

protected Token mccFillToken()
{
   Token t = Token.NewToken(mccmatchedKind);
   t.kind = mccmatchedKind;
   string im = mccstrLiteralImages[mccmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.BeginLine;
   t.beginColumn = input_stream.BeginColumn;
   t.endLine = input_stream.EndLine;
   t.endColumn = input_stream.EndColumn;
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int mccnewStateCnt;
int mccround;
int mccmatchedPos;
int mccmatchedKind;

public Token GetNextToken() {
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

for (;;) {
   try {
      curChar = input_stream.BeginToken();
   } catch(System.IO.IOException) {
      mccmatchedKind = 0;
      matchedToken = mccFillToken();
      return matchedToken;
   }

   mccmatchedKind = Int32.MaxValue;
   mccmatchedPos = 0;
   curPos = mccMoveStringLiteralDfa0_0();
   if (mccmatchedKind != Int32.MaxValue) {
      if (mccmatchedPos + 1 < curPos)
         input_stream.Backup(curPos - mccmatchedPos - 1);
      if ((mcctoToken[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
         matchedToken = mccFillToken();
         return matchedToken;
      }
      else
      {
         goto EOFLoop;
      }
   }
   int error_line = input_stream.EndLine;
   int error_column = input_stream.EndColumn;
   string error_after = null;
   bool EOFSeen = false;
   try { input_stream.ReadChar(); input_stream.Backup(1); }
   catch (System.IO.IOException) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      } else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.Backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LexicalError);
EOFLoop: ;
  }
}

}
}
