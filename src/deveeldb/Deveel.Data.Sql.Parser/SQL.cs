/* Generated By:CSharpCC: Do not edit this line. SQL.cs */
namespace Deveel.Data.Sql {


using System;
using System.Collections;
using System.Collections.Generic;

using DbSystem;
using Functions;
using Sql;
using Text;
using Types;

internal class SQL : SQLConstants {

        // State variables for the parser,

        /// <summary>
        /// Set to true if the SQL identifiers are converted to upper case.
        /// </summary>
        private bool case_insensitive_identifiers = false;

        /// <summary>
        /// The parameter id.
        /// </summary>
        private int parameter_id = 0;
        private ParameterStyle parameterStyle = ParameterStyle.Marker;

        /// <summary>
        /// Resets the parameter id.
        /// </summary>
        /// <remarks>
        /// This MUST be called before a parser is used to parse a statement.
        /// </remarks>
        public void Reset() {
                parameter_id = 0;
        }

        /// <summary>
        /// Creates and returns a parameter substitution.
        /// </summary>
        /// <remarks>
        /// This is called when the parser comes across a <c>?</c> style object. This 
        /// object is used to mark an expression with a place mark that can be substituted 
        /// for a value later.
        /// </remarks>
        public ParameterSubstitution CreateSubstitution(String image) {
                ParameterSubstitution ps;
                if (image == null || image.Length == 0 || image.Equals("?")) {
                        ps = new ParameterSubstitution(parameter_id);
                        ++parameter_id;
                } else {
                        ps = new ParameterSubstitution(image);
                }
                return ps;
        }

        private VariableRef CreateVariableRef(string image) {
                return new VariableRef(image.Substring(1, image.Length - 1));
        }

        /// <summary>
        /// If the parser has been defined as case insensitive then this
        /// returns the uppercase version of the given string.
        /// </summary>
        /// <remarks>
        /// <b>Note</b>: This actually doesn't do anything because the case is now 
        /// resolved outside the parser.
        /// </remarks>
        public String CaseCheck(String identif) {
//		if (case_insensitive_identifiers)
//			return identif.ToUpper();
                return identif;
        }

  /**
   * Helper for expression parsing.
   * Called when an end parenthese has been found.
   */
        public void expEndParen(Expression exp, Stack stack) {
                Operator op = (Operator) stack.Pop();
                while (!op.StringRepresentation.Equals("(")) {
                        addOperatorToExpression(exp, op);
                        op = (Operator) stack.Pop();
                }
        }

  /**
   * Helper for expression parsing.
   * Called when an operator has been read in.  This needs to check precedence
   * and add the operator to the expression as appropriate.
   */
  public void expOperator(Expression exp, Stack stack, Operator op) {
    int precedence = op.Precedence;
    flushOperatorStack(exp, stack, precedence);
    stack.Push(op);
  }

  /**
   * Flush the operator stack until the stack is either empty or the top
   * element is either a "(" or of a precedence lower than the given
   * precedence.
   */
  public void flushOperatorStack(Expression exp, Stack stack, int precedence) {
    if (stack.Count > 0) {
      Operator top_op = (Operator) stack.Pop();
      while (!top_op.StringRepresentation.Equals("(") && top_op.Precedence >= precedence) {
        addOperatorToExpression(exp, top_op);
        if (stack.Count == 0) {
          return;
        }
        top_op = (Operator) stack.Pop();
      }
      stack.Push(top_op);
    }
  }

  /**
   * Helper for expression parsing.
   * Called when an entire expression has been read in.  We need to empty
   * the stack.
   */
  public void expEnd(Expression exp, Stack stack) {
    while (stack.Count > 0) {
      Operator op = (Operator) stack.Pop();
      addOperatorToExpression(exp, op);
    }
  }

  /**
   * Helper for expression parsing.
   * Adds an operator to the given expression.
   */
  public void addOperatorToExpression(Expression exp, Operator op) {
    if (op.StringRepresentation.Equals("not")) {
      exp.AddElement(null);
    }
    exp.AddOperator(op);
  }

// Parses a single expression.  Useed in 'com.mckoi.database.Expression.parse' method.
  public Expression ParseExpression() {
  Expression exp;
    exp = DoExpression();
    mcc_consume_token(0);
    {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public IList<StatementTree> StatementList() {
  List<StatementTree> list = new List<StatementTree>();
  StatementTree ob;
    ob = Statement();
                       list.Add(ob);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DROP:
      case SHOW:
      case ALTER:
      case SELECT:
      case UPDATE:
      case CREATE:
      case DELETE:
      case INSERT:
      case COMMIT:
      case COMPACT:
      case ROLLBACK:
      case DESCRIBE:
      case SHUTDOWN:
      case SET:
      case CALL:
      case NAME:
      case OPEN:
      case CLOSE:
      case GRANT:
      case FETCH:
      case CURSOR:
      case ACTION:
      case GROUPS:
      case REVOKE:
      case OPTION:
      case CSHARP:
      case ACCOUNT:
      case DECLARE:
      case PASSWORD:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case IDENTIFIER:
        ;
        break;
      default:
        mcc_la1[0] = mcc_gen;
        goto label_1;
      }
      ob = Statement();
                         list.Add(ob);
    }label_1: ;
    
    {return list.AsReadOnly();}
    throw new Exception("Missing return statement in function");
  }

// Statement that ends with a ';'
  public StatementTree Statement() {
  StatementTree ob;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SELECT:
      ob = Select();
      break;
    case UPDATE:
      ob = Update();
      break;
    case ALTER:
      ob = Alter();
      break;
    case COMPACT:
      ob = Compact();
      break;
    case CREATE:
      ob = Create();
      break;
    case DROP:
      ob = Drop();
      break;
    case DELETE:
      ob = Delete();
      break;
    case INSERT:
      ob = Insert();
      break;
    case DESCRIBE:
      ob = Describe();
      break;
    case SHOW:
      ob = Show();
      break;
    case CALL:
      ob = Call();
      break;
    case NAME:
    case CURSOR:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case DECLARE:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      ob = Declare();
      break;
    case FETCH:
      ob = Fetch();
      break;
    case OPEN:
      ob = Open();
      break;
    case CLOSE:
      ob = Close();
      break;
    case GRANT:
      ob = Grant();
      break;
    case REVOKE:
      ob = Revoke();
      break;
    case COMMIT:
      ob = Commit();
      break;
    case ROLLBACK:
      ob = Rollback();
      break;
    case SET:
      ob = Set();
      break;
    case SHUTDOWN:
      ob = ShutDown();
      break;
    default:
      mcc_la1[1] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 0:
      mcc_consume_token(0);
      break;
    case SEMICOLUMN:
      mcc_consume_token(SEMICOLUMN);
      break;
    default:
      mcc_la1[2] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

// All statements that start with <CREATE>
  public StatementTree Create() {
  StatementTree ob;
    mcc_consume_token(CREATE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case TABLE:
    case TEMPORARY:
      ob = CreateTable();
      break;
    case TRIGGER:
    case CALLBACK:
      ob = CreateTrigger();
      break;
    case FUNCTION:
      ob = CreateFunction();
      break;
    case INDEX:
    case UNIQUE:
      ob = CreateIndex();
      break;
    case SCHEMA:
      ob = CreateSchema();
      break;
    case SEQUENCE:
      ob = CreateSequence();
      break;
    case USER:
      ob = CreateUser();
      break;
    case VIEW:
      ob = CreateView();
      break;
    case TYPE:
      ob = CreateType();
      break;
    default:
      mcc_la1[3] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

// All statements that start with <DROP>
  public StatementTree Drop() {
  StatementTree ob;
    mcc_consume_token(DROP);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case TABLE:
      ob = DropTable();
      break;
    case TRIGGER:
    case CALLBACK:
      ob = DropTrigger();
      break;
    case FUNCTION:
      ob = DropFunction();
      break;
    case INDEX:
      ob = DropIndex();
      break;
    case SCHEMA:
      ob = DropSchema();
      break;
    case SEQUENCE:
      ob = DropSequence();
      break;
    case USER:
      ob = DropUser();
      break;
    case VIEW:
      ob = DropView();
      break;
    default:
      mcc_la1[4] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Declare() {
  StatementTree ob;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DECLARE:
      mcc_consume_token(DECLARE);
      break;
    default:
      mcc_la1[5] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CURSOR:
      ob = DeclareCursor();
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      ob = DeclareVariable();
      break;
    default:
      mcc_la1[6] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DeclareVariable() {
  StatementTree ob = new StatementTree(typeof(DeclareVariableStatement));
  Token name;
  TType type;
  Expression default_value = null;
  bool constant = false, not_null = false;
    name = SQLIdentifier();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CONSTANT:
      mcc_consume_token(CONSTANT);
                                        constant = true;
      break;
    default:
      mcc_la1[7] = mcc_gen;
      ;
      break;
    }
    type = GetTType();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NOT:
      mcc_consume_token(NOT);
      mcc_consume_token(NULL_LITERAL);
                           not_null = true;
      break;
    default:
      mcc_la1[8] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASSIGNMENT:
      mcc_consume_token(ASSIGNMENT);
      default_value = DoExpression();
      break;
    default:
      mcc_la1[9] = mcc_gen;
      ;
      break;
    }
    ob.SetValue("name", name.image);
    ob.SetValue("type", type);
    ob.SetValue("constant", constant);
    ob.SetValue("not_null", not_null);
    ob.SetValue("default", default_value);
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Open() {
  StatementTree ob;
    mcc_consume_token(OPEN);
    ob = OpenCursor();
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Close() {
  StatementTree ob;
    mcc_consume_token(CLOSE);
    ob = CloseCursor();
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Select() {
  StatementTree cmd = new StatementTree(typeof(SelectStatement));
  TableSelectExpression table_expr;
  List<ByColumn> order_by = new List<ByColumn>();
    table_expr = GetTableSelectExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ORDERBY:
      mcc_consume_token(ORDERBY);
      SelectOrderByList(order_by);
      break;
    default:
      mcc_la1[10] = mcc_gen;
      ;
      break;
    }
    cmd.SetValue("table_expression", table_expr);
    cmd.SetValue("order_by", order_by);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Update() {
  StatementTree cmd = new StatementTree(typeof(UpdateTableStatement));
  String table_name;
  List<Assignment> assignments = new List<Assignment>();
  SearchExpression where_clause = null;
  int limit = -1;
  bool from_cursor = false;
  string cursor_name = null;
    mcc_consume_token(UPDATE);
    table_name = TableName();
    mcc_consume_token(SET);
    AssignmentList(assignments);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WHERE:
      mcc_consume_token(WHERE);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case CURRENTOF:
        mcc_consume_token(CURRENTOF);
        cursor_name = TableName();
                                                    from_cursor = true;
        break;
      case ADD:
      case SUBTRACT:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case SELECT:
      case IF:
      case NEW:
      case TRIM:
      case USER:
      case CAST:
      case NAME:
      case COUNT:
      case ACTION:
      case GROUPS:
      case OPTION:
      case CSHARP:
      case EXISTS:
      case UNIQUE:
      case ACCOUNT:
      case PASSWORD:
      case EXTRACT:
      case IDENTITY:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case DATE:
      case TIME:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case INTERVAL:
      case TIMESTAMP:
      case CURRENT_TIME:
      case CURRENT_DATE:
      case CURRENT_TIMESTAMP:
      case DBTIMEZONE:
      case NOT:
      case NUMBER_LITERAL:
      case STRING_LITERAL:
      case QUOTED_VARIABLE:
      case IDENTIFIER:
      case DOT_DELIMINATED_REF:
      case QUOTED_DELIMINATED_REF:
      case NAMED_PARAMETER:
      case PARAMETER_REF:
      case VARIABLE_REF:
      case 248:
        where_clause = ConditionsExpression();
        break;
      default:
        mcc_la1[11] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[12] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LIMIT:
      mcc_consume_token(LIMIT);
      limit = PositiveIntegerConstant();
      break;
    default:
      mcc_la1[13] = mcc_gen;
      ;
      break;
    }
    cmd.SetValue("table_name", table_name);
    cmd.SetValue("assignments", assignments);
    cmd.SetValue("where_clause", where_clause);
    cmd.SetValue("from_cursor", from_cursor);
    cmd.SetValue("cursor_name", cursor_name);
    cmd.SetValue("limit", limit);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Alter() {
  StatementTree cmd;
    mcc_consume_token(ALTER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CREATE:
    case TABLE:
      cmd = AlterTable();
      break;
    case USER:
      cmd = AlterUser();
      break;
    default:
      mcc_la1[14] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree AlterTable() {
  StatementTree cmd = new StatementTree(typeof(AlterTableStatement));
  String table_name;
  AlterTableAction action;
  StatementTree create_statement;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case TABLE:
      mcc_consume_token(TABLE);
      table_name = TableName();
      action = GetAlterTableAction();
        cmd.SetValue("table_name", table_name);
        cmd.SetValue("alter_action", action);
      break;
    case CREATE:
      mcc_consume_token(CREATE);
      create_statement = CreateTable();
        cmd.SetValue("create_statement", create_statement);
      break;
    default:
      mcc_la1[15] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Compact() {
  StatementTree cmd = new StatementTree(typeof(CompactStatement));
  String table_name;
    mcc_consume_token(COMPACT);
    mcc_consume_token(TABLE);
    table_name = TableName();
    cmd.SetValue("table_name", table_name);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateTable() {
  StatementTree cmd = new StatementTree(typeof(CreateTableStatement));
  bool temporary = false;
  bool only_if_not_exists = false;
  String table_name;
  ArrayList column_list = new ArrayList();
  ArrayList constraint_list = new ArrayList();
  Expression check_expression;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case TEMPORARY:
      mcc_consume_token(TEMPORARY);
                     temporary = true;
      break;
    default:
      mcc_la1[16] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(TABLE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IF:
      mcc_consume_token(IF);
      mcc_consume_token(NOT);
      mcc_consume_token(EXISTS);
                             only_if_not_exists = true;
      break;
    default:
      mcc_la1[17] = mcc_gen;
      ;
      break;
    }
    table_name = TableName();
    ColumnDeclarationList(column_list, constraint_list);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CHECK:
      mcc_consume_token(CHECK);
      check_expression = DoExpression();
              constraint_list.Add(SqlConstraint.Check(check_expression));
      break;
    default:
      mcc_la1[18] = mcc_gen;
      ;
      break;
    }
    cmd.SetValue("temporary", temporary);
    cmd.SetValue("only_if_not_exists", only_if_not_exists);
    cmd.SetValue("table_name", table_name);
    cmd.SetValue("column_list", column_list);
    cmd.SetValue("constraint_list", constraint_list);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateTrigger() {
  StatementTree cmd = new StatementTree(typeof(CreateTriggerStatement));
  bool callback;
  String trigger_name;
  ArrayList trigger_types = new ArrayList();
  String table_name;
  String before_after;
  String procedure_name;
  Expression[] procedure_args;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CALLBACK:
      mcc_consume_token(CALLBACK);
      mcc_consume_token(TRIGGER);
      trigger_name = TriggerName();
      TriggerTypes(trigger_types);
      mcc_consume_token(ON);
      table_name = TableName();
      cmd.SetValue("type", "callback_trigger");
      break;
    case TRIGGER:
      mcc_consume_token(TRIGGER);
      trigger_name = TriggerName();
      before_after = BeforeOrAfter();
      TriggerTypes(trigger_types);
      mcc_consume_token(ON);
      table_name = TableName();
      mcc_consume_token(FOR);
      mcc_consume_token(EACH);
      mcc_consume_token(ROW);
      mcc_consume_token(EXECUTE);
      mcc_consume_token(PROCEDURE);
      procedure_name = FunctionName();
      mcc_consume_token(248);
      procedure_args = ExpressionList();
      mcc_consume_token(249);
      cmd.SetValue("type", "procedure_trigger");
      cmd.SetValue("before_after", before_after);
      cmd.SetValue("procedure_name", procedure_name);
      cmd.SetValue("procedure_args", procedure_args);
      break;
    default:
      mcc_la1[19] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    cmd.SetValue("trigger_name", trigger_name);
    cmd.SetValue("trigger_types", trigger_types);
    cmd.SetValue("table_name", table_name);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropTrigger() {
  StatementTree cmd = new StatementTree(typeof(DropTriggerStatement));
  String trigger_name;
  String type = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CALLBACK:
      mcc_consume_token(CALLBACK);
      mcc_consume_token(TRIGGER);
      trigger_name = TriggerName();
                                                            type = "callback_trigger";
      break;
    case TRIGGER:
      mcc_consume_token(TRIGGER);
      trigger_name = TriggerName();
                                                 type = "procedure_trigger";
    cmd.SetValue("trigger_name", trigger_name);
    cmd.SetValue("type", type);
    {return cmd;}
      break;
    default:
      mcc_la1[20] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateFunction() {
  StatementTree cmd = new StatementTree(typeof(CreateFunctionStatement));
  String function_name;
  ArrayList arg_names = new ArrayList();
  ArrayList arg_types = new ArrayList();
  Token loc_name;
  TType return_type = null;
    mcc_consume_token(FUNCTION);
    function_name = FunctionName();
    mcc_consume_token(248);
    ProcParameterList(arg_names, arg_types);
    mcc_consume_token(249);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case RETURNS:
      mcc_consume_token(RETURNS);
      return_type = GetTType();
      break;
    default:
      mcc_la1[21] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(LANGUAGE);
    mcc_consume_token(CSHARP);
    mcc_consume_token(NAME);
    loc_name = mcc_consume_token(STRING_LITERAL);
    cmd.SetValue("function_name", function_name);
    cmd.SetValue("arg_names", arg_names);
    cmd.SetValue("arg_types", arg_types);
    // Note that 'location_name' will be a TObject
    cmd.SetValue("location_name",
                  Parser.Util.ToParamObject(loc_name, case_insensitive_identifiers));
    cmd.SetValue("return_type", return_type);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropFunction() {
  StatementTree cmd = new StatementTree(typeof(DropFunctionStatement));
  String function_name;
    mcc_consume_token(FUNCTION);
    function_name = FunctionName();
    cmd.SetValue("function_name", function_name);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateSchema() {
  StatementTree cmd = new StatementTree(typeof(CreateSchemaStatement));
  cmd.SetValue("type", "create");
  String schema_name;
    mcc_consume_token(SCHEMA);
    schema_name = SchemaName();
    cmd.SetValue("schema_name", schema_name);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropSchema() {
  StatementTree cmd = new StatementTree(typeof(DropSchemaStatement));
  cmd.SetValue("type", "drop");
  String schema_name;
    mcc_consume_token(SCHEMA);
    schema_name = SchemaName();
    cmd.SetValue("schema_name", schema_name);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateView() {
  StatementTree cmd = new StatementTree(typeof(CreateViewStatement));
  String view_name;
  TableSelectExpression select_cmd;
  ArrayList col_list = new ArrayList();
    mcc_consume_token(VIEW);
    view_name = TableName();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 248:
      mcc_consume_token(248);
      BasicColumnList(col_list);
      mcc_consume_token(249);
      break;
    default:
      mcc_la1[22] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(AS);
    select_cmd = GetTableSelectExpression();
    cmd.SetValue("view_name", view_name);
    cmd.SetValue("column_list", col_list);
    cmd.SetValue("select_expression", select_cmd);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropView() {
  StatementTree cmd = new StatementTree(typeof(DropViewStatement));
  String view_name;
    mcc_consume_token(VIEW);
    view_name = TableName();
    cmd.SetValue("view_name", view_name);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateIndex() {
  StatementTree cmd = new StatementTree(typeof(NoOpStatement));
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case UNIQUE:
      mcc_consume_token(UNIQUE);
      break;
    default:
      mcc_la1[23] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(INDEX);
    IndexName();
    mcc_consume_token(ON);
    TableName();
    mcc_consume_token(248);
    BasicColumnList(new ArrayList());
    mcc_consume_token(249);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropTable() {
  StatementTree cmd = new StatementTree(typeof(DropTableStatement));
  bool only_if_exists = false;
  String table_name;
  ArrayList table_list = new ArrayList();
    mcc_consume_token(TABLE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IF:
      mcc_consume_token(IF);
      mcc_consume_token(EXISTS);
                           only_if_exists = true;
      break;
    default:
      mcc_la1[24] = mcc_gen;
      ;
      break;
    }
    table_name = TableName();
                                    table_list.Add(table_name);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[25] = mcc_gen;
        goto label_2;
      }
      mcc_consume_token(250);
      table_name = TableName();
                                            table_list.Add(table_name);
    }label_2: ;
    
    cmd.SetValue("only_if_exists", only_if_exists);
    cmd.SetValue("table_list", table_list);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropIndex() {
  StatementTree cmd = new StatementTree(typeof(NoOpStatement));
    mcc_consume_token(INDEX);
    IndexName();
    mcc_consume_token(ON);
    TableName();
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Call() {
  StatementTree cmd = new StatementTree(typeof(CallStatement));
  String proc_name;
  Expression[] args = null;
    mcc_consume_token(CALL);
    proc_name = ProcedureName();
    mcc_consume_token(248);
    args = ExpressionList();
    mcc_consume_token(249);
    cmd.SetValue("proc_name", proc_name);
    cmd.SetValue("args", args);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateSequence() {
  StatementTree cmd = new StatementTree(typeof(CreateSequenceStatement));
  String seq_name;
  Expression v;
    mcc_consume_token(SEQUENCE);
    seq_name = SequenceName();
                                       cmd.SetValue("seq_name", seq_name);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INCREMENT:
      mcc_consume_token(INCREMENT);
      v = DoExpression();
                                     cmd.SetValue("increment", v);
      break;
    default:
      mcc_la1[26] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case MINVALUE:
      mcc_consume_token(MINVALUE);
      v = DoExpression();
                                    cmd.SetValue("min_value", v);
      break;
    default:
      mcc_la1[27] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case MAXVALUE:
      mcc_consume_token(MAXVALUE);
      v = DoExpression();
                                    cmd.SetValue("max_value", v);
      break;
    default:
      mcc_la1[28] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case START:
      mcc_consume_token(START);
      v = DoExpression();
                                 cmd.SetValue("start", v);
      break;
    default:
      mcc_la1[29] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CACHE:
      mcc_consume_token(CACHE);
      v = DoExpression();
                                 cmd.SetValue("cache", v);
      break;
    default:
      mcc_la1[30] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CYCLE:
      mcc_consume_token(CYCLE);
              cmd.SetValue("cycle", "yes");
      break;
    default:
      mcc_la1[31] = mcc_gen;
      ;
      break;
    }
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropSequence() {
  StatementTree cmd = new StatementTree(typeof(DropSequenceStatement));
  String seq_name;
    mcc_consume_token(SEQUENCE);
    seq_name = SequenceName();
                                       cmd.SetValue("seq_name", seq_name);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateUser() {
  StatementTree cmd = new StatementTree(typeof(CreateUserStatement));
    mcc_consume_token(USER);
    UserManagerCommand(cmd);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree AlterUser() {
  StatementTree cmd = new StatementTree(typeof(AlterUserStatement));
    mcc_consume_token(USER);
    UserManagerCommand(cmd);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropUser() {
  StatementTree cmd = new StatementTree(typeof(DropUserStatement));
  String username;
    mcc_consume_token(USER);
    username = UserName();
    cmd.SetValue("username", username);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public void UserManagerCommand(StatementTree cmd) {
  String username;
  Expression password_exp;
  Expression[] groups_list = null;
  String lock_status = null;
    username = UserName();
    mcc_consume_token(SET);
    mcc_consume_token(PASSWORD);
    password_exp = DoExpression();
    if (mcc_2_1(2)) {
      mcc_consume_token(SET);
      mcc_consume_token(GROUPS);
      groups_list = ExpressionList();
    } else {
      ;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SET:
      mcc_consume_token(SET);
      mcc_consume_token(ACCOUNT);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LOCK:
        mcc_consume_token(LOCK);
                                   lock_status="LOCK";
        break;
      case UNLOCK:
        mcc_consume_token(UNLOCK);
                                                                      lock_status="UNLOCK";
        break;
      default:
        mcc_la1[32] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[33] = mcc_gen;
      ;
      break;
    }
    cmd.SetValue("username", username);
    cmd.SetValue("password_expression", password_exp);
    cmd.SetValue("groups_list", groups_list);
    cmd.SetValue("lock_status", lock_status);
  }

  public StatementTree DeclareCursor() {
  Token name;
  bool scrollable = false, update = false, insensitive = false;
  TableSelectExpression select_expr;
  List<ByColumn> order_by = new List<ByColumn>();
    mcc_consume_token(CURSOR);
    name = SQLIdentifier();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INSENSITIVE:
      mcc_consume_token(INSENSITIVE);
                                                    insensitive = true;
      break;
    default:
      mcc_la1[34] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SCROLL:
      mcc_consume_token(SCROLL);
                  scrollable=true;
      break;
    default:
      mcc_la1[35] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(CURSOR);
    mcc_consume_token(FOR);
    select_expr = GetTableSelectExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ORDERBY:
      mcc_consume_token(ORDERBY);
      SelectOrderByList(order_by);
      break;
    default:
      mcc_la1[36] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case FOR:
      mcc_consume_token(FOR);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case READONLY:
        mcc_consume_token(READONLY);
        break;
      case UPDATE:
        mcc_consume_token(UPDATE);
                                       update = true;
        break;
      default:
        mcc_la1[37] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[38] = mcc_gen;
      ;
      break;
    }
    StatementTree ob = new StatementTree(typeof(DeclareCursorStatement));
    ob.SetValue("name", name.image);
    ob.SetValue("scrollable", scrollable);
    ob.SetValue("insensitive", insensitive);
    ob.SetValue("update", update);
    ob.SetValue("select_expression", select_expr);
    ob.SetValue("order_by", order_by);
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree OpenCursor() {
  Token name;
    name = SQLIdentifier();
    StatementTree ob = new StatementTree(typeof(OpenCursorStatement));
    ob.SetValue("name", name.image);
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CloseCursor() {
  Token name;
    name = SQLIdentifier();
    StatementTree ob = new StatementTree(typeof(CloseCursorStatement));
    ob.SetValue("name", name.image);
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Fetch() {
  Token cursor_name;
  CursorFetch fetch = new CursorFetch();
    mcc_consume_token(FETCH);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case FROM:
    case FIRST:
    case LAST:
    case NEXT:
    case PRIOR:
    case ABSOLUTE:
    case RELATIVE:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case FIRST:
      case LAST:
      case NEXT:
      case PRIOR:
      case ABSOLUTE:
      case RELATIVE:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case NEXT:
          mcc_consume_token(NEXT);
               fetch.Orientation = FetchOrientation.Next;
          break;
        case PRIOR:
          mcc_consume_token(PRIOR);
                fetch.Orientation = FetchOrientation.Prior;
          break;
        case FIRST:
          mcc_consume_token(FIRST);
                fetch.Orientation = FetchOrientation.First;
          break;
        case LAST:
          mcc_consume_token(LAST);
               fetch.Orientation = FetchOrientation.Last;
          break;
        case RELATIVE:
          mcc_consume_token(RELATIVE);
                   fetch.Orientation = FetchOrientation.Relative;
          fetch.Offset = DoExpression();
          break;
        case ABSOLUTE:
          mcc_consume_token(ABSOLUTE);
                   fetch.Orientation = FetchOrientation.Absolute;
          fetch.Offset = DoExpression();
          break;
        default:
          mcc_la1[39] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[40] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(FROM);
      break;
    default:
      mcc_la1[41] = mcc_gen;
      ;
      break;
    }
    cursor_name = SQLIdentifier();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTO:
      mcc_consume_token(INTO);
      GetIntoClause(fetch.Into);
      break;
    default:
      mcc_la1[42] = mcc_gen;
      ;
      break;
    }
    StatementTree ob = new StatementTree(typeof(FetchStatement));
    ob.SetValue("name", cursor_name.image);
    ob.SetValue("fetch", fetch);
    {return ob;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Delete() {
  StatementTree cmd = new StatementTree(typeof(DeleteStatement));
  String table_name;
  SearchExpression where_clause = null;
  int limit = -1;
  string cursor_name = null;
  bool from_cursor = false;
    mcc_consume_token(DELETE);
    mcc_consume_token(FROM);
    table_name = TableName();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WHERE:
      mcc_consume_token(WHERE);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case CURRENTOF:
        mcc_consume_token(CURRENTOF);
        cursor_name = TableName();
                                                    from_cursor = true;
        break;
      case ADD:
      case SUBTRACT:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case SELECT:
      case IF:
      case NEW:
      case TRIM:
      case USER:
      case CAST:
      case NAME:
      case COUNT:
      case ACTION:
      case GROUPS:
      case OPTION:
      case CSHARP:
      case EXISTS:
      case UNIQUE:
      case ACCOUNT:
      case PASSWORD:
      case EXTRACT:
      case IDENTITY:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case DATE:
      case TIME:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case INTERVAL:
      case TIMESTAMP:
      case CURRENT_TIME:
      case CURRENT_DATE:
      case CURRENT_TIMESTAMP:
      case DBTIMEZONE:
      case NOT:
      case NUMBER_LITERAL:
      case STRING_LITERAL:
      case QUOTED_VARIABLE:
      case IDENTIFIER:
      case DOT_DELIMINATED_REF:
      case QUOTED_DELIMINATED_REF:
      case NAMED_PARAMETER:
      case PARAMETER_REF:
      case VARIABLE_REF:
      case 248:
        where_clause = ConditionsExpression();
        break;
      default:
        mcc_la1[43] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[44] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LIMIT:
      mcc_consume_token(LIMIT);
      limit = PositiveIntegerConstant();
      break;
    default:
      mcc_la1[45] = mcc_gen;
      ;
      break;
    }
    cmd.SetValue("table_name", table_name);
    cmd.SetValue("where_clause", where_clause);
    cmd.SetValue("limit", limit);
    cmd.SetValue("from_cursor", from_cursor);
    cmd.SetValue("cursor_name", cursor_name);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Insert() {
  StatementTree cmd = new StatementTree(typeof(InsertStatement));
  String table_name;
  ArrayList col_list = new ArrayList();
  ArrayList data_list = new ArrayList(); // ( Array of Expression[] )
  StatementTree select = null;
  List<Assignment> assignments = new List<Assignment>();
  String type;
    mcc_consume_token(INSERT);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTO:
      mcc_consume_token(INTO);
      break;
    default:
      mcc_la1[46] = mcc_gen;
      ;
      break;
    }
    table_name = TableName();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SELECT:
    case VALUES:
    case 248:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 248:
        mcc_consume_token(248);
        BasicColumnList(col_list);
        mcc_consume_token(249);
        break;
      default:
        mcc_la1[47] = mcc_gen;
        ;
        break;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case VALUES:
        mcc_consume_token(VALUES);
        InsertDataList(data_list);
                                                     type = "from_values";
        break;
      case SELECT:
        select = Select();
                                                     type = "from_select";
        break;
      default:
        mcc_la1[48] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    case SET:
      mcc_consume_token(SET);
      AssignmentList(assignments);
                                                     type = "from_set";
      break;
    default:
      mcc_la1[49] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    cmd.SetValue("table_name", table_name);
    cmd.SetValue("col_list", col_list);
    cmd.SetValue("data_list", data_list);
    cmd.SetValue("select", select);
    cmd.SetValue("assignments", assignments);
    cmd.SetValue("type", type);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Describe() {
  StatementTree cmd = new StatementTree(typeof(ShowStatement));
  cmd.SetValue("show", "describe_table");
  String table_name;
    mcc_consume_token(DESCRIBE);
    table_name = TableName();
    cmd.SetValue("table_name", table_name);
    cmd.SetValue("where_clause", null);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Show() {
  StatementTree cmd = new StatementTree(typeof(ShowStatement));
  Expression[] args = null;
  SearchExpression where_clause = null;
  Token t;
    mcc_consume_token(SHOW);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IDENTIFIER:
      t = mcc_consume_token(IDENTIFIER);
      break;
    case SCHEMA:
      t = mcc_consume_token(SCHEMA);
      break;
    default:
      mcc_la1[50] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 248:
      mcc_consume_token(248);
      args = ExpressionList();
      mcc_consume_token(249);
      break;
    default:
      mcc_la1[51] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WHERE:
      mcc_consume_token(WHERE);
      where_clause = ConditionsExpression();
      break;
    default:
      mcc_la1[52] = mcc_gen;
      ;
      break;
    }
    cmd.SetValue("show", t.image);
    cmd.SetValue("args", args);
    cmd.SetValue("where_clause", where_clause);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Grant() {
  StatementTree cmd = new StatementTree(typeof(GrantStatement));
  ArrayList priv_list = new ArrayList();
  String priv_object;
  ArrayList grant_to;
  bool grant_option = false;
    mcc_consume_token(GRANT);
    PrivList(priv_list);
    mcc_consume_token(ON);
    priv_object = PrivObject();
    mcc_consume_token(TO);
    grant_to = UserNameList(new ArrayList());
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WITH:
      mcc_consume_token(WITH);
      mcc_consume_token(GRANT);
      mcc_consume_token(OPTION);
                                grant_option = true;
      break;
    default:
      mcc_la1[53] = mcc_gen;
      ;
      break;
    }
    cmd.SetValue("priv_list", priv_list);
    cmd.SetValue("priv_object", priv_object);
    cmd.SetValue("users", grant_to);
    cmd.SetValue("grant_option", grant_option);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Revoke() {
  StatementTree cmd = new StatementTree(typeof(RevokeStatement));
  ArrayList priv_list = new ArrayList();
  String priv_object;
  ArrayList revoke_from;
  bool revoke_grant_option = false;
    mcc_consume_token(REVOKE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case GRANT:
      mcc_consume_token(GRANT);
      mcc_consume_token(OPTION);
      mcc_consume_token(FOR);
                                        revoke_grant_option = true;
      break;
    default:
      mcc_la1[54] = mcc_gen;
      ;
      break;
    }
    PrivList(priv_list);
    mcc_consume_token(ON);
    priv_object = PrivObject();
    mcc_consume_token(FROM);
    revoke_from = UserNameList(new ArrayList());
    cmd.SetValue("priv_list", priv_list);
    cmd.SetValue("priv_object", priv_object);
    cmd.SetValue("users", revoke_from);
    cmd.SetValue("grant_option", revoke_grant_option);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree CreateType() {
  StatementTree cmd = new StatementTree(typeof(NoOpStatement));
  string type_name;
  string parent_type = null;
  Token ext_parent_type = null;
  bool external = false;
  bool final = false;
  ArrayList members = new ArrayList();
    mcc_consume_token(TYPE);
    type_name = TableName();
    mcc_consume_token(AS);
    mcc_consume_token(OBJECT);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case UNDER:
      mcc_consume_token(UNDER);
      parent_type = TableName();
      break;
    default:
      mcc_la1[55] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case EXTERNAL:
      mcc_consume_token(EXTERNAL);
      mcc_consume_token(NAME);
      ext_parent_type = mcc_consume_token(STRING_LITERAL);
      mcc_consume_token(LANGUAGE);
      mcc_consume_token(CSHARP);
                             external =true;
      break;
    default:
      mcc_la1[56] = mcc_gen;
      ;
      break;
    }
    TypeMemberDeclarations(members);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case FINAL:
    case NOT:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case NOT:
        mcc_consume_token(NOT);
        mcc_consume_token(FINAL);
        break;
      case FINAL:
        mcc_consume_token(FINAL);
                                 final = true;
        break;
      default:
        mcc_la1[57] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[58] = mcc_gen;
      ;
      break;
    }
    cmd.SetValue("type_name", type_name);
    if (external)cmd.SetValue("parent_type", parent_type);
    else cmd.SetValue("parent_type", ext_parent_type.image);
    cmd.SetValue("external", external);
    cmd.SetValue("final", final);
    cmd.SetValue("members", members);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree DropType() {
  StatementTree cmd = new StatementTree(typeof(NoOpStatement));
  string type_name;
  ArrayList type_list = new ArrayList();
    mcc_consume_token(TYPE);
    type_name = TableName();
                                     type_list.Add(type_name);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[59] = mcc_gen;
        goto label_3;
      }
      mcc_consume_token(250);
      type_name = TableName();
                                        type_list.Add(type_name);
    }label_3: ;
    
    cmd.SetValue("type_list", type_list);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public void TypeMemberDeclarations(ArrayList members) {
    mcc_consume_token(248);
    TypeAttributeOrFunctionDeclaration(members);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[60] = mcc_gen;
        goto label_4;
      }
      mcc_consume_token(250);
      TypeAttributeOrFunctionDeclaration(members);
    }label_4: ;
    
    mcc_consume_token(249);
  }

  public void TypeAttributeOrFunctionDeclaration(ArrayList members) {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      TypeAttributeDeclaration(members);
      break;
    case FUNCTION:
      TypeFunctionDeclaration(members);
      break;
    default:
      mcc_la1[61] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void TypeFunctionDeclaration(ArrayList members) {
  ArrayList arg_names = new ArrayList();
  ArrayList arg_types = new ArrayList();
    mcc_consume_token(FUNCTION);
    FunctionName();
    mcc_consume_token(248);
    ProcParameterList(arg_names, arg_types);
    mcc_consume_token(249);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case RETURNS:
      mcc_consume_token(RETURNS);
      GetTType();
      break;
    default:
      mcc_la1[62] = mcc_gen;
      ;
      break;
    }
  }

  public void TypeAttributeDeclaration(ArrayList members) {
  Token name;
  TType type;
  bool not_null = false;
    name = SQLIdentifier();
    type = GetTType();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NOT:
      mcc_consume_token(NOT);
      mcc_consume_token(NULL_LITERAL);
                             not_null=true;
      break;
    default:
      mcc_la1[63] = mcc_gen;
      ;
      break;
    }
    members.Add(new SqlTypeAttribute(name.image, type, not_null));
  }

  public StatementTree Commit() {
  StatementTree cmd = new StatementTree(typeof(CommitStatement));
    mcc_consume_token(COMMIT);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Rollback() {
 StatementTree cmd = new StatementTree(typeof(RollbackStatement));
    mcc_consume_token(ROLLBACK);
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree Set() {
  StatementTree cmd = new StatementTree(typeof(SetStatement));
  Token t1;
  String value;
  Expression exp;
  String name;
    mcc_consume_token(SET);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IDENTIFIER:
      t1 = mcc_consume_token(IDENTIFIER);
      mcc_consume_token(ASSIGNMENT);
      exp = DoExpression();
          cmd.SetValue("type", "VARSET");
          cmd.SetValue("var_name", t1.image);
          cmd.SetValue("exp", exp);
      break;
    case TRANSACTIONISOLATIONLEVEL:
      mcc_consume_token(TRANSACTIONISOLATIONLEVEL);
      t1 = mcc_consume_token(SERIALIZABLE);
          cmd.SetValue("type", "ISOLATIONSET");
          cmd.SetValue("var_name", "TRANSACTION ISOLATION LEVEL");
          cmd.SetValue("value", t1.image);
      break;
    case AUTOCOMMIT:
      mcc_consume_token(AUTOCOMMIT);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ON:
        t1 = mcc_consume_token(ON);
        break;
      case IDENTIFIER:
        t1 = mcc_consume_token(IDENTIFIER);
        break;
      default:
        mcc_la1[64] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
          cmd.SetValue("type", "AUTOCOMMIT");
          cmd.SetValue("value", t1.image);
      break;
    case SCHEMA:
      mcc_consume_token(SCHEMA);
      name = SchemaName();
          cmd.SetValue("type", "SCHEMA");
          cmd.SetValue("value", name);
      break;
    default:
      mcc_la1[65] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

  public StatementTree ShutDown() {
  StatementTree cmd = new StatementTree(typeof(ShutdownStatement));
    mcc_consume_token(SHUTDOWN);
    cmd.SetValue("command", "shutdown");
    {return cmd;}
    throw new Exception("Missing return statement in function");
  }

// ----------
  public String TriggerType() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INSERT:
      mcc_consume_token(INSERT);
                 {return "insert";}
      break;
    case DELETE:
      mcc_consume_token(DELETE);
                 {return "delete";}
      break;
    case UPDATE:
      mcc_consume_token(UPDATE);
                 {return "update";}
      break;
    default:
      mcc_la1[66] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public String BeforeOrAfter() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case BEFORE:
      mcc_consume_token(BEFORE);
                 {return "before";}
      break;
    case AFTER:
      mcc_consume_token(AFTER);
                {return "after";}
      break;
    default:
      mcc_la1[67] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

// A list of triggered actions separated by 'OR' delimination, for example,
// INSERT OR DELETE OR UPDATE
  public void TriggerTypes(ArrayList list) {
  String trig_type;
    trig_type = TriggerType();
                              list.Add(trig_type);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case OR:
        ;
        break;
      default:
        mcc_la1[68] = mcc_gen;
        goto label_5;
      }
      mcc_consume_token(OR);
      trig_type = TriggerType();
                                       list.Add(trig_type);
    }label_5: ;
    
  }

// A priv object
// Note we add a 2 character prefix to the priv object for future enhancements.
// In the future an object may be something other than a table.
  public String PrivObject() {
  String table_name;
  String schema_name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case OLD:
    case NEW:
    case NAME:
    case TABLE:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case TABLE:
        mcc_consume_token(TABLE);
        break;
      default:
        mcc_la1[69] = mcc_gen;
        ;
        break;
      }
      table_name = TableName();
                                           {return "T:" + table_name;}
      break;
    case SCHEMA:
      mcc_consume_token(SCHEMA);
      schema_name = SchemaName();
                                          {return "S:" + schema_name;}
      break;
    default:
      mcc_la1[70] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

// A list of privs
  public ArrayList PrivList(ArrayList list) {
    PrivListItem(list);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[71] = mcc_gen;
        goto label_6;
      }
      mcc_consume_token(250);
      PrivListItem(list);
    }label_6: ;
    
    {return list;}
    throw new Exception("Missing return statement in function");
  }

// Adds an item in a priv list
  public void PrivListItem(ArrayList list) {
  Token t;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SELECT:
      t = mcc_consume_token(SELECT);
      break;
    case INSERT:
      t = mcc_consume_token(INSERT);
      break;
    case UPDATE:
      t = mcc_consume_token(UPDATE);
      break;
    case DELETE:
      t = mcc_consume_token(DELETE);
      break;
    case REFERENCES:
      t = mcc_consume_token(REFERENCES);
      break;
    case USAGE:
      t = mcc_consume_token(USAGE);
      break;
    case ALL:
      t = mcc_consume_token(ALL);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PRIVILEGES:
        mcc_consume_token(PRIVILEGES);
        break;
      default:
        mcc_la1[72] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[73] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    list.Add(t.image);
  }

// A table expression 
  public TableSelectExpression GetTableSelectExpression() {
  TableSelectExpression table_expr = new TableSelectExpression();
  CompositeFunction composite = CompositeFunction.None;
  bool is_all = false;
  TableSelectExpression next_composite_expression;
    mcc_consume_token(SELECT);
    if (mcc_2_2(2147483647)) {
      mcc_consume_token(IDENTITY);
                                             table_expr.Columns.Add(Sql.SelectColumn.Identity);
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case STAR:
      case ADD:
      case SUBTRACT:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case SELECT:
      case IF:
      case ALL:
      case NEW:
      case TRIM:
      case USER:
      case CAST:
      case NAME:
      case COUNT:
      case ACTION:
      case GROUPS:
      case OPTION:
      case CSHARP:
      case EXISTS:
      case UNIQUE:
      case ACCOUNT:
      case PASSWORD:
      case EXTRACT:
      case IDENTITY:
      case DISTINCT:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case DATE:
      case TIME:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case INTERVAL:
      case TIMESTAMP:
      case CURRENT_TIME:
      case CURRENT_DATE:
      case CURRENT_TIMESTAMP:
      case DBTIMEZONE:
      case NOT:
      case NUMBER_LITERAL:
      case STRING_LITERAL:
      case QUOTED_VARIABLE:
      case IDENTIFIER:
      case DOT_DELIMINATED_REF:
      case QUOTED_DELIMINATED_REF:
      case GLOBVARIABLE:
      case QUOTEDGLOBVARIABLE:
      case NAMED_PARAMETER:
      case PARAMETER_REF:
      case VARIABLE_REF:
      case 248:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case ALL:
        case DISTINCT:
          table_expr.Distinct = SetQuantifier();
          break;
        default:
          mcc_la1[74] = mcc_gen;
          ;
          break;
        }
        SelectColumnList(table_expr.Columns);
        break;
      default:
        mcc_la1[75] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTO:
      mcc_consume_token(INTO);
      GetIntoClause(table_expr.Into);
      break;
    default:
      mcc_la1[76] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case FROM:
      mcc_consume_token(FROM);
      SelectTableList(table_expr.From);
      break;
    default:
      mcc_la1[77] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case WHERE:
      mcc_consume_token(WHERE);
      table_expr.Where = ConditionsExpression();
      break;
    default:
      mcc_la1[78] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case GROUPBY:
      mcc_consume_token(GROUPBY);
      SelectGroupByList(table_expr.GroupBy);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case GROUPMAX:
        mcc_consume_token(GROUPMAX);
        table_expr.GroupMax = GroupMaxColumn();
        break;
      default:
        mcc_la1[79] = mcc_gen;
        ;
        break;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case HAVING:
        mcc_consume_token(HAVING);
        table_expr.Having = ConditionsExpression();
        break;
      default:
        mcc_la1[80] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[81] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case UNION:
    case EXCEPT:
    case INTERSECT:
      composite = GetComposite();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ALL:
        mcc_consume_token(ALL);
                                               is_all = true;
        break;
      default:
        mcc_la1[82] = mcc_gen;
        ;
        break;
      }
      next_composite_expression = GetTableSelectExpression();
            table_expr.ChainComposite(next_composite_expression, composite, is_all);
      break;
    default:
      mcc_la1[83] = mcc_gen;
      ;
      break;
    }
    {return table_expr;}
    throw new Exception("Missing return statement in function");
  }

  public AlterTableAction GetAlterTableAction() {
  String col_name, con_name;
  SqlColumn column;
  SqlConstraint constraint_def;
  Expression default_exp;
  AlterTableActionType actionType = AlterTableActionType.AddColumn;
  ArrayList elements = new ArrayList();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SQLADD:
      mcc_consume_token(SQLADD);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case NAME:
      case ACTION:
      case GROUPS:
      case OPTION:
      case CSHARP:
      case SQLCOLUMN:
      case ACCOUNT:
      case PASSWORD:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case QUOTED_VARIABLE:
      case IDENTIFIER:
      case DOT_DELIMINATED_REF:
      case QUOTED_DELIMINATED_REF:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case SQLCOLUMN:
          mcc_consume_token(SQLCOLUMN);
          break;
        default:
          mcc_la1[84] = mcc_gen;
          ;
          break;
        }
        column = ColumnDefinition();
            actionType = AlterTableActionType.AddColumn;
            elements.Add(column);
        break;
      case CHECK:
      case UNIQUE:
      case CONSTRAINT:
      case PRIMARY:
      case FOREIGN:
        constraint_def = TableConstraintDefinition();
            actionType = AlterTableActionType.AddConstraint;
            elements.Add(constraint_def);
        break;
      default:
        mcc_la1[85] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    case ALTER:
      mcc_consume_token(ALTER);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case SQLCOLUMN:
        mcc_consume_token(SQLCOLUMN);
        break;
      default:
        mcc_la1[86] = mcc_gen;
        ;
        break;
      }
      col_name = ColumnName();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case SET:
        mcc_consume_token(SET);
        default_exp = DoExpression();
            actionType = AlterTableActionType.SetDefault;
            elements.Add(col_name);
            elements.Add(default_exp);
        break;
      case DROP:
        mcc_consume_token(DROP);
        mcc_consume_token(SQLDEFAULT);
            actionType= AlterTableActionType.DropDefault;
            elements.Add(col_name);
        break;
      default:
        mcc_la1[87] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DROP:
      mcc_consume_token(DROP);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case NAME:
      case ACTION:
      case GROUPS:
      case OPTION:
      case CSHARP:
      case SQLCOLUMN:
      case ACCOUNT:
      case PASSWORD:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case QUOTED_VARIABLE:
      case IDENTIFIER:
      case DOT_DELIMINATED_REF:
      case QUOTED_DELIMINATED_REF:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case SQLCOLUMN:
          mcc_consume_token(SQLCOLUMN);
          break;
        default:
          mcc_la1[88] = mcc_gen;
          ;
          break;
        }
        col_name = ColumnName();
            actionType = AlterTableActionType.DropColumn;
            elements.Add(col_name);
        break;
      case CONSTRAINT:
        mcc_consume_token(CONSTRAINT);
        con_name = ConstraintName();
            actionType = AlterTableActionType.DropConstraint;
            elements.Add(con_name);
        break;
      case PRIMARY:
        mcc_consume_token(PRIMARY);
        mcc_consume_token(KEY);
            actionType = AlterTableActionType.DropPrimaryKey;
        break;
      default:
        mcc_la1[89] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[90] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    AlterTableAction action = new AlterTableAction(actionType);
        action.AddElements(elements);
        {return action;}
    throw new Exception("Missing return statement in function");
  }

  public void GetIntoClause(SelectIntoClause into) {
  string table_name = null;
  Token var_ref = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case OLD:
    case NEW:
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
      table_name = TableName();
                                into.SetTableName(table_name);
      break;
    case VARIABLE_REF:
      var_ref = mcc_consume_token(VARIABLE_REF);
                                into.AddElement(CreateVariableRef(var_ref.image));
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 250:
          ;
          break;
        default:
          mcc_la1[91] = mcc_gen;
          goto label_7;
        }
        mcc_consume_token(250);
        var_ref = mcc_consume_token(VARIABLE_REF);
                                     into.AddElement(CreateVariableRef(var_ref.image));
      }label_7: ;
      
      break;
    default:
      mcc_la1[92] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

// An element to insert, either an expression or DEFAULT for the default
// element.
  public Object InsertElement() {
  Expression e;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SQLDEFAULT:
      mcc_consume_token(SQLDEFAULT);
                            {return "DEFAULT";}
      break;
    case ADD:
    case SUBTRACT:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case SELECT:
    case IF:
    case NEW:
    case TRIM:
    case USER:
    case CAST:
    case NAME:
    case COUNT:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case EXISTS:
    case UNIQUE:
    case ACCOUNT:
    case PASSWORD:
    case EXTRACT:
    case IDENTITY:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case DATE:
    case TIME:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case INTERVAL:
    case TIMESTAMP:
    case CURRENT_TIME:
    case CURRENT_DATE:
    case CURRENT_TIMESTAMP:
    case DBTIMEZONE:
    case NOT:
    case NUMBER_LITERAL:
    case STRING_LITERAL:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
    case NAMED_PARAMETER:
    case PARAMETER_REF:
    case VARIABLE_REF:
    case 248:
      e = DoExpression();
                            {return e;}
      break;
    default:
      mcc_la1[93] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public ArrayList InsertExpressionList() {
  ArrayList list = new ArrayList();
  Object elem;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ADD:
    case SUBTRACT:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case SELECT:
    case IF:
    case NEW:
    case TRIM:
    case USER:
    case CAST:
    case NAME:
    case COUNT:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case EXISTS:
    case UNIQUE:
    case ACCOUNT:
    case SQLDEFAULT:
    case PASSWORD:
    case EXTRACT:
    case IDENTITY:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case DATE:
    case TIME:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case INTERVAL:
    case TIMESTAMP:
    case CURRENT_TIME:
    case CURRENT_DATE:
    case CURRENT_TIMESTAMP:
    case DBTIMEZONE:
    case NOT:
    case NUMBER_LITERAL:
    case STRING_LITERAL:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
    case NAMED_PARAMETER:
    case PARAMETER_REF:
    case VARIABLE_REF:
    case 248:
      elem = InsertElement();
                             list.Add(elem);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 250:
          ;
          break;
        default:
          mcc_la1[94] = mcc_gen;
          goto label_8;
        }
        mcc_consume_token(250);
        elem = InsertElement();
                                   list.Add(elem);
      }label_8: ;
      
      break;
    default:
      mcc_la1[95] = mcc_gen;
      ;
      break;
    }
    {return list;}
    throw new Exception("Missing return statement in function");
  }

// The list of columns to insert formatted as; eg.  (9, 4), (3, 2), (9, 9), ....
  public void InsertDataList(ArrayList data_list) {
  ArrayList insert_vals;
    mcc_consume_token(248);
    insert_vals = InsertExpressionList();
    mcc_consume_token(249);
                                                   data_list.Add(insert_vals);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[96] = mcc_gen;
        goto label_9;
      }
      mcc_consume_token(250);
      mcc_consume_token(248);
      insert_vals = InsertExpressionList();
      mcc_consume_token(249);
                                                       data_list.Add(insert_vals);
    }label_9: ;
    
  }

// Returning true means distinct, false means all.
  public bool SetQuantifier() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DISTINCT:
      mcc_consume_token(DISTINCT);
                  {return true;}
      break;
    case ALL:
      mcc_consume_token(ALL);
                  {return false;}
      break;
    default:
      mcc_la1[97] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public void SelectColumnList(IList list) {
  SelectColumn col;
    col = SelectColumn();
                           list.Add(col);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[98] = mcc_gen;
        goto label_10;
      }
      mcc_consume_token(250);
      col = SelectColumn();
                               list.Add(col);
    }label_10: ;
    
  }

  public SelectColumn SelectColumn() {
  String alias = null;
  Token t;
  Expression exp;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ADD:
    case SUBTRACT:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case SELECT:
    case IF:
    case NEW:
    case TRIM:
    case USER:
    case CAST:
    case NAME:
    case COUNT:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case EXISTS:
    case UNIQUE:
    case ACCOUNT:
    case PASSWORD:
    case EXTRACT:
    case IDENTITY:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case DATE:
    case TIME:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case INTERVAL:
    case TIMESTAMP:
    case CURRENT_TIME:
    case CURRENT_DATE:
    case CURRENT_TIMESTAMP:
    case DBTIMEZONE:
    case NOT:
    case NUMBER_LITERAL:
    case STRING_LITERAL:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
    case NAMED_PARAMETER:
    case PARAMETER_REF:
    case VARIABLE_REF:
    case 248:
      exp = DoExpression();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case AS:
        mcc_consume_token(AS);
        break;
      default:
        mcc_la1[99] = mcc_gen;
        ;
        break;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case NAME:
      case ACTION:
      case GROUPS:
      case OPTION:
      case CSHARP:
      case ACCOUNT:
      case PASSWORD:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case QUOTED_VARIABLE:
      case IDENTIFIER:
        alias = TableAliasName();
        break;
      default:
        mcc_la1[100] = mcc_gen;
        ;
        break;
      }
      break;
    case STAR:
      mcc_consume_token(STAR);
               {return Sql.SelectColumn.Glob("*");}
      break;
    case GLOBVARIABLE:
      t = mcc_consume_token(GLOBVARIABLE);
                           {return Sql.SelectColumn.Glob(CaseCheck(t.image));}
      break;
    case QUOTEDGLOBVARIABLE:
      t = mcc_consume_token(QUOTEDGLOBVARIABLE);
                                 {return Sql.SelectColumn.Glob(CaseCheck(Parser.Util.AsNonQuotedRef(t)));}
      break;
    default:
      mcc_la1[101] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return new SelectColumn(exp, alias);}
    throw new Exception("Missing return statement in function");
  }

  public void SelectGroupByList(IList list) {
  ByColumn col;
  Expression exp;
    exp = DoExpression();
                           col = new ByColumn(exp);
                           list.Add(col);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[102] = mcc_gen;
        goto label_11;
      }
      mcc_consume_token(250);
      exp = DoExpression();
                               col = new ByColumn(exp);
                               list.Add(col);
    }label_11: ;
    
  }

/**
 * NOTE: This is an extension, allows for us to specify a column to return the
 *  max value for each row representing a group.
 */
  public VariableName GroupMaxColumn() {
  VariableName var;
    var = ColumnNameVariable();
    {return var;}
    throw new Exception("Missing return statement in function");
  }

  public void SelectOrderByList(IList list) {
  ByColumn col;
  Expression exp;
  bool ascending = true;
    exp = DoExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASC:
    case DESC:
      ascending = OrderingSpec();
      break;
    default:
      mcc_la1[103] = mcc_gen;
      ;
      break;
    }
                           col = new ByColumn(exp, ascending);
                           list.Add(col);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[104] = mcc_gen;
        goto label_12;
      }
      mcc_consume_token(250);
      exp = DoExpression();
                               ascending=true;
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ASC:
      case DESC:
        ascending = OrderingSpec();
        break;
      default:
        mcc_la1[105] = mcc_gen;
        ;
        break;
      }
                           col = new ByColumn(exp, ascending);
                           list.Add(col);
    }label_12: ;
    
  }

  public bool OrderingSpec() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASC:
      mcc_consume_token(ASC);
            {return true;}
      break;
    case DESC:
      mcc_consume_token(DESC);
                                      {return false;}
      break;
    default:
      mcc_la1[106] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return true;}
    throw new Exception("Missing return statement in function");
  }

  public void TableDeclaration(FromClause from_clause) {
  String table=null, declare_as = null;
  TableSelectExpression select_stmt = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case OLD:
    case NEW:
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
      table = TableName();
      break;
    case 248:
      mcc_consume_token(248);
      select_stmt = GetTableSelectExpression();
      mcc_consume_token(249);
      break;
    default:
      mcc_la1[107] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case AS:
    case OLD:
    case NEW:
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case AS:
        mcc_consume_token(AS);
        break;
      default:
        mcc_la1[108] = mcc_gen;
        ;
        break;
      }
      declare_as = TableName();
      break;
    default:
      mcc_la1[109] = mcc_gen;
      ;
      break;
    }
    from_clause.AddTableDeclaration(table, select_stmt, declare_as);
  }

  public void SelectTableList(FromClause from_clause) {
    TableDeclaration(from_clause);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LEFT:
    case JOIN:
    case RIGHT:
    case INNER:
    case 250:
      FromClauseJoin(from_clause);
      break;
    default:
      mcc_la1[110] = mcc_gen;
      ;
      break;
    }
  }

  public void FromClauseJoin(FromClause from_clause) {
  Expression on_expression;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 250:
      mcc_consume_token(250);
          from_clause.AddJoin(JoinType.Inner);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case OLD:
      case NEW:
      case NAME:
      case ACTION:
      case GROUPS:
      case OPTION:
      case CSHARP:
      case ACCOUNT:
      case PASSWORD:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case QUOTED_VARIABLE:
      case IDENTIFIER:
      case DOT_DELIMINATED_REF:
      case QUOTED_DELIMINATED_REF:
      case 248:
        SelectTableList(from_clause);
        break;
      default:
        mcc_la1[111] = mcc_gen;
        ;
        break;
      }
      break;
    case JOIN:
    case INNER:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case INNER:
        mcc_consume_token(INNER);
        break;
      default:
        mcc_la1[112] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(JOIN);
      TableDeclaration(from_clause);
      mcc_consume_token(ON);
      on_expression = DoExpression();
          from_clause.AddPreviousJoin(JoinType.Inner, on_expression);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LEFT:
      case JOIN:
      case RIGHT:
      case INNER:
      case 250:
        FromClauseJoin(from_clause);
        break;
      default:
        mcc_la1[113] = mcc_gen;
        ;
        break;
      }
      break;
    case LEFT:
      mcc_consume_token(LEFT);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case OUTER:
        mcc_consume_token(OUTER);
        break;
      default:
        mcc_la1[114] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(JOIN);
      TableDeclaration(from_clause);
      mcc_consume_token(ON);
      on_expression = DoExpression();
          from_clause.AddPreviousJoin(JoinType.Left, on_expression);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LEFT:
      case JOIN:
      case RIGHT:
      case INNER:
      case 250:
        FromClauseJoin(from_clause);
        break;
      default:
        mcc_la1[115] = mcc_gen;
        ;
        break;
      }
      break;
    case RIGHT:
      mcc_consume_token(RIGHT);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case OUTER:
        mcc_consume_token(OUTER);
        break;
      default:
        mcc_la1[116] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(JOIN);
      TableDeclaration(from_clause);
      mcc_consume_token(ON);
      on_expression = DoExpression();
          from_clause.AddPreviousJoin(JoinType.Right, on_expression);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LEFT:
      case JOIN:
      case RIGHT:
      case INNER:
      case 250:
        FromClauseJoin(from_clause);
        break;
      default:
        mcc_la1[117] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[118] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

// A list of parameters in a function or procedure declaration.  For example,
// ' p1 NUMERIC, p2 NUMERIC, s1 CHARACTER VARYING '
// First array contains parameter names, and second contains TType representing
// the type.
  public void ProcParameterList(ArrayList decl_names, ArrayList decl_types) {
  String name;
  TType type;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case LONG:
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case IDENTITY:
    case LANGUAGE:
    case CHARACTER:
    case PRIVILEGES:
    case BIT:
    case DAY:
    case INT:
    case REAL:
    case CLOB:
    case BLOB:
    case CHAR:
    case TEXT:
    case DATE:
    case TIME:
    case YEAR:
    case HOUR:
    case FLOAT:
    case MONTH:
    case SECOND:
    case MINUTE:
    case BIGINT:
    case DOUBLE:
    case STRING:
    case BINARY:
    case OBJECT:
    case NUMERIC:
    case DECIMAL:
    case BOOLEAN:
    case TINYINT:
    case INTEGER:
    case VARCHAR:
    case SMALLINT:
    case INTERVAL:
    case VARBINARY:
    case TIMESTAMP:
    case LONGVARCHAR:
    case LONGVARBINARY:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
      name = null;
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case NAME:
      case ACTION:
      case GROUPS:
      case OPTION:
      case CSHARP:
      case ACCOUNT:
      case PASSWORD:
      case LANGUAGE:
      case PRIVILEGES:
      case DAY:
      case YEAR:
      case HOUR:
      case MONTH:
      case SECOND:
      case MINUTE:
      case QUOTED_VARIABLE:
      case IDENTIFIER:
        name = ProcArgumentName();
        break;
      default:
        mcc_la1[119] = mcc_gen;
        ;
        break;
      }
      type = GetTType();
                                                          decl_names.Add(name);
                                                          decl_types.Add(type);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 250:
          ;
          break;
        default:
          mcc_la1[120] = mcc_gen;
          goto label_13;
        }
        mcc_consume_token(250);
              name = null;
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case NAME:
        case ACTION:
        case GROUPS:
        case OPTION:
        case CSHARP:
        case ACCOUNT:
        case PASSWORD:
        case LANGUAGE:
        case PRIVILEGES:
        case DAY:
        case YEAR:
        case HOUR:
        case MONTH:
        case SECOND:
        case MINUTE:
        case QUOTED_VARIABLE:
        case IDENTIFIER:
          name = ProcArgumentName();
          break;
        default:
          mcc_la1[121] = mcc_gen;
          ;
          break;
        }
        type = GetTType();
                                                            decl_names.Add(name);
                                                            decl_types.Add(type);
      }label_13: ;
      
      break;
    default:
      mcc_la1[122] = mcc_gen;
      ;
      break;
    }
  }

// The ' set a = (a * 9), b = concat(b, "aa") ' part of the 'update', 'insert' statement
  public void AssignmentList(IList assignment_list) {
  String column;
  Expression exp;
    column = ColumnName();
    mcc_consume_token(ASSIGNMENT);
    exp = DoExpression();
      assignment_list.Add(new Assignment(VariableName.Resolve(column), exp));
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 250:
      mcc_consume_token(250);
      AssignmentList(assignment_list);
      break;
    default:
      mcc_la1[123] = mcc_gen;
      ;
      break;
    }
  }

// Parses a list of column declarations.  eg. ' id NUMERIC(5, 20), number VARCHAR(90), ... '
// and also any constraints.
  public void ColumnDeclarationList(ArrayList column_list, ArrayList constraint_list) {
    mcc_consume_token(248);
    ColumnOrConstraintDefinition(column_list, constraint_list);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[124] = mcc_gen;
        goto label_14;
      }
      mcc_consume_token(250);
      ColumnOrConstraintDefinition(column_list, constraint_list);
    }label_14: ;
    
    mcc_consume_token(249);
  }

  public void ColumnOrConstraintDefinition(ArrayList column_list, ArrayList constraint_list) {
  SqlColumn coldef = null;
  SqlConstraint condef = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
      coldef = ColumnDefinition();
                                              column_list.Add(coldef);
      break;
    case CHECK:
    case UNIQUE:
    case CONSTRAINT:
    case PRIMARY:
    case FOREIGN:
      condef = TableConstraintDefinition();
                                              constraint_list.Add(condef);
      break;
    default:
      mcc_la1[125] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public SqlColumn ColumnDefinition() {
  SqlColumn column = new SqlColumn(true);
  Token t;
  Token col_constraint;
  Expression default_exp;
  String col_name;
    col_name = ColumnName();
                              column.SetName(col_name);
    ColumnDataType(column);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SQLDEFAULT:
      mcc_consume_token(SQLDEFAULT);
      default_exp = DoExpression();
                                                  column.Default = default_exp;
      break;
    default:
      mcc_la1[126] = mcc_gen;
      ;
      break;
    }
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case NULL_LITERAL:
      case UNIQUE:
      case PRIMARY:
      case NOT:
        ;
        break;
      default:
        mcc_la1[127] = mcc_gen;
        goto label_15;
      }
      ColumnConstraint(column);
    }label_15: ;
    
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INDEX_NONE:
    case INDEX_BLIST:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case INDEX_BLIST:
        t = mcc_consume_token(INDEX_BLIST);
        break;
      case INDEX_NONE:
        t = mcc_consume_token(INDEX_NONE);
        break;
      default:
        mcc_la1[128] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                             column.SetIndex(t);
      break;
    default:
      mcc_la1[129] = mcc_gen;
      ;
      break;
    }
    {return column;}
    throw new Exception("Missing return statement in function");
  }

// Constraint on a column, eg. 'NOT NULL', 'NULL', 'PRIMARY KEY', 'UNIQUE', etc.
  public void ColumnConstraint(SqlColumn column) {
  Token t;
  String table_name;
  ArrayList col_list = new ArrayList();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NOT:
      mcc_consume_token(NOT);
      mcc_consume_token(NULL_LITERAL);
                                column.AddConstraint("NOT NULL");
      break;
    case NULL_LITERAL:
      mcc_consume_token(NULL_LITERAL);
                         column.AddConstraint("NULL");
      break;
    case PRIMARY:
      mcc_consume_token(PRIMARY);
      mcc_consume_token(KEY);
                          column.AddConstraint("PRIMARY");
      break;
    case UNIQUE:
      mcc_consume_token(UNIQUE);
                   column.AddConstraint("UNIQUE");
      break;
    default:
      mcc_la1[130] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public CollationStrength GetCollateStrength() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case PRIMARY_STRENGTH:
      mcc_consume_token(PRIMARY_STRENGTH);
                              {return CollationStrength.Primary;}
      break;
    case SECONDARY_STRENGTH:
      mcc_consume_token(SECONDARY_STRENGTH);
                              {return CollationStrength.Secondary;}
      break;
    case TERTIARY_STRENGTH:
      mcc_consume_token(TERTIARY_STRENGTH);
                              {return CollationStrength.Tertiary;}
      break;
    case IDENTICAL_STRENGTH:
      mcc_consume_token(IDENTICAL_STRENGTH);
                              {return CollationStrength.Identical;}
      break;
    default:
      mcc_la1[131] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public CollationDecomposition GetCollateDecomposition() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NO_DECOMPOSITION:
      mcc_consume_token(NO_DECOMPOSITION);
                                  {return CollationDecomposition.None;}
      break;
    case CANONICAL_DECOMPOSITION:
      mcc_consume_token(CANONICAL_DECOMPOSITION);
                                  {return CollationDecomposition.Canonical;}
      break;
    case FULL_DECOMPOSITION:
      mcc_consume_token(FULL_DECOMPOSITION);
                                  {return CollationDecomposition.Full;}
      break;
    default:
      mcc_la1[132] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public SqlType GetStringSQLType() {
    if (mcc_2_3(2)) {
      mcc_consume_token(CHARACTER);
      mcc_consume_token(VARYING);
                                             {return SqlType.VarChar;}
    } else if (mcc_2_4(3)) {
      mcc_consume_token(LONG);
      mcc_consume_token(CHARACTER);
      mcc_consume_token(VARYING);
                                                    {return SqlType.LongVarChar;}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case TEXT:
      case STRING:
      case LONGVARCHAR:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case TEXT:
          mcc_consume_token(TEXT);
          break;
        case STRING:
          mcc_consume_token(STRING);
          break;
        case LONGVARCHAR:
          mcc_consume_token(LONGVARCHAR);
          break;
        default:
          mcc_la1[133] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
                                            {return SqlType.LongVarChar;}
        break;
      case CHARACTER:
      case CHAR:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case CHAR:
          mcc_consume_token(CHAR);
          break;
        case CHARACTER:
          mcc_consume_token(CHARACTER);
          break;
        default:
          mcc_la1[134] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
                               {return SqlType.Char;}
        break;
      case VARCHAR:
        mcc_consume_token(VARCHAR);
                {return SqlType.VarChar;}
        break;
      case CLOB:
        mcc_consume_token(CLOB);
             {return SqlType.Clob;}
        break;
      default:
        mcc_la1[135] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public SqlType GetNumericSQLType() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INT:
    case INTEGER:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case INT:
        mcc_consume_token(INT);
        break;
      case INTEGER:
        mcc_consume_token(INTEGER);
        break;
      default:
        mcc_la1[136] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
                            {return SqlType.Integer;}
      break;
    case TINYINT:
      mcc_consume_token(TINYINT);
                {return SqlType.TinyInt;}
      break;
    case SMALLINT:
      mcc_consume_token(SMALLINT);
                 {return SqlType.SmallInt;}
      break;
    case BIGINT:
      mcc_consume_token(BIGINT);
               {return SqlType.BigInt;}
      break;
    case FLOAT:
      mcc_consume_token(FLOAT);
              {return SqlType.Float;}
      break;
    case REAL:
      mcc_consume_token(REAL);
             {return SqlType.Real;}
      break;
    case DOUBLE:
      mcc_consume_token(DOUBLE);
               {return SqlType.Double;}
      break;
    case NUMERIC:
      mcc_consume_token(NUMERIC);
                {return SqlType.Numeric;}
      break;
    case DECIMAL:
      mcc_consume_token(DECIMAL);
                {return SqlType.Decimal;}
      break;
    default:
      mcc_la1[137] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public SqlType GetBooleanSQLType() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case BOOLEAN:
      mcc_consume_token(BOOLEAN);
      break;
    case BIT:
      mcc_consume_token(BIT);
      break;
    default:
      mcc_la1[138] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
                          {return SqlType.Boolean;}
    throw new Exception("Missing return statement in function");
  }

  public SqlType GetDateSQLType() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case TIMESTAMP:
      mcc_consume_token(TIMESTAMP);
                  {return SqlType.TimeStamp;}
      break;
    case TIME:
      mcc_consume_token(TIME);
             {return SqlType.Time;}
      break;
    case DATE:
      mcc_consume_token(DATE);
             {return SqlType.Date;}
      break;
    default:
      mcc_la1[139] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public SqlType GetBinarySQLType() {
    if (mcc_2_5(2)) {
      mcc_consume_token(BINARY);
      mcc_consume_token(VARYING);
                                          {return SqlType.VarBinary;}
    } else if (mcc_2_6(3)) {
      mcc_consume_token(LONG);
      mcc_consume_token(BINARY);
      mcc_consume_token(VARYING);
                                                 {return SqlType.LongVarBinary;}
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LONGVARBINARY:
        mcc_consume_token(LONGVARBINARY);
                      {return SqlType.LongVarBinary;}
        break;
      case VARBINARY:
        mcc_consume_token(VARBINARY);
                  {return SqlType.VarBinary;}
        break;
      case BINARY:
        mcc_consume_token(BINARY);
               {return SqlType.Binary;}
        break;
      case BLOB:
        mcc_consume_token(BLOB);
             {return SqlType.Blob;}
        break;
      default:
        mcc_la1[140] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Exception("Missing return statement in function");
  }

  public SqlType GetIntervalSQLType() {
  SqlType sqlType = SqlType.Interval;
    mcc_consume_token(INTERVAL);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DAY:
    case YEAR:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case YEAR:
        mcc_consume_token(YEAR);
        mcc_consume_token(TO);
        mcc_consume_token(MONTH);
                              sqlType = SqlType.YearToMonth;
        break;
      case DAY:
        mcc_consume_token(DAY);
        mcc_consume_token(TO);
        mcc_consume_token(SECOND);
                              sqlType = SqlType.DayToSecond;
        break;
      default:
        mcc_la1[141] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[142] = mcc_gen;
      ;
      break;
    }
    {return sqlType;}
    throw new Exception("Missing return statement in function");
  }

  public SqlType GetIdentitySQLType() {
    mcc_consume_token(IDENTITY);
                 {return SqlType.Identity;}
    throw new Exception("Missing return statement in function");
  }

// Parses an SQL type and forms a TType object.  For example, "CHAR(500)" is
// parsed to a TStringType with a maximum size of 500 and lexicographical
// collation.
  public TType GetTType() {
  Token t;
  SqlType data_type;
  int size = -1;
  int scale = -1;
  Token class_tok = null;
  CollationStrength strength = CollationStrength.None;
  CollationDecomposition decomposition = CollationDecomposition.None;
  String loc = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case OBJECT:
      mcc_consume_token(OBJECT);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 248:
        mcc_consume_token(248);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DOT_DELIMINATED_REF:
          class_tok = mcc_consume_token(DOT_DELIMINATED_REF);
          break;
        case OBJECT_ARRAY_REF:
          class_tok = mcc_consume_token(OBJECT_ARRAY_REF);
          break;
        default:
          mcc_la1[143] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        mcc_consume_token(249);
        break;
      default:
        mcc_la1[144] = mcc_gen;
        ;
        break;
      }
        String class_str = "System.Object";
        if (class_tok != null) {
          class_str = class_tok.image;
        }
        {return TType.GetObjectType(class_str);}
      break;
    default:
      mcc_la1[152] = mcc_gen;
      if (mcc_2_7(2147483647)) {
        data_type = GetStringSQLType();
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 248:
          mcc_consume_token(248);
          size = PositiveIntegerConstant();
          mcc_consume_token(249);
          break;
        default:
          mcc_la1[145] = mcc_gen;
          ;
          break;
        }
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COLLATE:
          mcc_consume_token(COLLATE);
          t = mcc_consume_token(STRING_LITERAL);
                                       loc = ((TObject) Parser.Util.ToParamObject(t, case_insensitive_identifiers)).ToString();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case PRIMARY_STRENGTH:
          case SECONDARY_STRENGTH:
          case TERTIARY_STRENGTH:
          case IDENTICAL_STRENGTH:
            strength = GetCollateStrength();
            break;
          default:
            mcc_la1[146] = mcc_gen;
            ;
            break;
          }
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case NO_DECOMPOSITION:
          case CANONICAL_DECOMPOSITION:
          case FULL_DECOMPOSITION:
            decomposition = GetCollateDecomposition();
            break;
          default:
            mcc_la1[147] = mcc_gen;
            ;
            break;
          }
          break;
        default:
          mcc_la1[148] = mcc_gen;
          ;
          break;
        }
        {return TType.GetStringType(data_type, size, loc, strength, decomposition);}
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case IDENTITY:
          data_type = GetIdentitySQLType();
        {return TType.GetNumericType(data_type, -1, -1);}
          break;
        case INT:
        case REAL:
        case FLOAT:
        case BIGINT:
        case DOUBLE:
        case NUMERIC:
        case DECIMAL:
        case TINYINT:
        case INTEGER:
        case SMALLINT:
          data_type = GetNumericSQLType();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case 248:
            mcc_consume_token(248);
            size = PositiveIntegerConstant();
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case 250:
              mcc_consume_token(250);
              scale = PositiveIntegerConstant();
              break;
            default:
              mcc_la1[149] = mcc_gen;
              ;
              break;
            }
            mcc_consume_token(249);
            break;
          default:
            mcc_la1[150] = mcc_gen;
            ;
            break;
          }
        {return TType.GetNumericType(data_type, size, scale);}
          break;
        case BIT:
        case BOOLEAN:
          data_type = GetBooleanSQLType();
        {return TType.GetBooleanType(data_type);}
          break;
        case DATE:
        case TIME:
        case TIMESTAMP:
          data_type = GetDateSQLType();
        {return TType.GetDateType(data_type);}
          break;
        case LONG:
        case BLOB:
        case BINARY:
        case VARBINARY:
        case LONGVARBINARY:
          data_type = GetBinarySQLType();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case 248:
            mcc_consume_token(248);
            size = PositiveIntegerConstant();
            mcc_consume_token(249);
            break;
          default:
            mcc_la1[151] = mcc_gen;
            ;
            break;
          }
        {return TType.GetBinaryType(data_type, size);}
          break;
        case INTERVAL:
          data_type = GetIntervalSQLType();
        {return TType.GetIntervalType(data_type);}
          break;
        default:
          mcc_la1[153] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
    throw new Exception("Missing return statement in function");
  }

// Data type of a SqlColumn (eg. "varchar(50)", etc)
  public void ColumnDataType(SqlColumn column) {
  TType type;
    type = GetTType();
                      column.SetType(type);
  }

  public SqlConstraint TableConstraintDefinition() {
  SqlConstraint constraint = null;
  ArrayList column_list = new ArrayList();
  ArrayList column_list2 = new ArrayList();
  String constraint_name = null;
  ConstraintAction update_rule = ConstraintAction.NoAction;
  ConstraintAction delete_rule = ConstraintAction.NoAction;
  Expression expression;
  String name;
  String reference_table;
  Token t;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case CONSTRAINT:
      mcc_consume_token(CONSTRAINT);
      constraint_name = ConstraintName();
      break;
    default:
      mcc_la1[154] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case PRIMARY:
      mcc_consume_token(PRIMARY);
      mcc_consume_token(KEY);
      mcc_consume_token(248);
      BasicColumnList(column_list);
      mcc_consume_token(249);
                                                               constraint = SqlConstraint.PrimaryKey((string[])column_list.ToArray(typeof(string)));
      break;
    case UNIQUE:
      mcc_consume_token(UNIQUE);
      mcc_consume_token(248);
      BasicColumnList(column_list);
      mcc_consume_token(249);
                                                             constraint = SqlConstraint.Unique((string[])column_list.ToArray(typeof(string)));
      break;
    case CHECK:
      mcc_consume_token(CHECK);
      mcc_consume_token(248);
      expression = DoExpression();
      mcc_consume_token(249);
                                                             constraint = SqlConstraint.Check(expression);
      break;
    case FOREIGN:
      mcc_consume_token(FOREIGN);
      mcc_consume_token(KEY);
      mcc_consume_token(248);
      BasicColumnList(column_list);
      mcc_consume_token(249);
      mcc_consume_token(REFERENCES);
      reference_table = TableName();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 248:
        mcc_consume_token(248);
        BasicColumnList(column_list2);
        mcc_consume_token(249);
        break;
      default:
        mcc_la1[155] = mcc_gen;
        ;
        break;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ON:
        if (mcc_2_8(2)) {
          mcc_consume_token(ON);
          mcc_consume_token(DELETE);
          delete_rule = ReferentialTrigger();
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case ON:
            mcc_consume_token(ON);
            mcc_consume_token(UPDATE);
            update_rule = ReferentialTrigger();
            break;
          default:
            mcc_la1[156] = mcc_gen;
            ;
            break;
          }
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case ON:
            mcc_consume_token(ON);
            mcc_consume_token(UPDATE);
            update_rule = ReferentialTrigger();
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case ON:
              mcc_consume_token(ON);
              mcc_consume_token(DELETE);
              delete_rule = ReferentialTrigger();
              break;
            default:
              mcc_la1[157] = mcc_gen;
              ;
              break;
            }
            break;
          default:
            mcc_la1[158] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        mcc_la1[159] = mcc_gen;
        ;
        break;
      }
          constraint = SqlConstraint.ForeignKey(reference_table, (string[])column_list.ToArray(typeof(string)), (string[])column_list2.ToArray(typeof(string)), delete_rule, update_rule);
      break;
    default:
      mcc_la1[160] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INITIALLY:
    case DEFERRABLE:
    case NOT:
      ConstraintAttributes(constraint);
      break;
    default:
      mcc_la1[161] = mcc_gen;
      ;
      break;
    }
    if (constraint_name != null) constraint.Name = constraint_name;
    {return constraint;}
    throw new Exception("Missing return statement in function");
  }

  public ConstraintAction ReferentialTrigger() {
  Token t;
  ConstraintAction action;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NO:
      mcc_consume_token(NO);
      mcc_consume_token(ACTION);
                                          action = ConstraintAction.NoAction;
      break;
    case RESTRICT:
      mcc_consume_token(RESTRICT);
                                          action = ConstraintAction.NoAction;
      break;
    case CASCADE:
      mcc_consume_token(CASCADE);
                                          action = ConstraintAction.Cascade;
      break;
    default:
      mcc_la1[162] = mcc_gen;
      if (mcc_2_9(2)) {
        mcc_consume_token(SET);
        mcc_consume_token(NULL_LITERAL);
                                          action = ConstraintAction.SetNull;
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case SET:
          mcc_consume_token(SET);
          mcc_consume_token(SQLDEFAULT);
                                          action = ConstraintAction.SetDefault;
          break;
        default:
          mcc_la1[163] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
    {return action;}
    throw new Exception("Missing return statement in function");
  }

  public void ConstraintAttributes(SqlConstraint constraint) {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INITIALLY:
      mcc_consume_token(INITIALLY);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DEFERRED:
        mcc_consume_token(DEFERRED);
                                      constraint.SetInitiallyDeferred();
        break;
      case IMMEDIATE:
        mcc_consume_token(IMMEDIATE);
        break;
      default:
        mcc_la1[164] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DEFERRABLE:
      case NOT:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case NOT:
          mcc_consume_token(NOT);
          mcc_consume_token(DEFERRABLE);
                                  constraint.SetNotDeferrable();
          break;
        case DEFERRABLE:
          mcc_consume_token(DEFERRABLE);
          break;
        default:
          mcc_la1[165] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[166] = mcc_gen;
        ;
        break;
      }
      break;
    case DEFERRABLE:
    case NOT:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case NOT:
        mcc_consume_token(NOT);
        mcc_consume_token(DEFERRABLE);
                                constraint.SetNotDeferrable();
        break;
      case DEFERRABLE:
        mcc_consume_token(DEFERRABLE);
        break;
      default:
        mcc_la1[167] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case INITIALLY:
        mcc_consume_token(INITIALLY);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DEFERRED:
          mcc_consume_token(DEFERRED);
                                        constraint.SetInitiallyDeferred();
          break;
        case IMMEDIATE:
          mcc_consume_token(IMMEDIATE);
          break;
        default:
          mcc_la1[168] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[169] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[170] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

// A list of column names
  public ArrayList BasicColumnList(ArrayList list) {
  String col_name;
    col_name = ColumnName();
                                  list.Add(col_name);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[171] = mcc_gen;
        goto label_16;
      }
      mcc_consume_token(250);
      col_name = ColumnName();
                                  list.Add(col_name);
    }label_16: ;
    
    {return list;}
    throw new Exception("Missing return statement in function");
  }

// A list of user names
  public ArrayList UserNameList(ArrayList list) {
  String username;
    username = UserName();
                                list.Add(username);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 250:
        ;
        break;
      default:
        mcc_la1[172] = mcc_gen;
        goto label_17;
      }
      mcc_consume_token(250);
      username = UserName();
                                list.Add(username);
    }label_17: ;
    
    {return list;}
    throw new Exception("Missing return statement in function");
  }

  public SearchExpression ConditionsExpression() {
  Expression exp;
    exp = DoExpression();
    {return new SearchExpression(exp);}
    throw new Exception("Missing return statement in function");
  }

  public Expression DoExpression() {
  Stack stack = new Stack();
  Expression exp = new Expression();
    expression(exp, stack);
    expEnd(exp, stack);
    // Normalize the expression (remove any NOT operators)
    Expression normalized_exp = Parser.Util.Normalize(exp);
    normalized_exp.CopyTextFrom(exp);
    {return normalized_exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression DoNonBooleanExpression() {
  Stack stack = new Stack();
  Expression exp = new Expression();
    nonBooleanExpression(exp, stack);
    expEnd(exp, stack);
    {return exp;}
    throw new Exception("Missing return statement in function");
  }

/**
 * Parse an expression.
 */
  public void expression(Expression exp, Stack stack) {
    Operand(exp, stack);
    while (true) {
      if (mcc_2_10(2)) {
        ;
      } else {
        goto label_18;
      }
      OpPart(exp, stack);
    }label_18: ;
    
  }

/**
 * Parses a non-bool expression.
 */
  public void nonBooleanExpression(Expression exp, Stack stack) {
    Operand(exp, stack);
    while (true) {
      if (mcc_2_11(2)) {
        ;
      } else {
        goto label_19;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case CONCAT:
        StringOperator(exp, stack);
        break;
      case STAR:
      case DIVIDE:
      case ADD:
      case SUBTRACT:
      case MODULUS:
        NumericOperator(exp, stack);
        break;
      default:
        mcc_la1[173] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      Operand(exp, stack);
    }label_19: ;
    
  }

  public void OpPart(Expression exp, Stack stack) {
  Token t;
//  SelectStatement select;
//  Expression[] exp_arr;
  Expression regex_expression;
  Object regex_ob;
    if (mcc_2_12(3)) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ASSIGNMENT:
      case EQUALS:
      case GR:
      case LE:
      case GREQ:
      case LEEQ:
      case NOTEQ:
      case IS:
      case SOUNDS:
      case LIKE:
      case AND:
      case OR:
      case NOT:
        BooleanOperator(exp, stack);
        break;
      case STAR:
      case DIVIDE:
      case ADD:
      case SUBTRACT:
      case MODULUS:
        NumericOperator(exp, stack);
        break;
      case CONCAT:
        StringOperator(exp, stack);
        break;
      default:
        mcc_la1[174] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      Operand(exp, stack);
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case REGEX_LITERAL:
      case REGEX:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case REGEX:
          mcc_consume_token(REGEX);
                    exp.Text.Append(" regex ");
                    expOperator(exp, stack, Operator.Get("regex"));
          expression(exp, stack);
          break;
        case REGEX_LITERAL:
          t = mcc_consume_token(REGEX_LITERAL);
                    regex_ob = Parser.Util.ToParamObject(t, case_insensitive_identifiers);
                    exp.Text.Append(" regex " + regex_ob);
                    expOperator(exp, stack, Operator.Get("regex"));
                    exp.AddElement(regex_ob);
          break;
        default:
          mcc_la1[175] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[176] = mcc_gen;
        if (mcc_2_13(2)) {
          SubQueryOperator(exp, stack);
          SubQueryExpression(exp, stack);
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case BETWEEN:
          case NOT:
            BetweenPredicate(exp, stack);
            break;
          default:
            mcc_la1[177] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      }
    }
  }

  public void Operand(Expression exp, Stack stack) {
  Token t, tt = null;
  FunctionDef f;
  Expression[] exp_list;
  String time_fname;
  bool negative = false;
  object param_ob;
  object param_resolve;
  VariableRef variable_ref;
  TableSelectExpression select_expression = null;
  string interval_form = "full";
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 248:
      mcc_consume_token(248);
            stack.Push(Operator.Get("(")); exp.Text.Append("(");
      expression(exp, stack);
      mcc_consume_token(249);
                                     expEndParen(exp, stack); exp.Text.Append(")");
      break;
    case PARAMETER_REF:
      t = mcc_consume_token(PARAMETER_REF);
            param_resolve = CreateSubstitution(t.image);
            exp.AddElement(param_resolve);
            exp.Text.Append('?');
      break;
    case NAMED_PARAMETER:
      t = mcc_consume_token(NAMED_PARAMETER);
            param_resolve = CreateSubstitution(t.image);
            exp.AddElement(param_resolve);
            exp.Text.Append(t.image);
      break;
    case VARIABLE_REF:
      t = mcc_consume_token(VARIABLE_REF);
            variable_ref = CreateVariableRef(t.image);
            exp.AddElement(variable_ref);
            exp.Text.Append(t.image);
      break;
    default:
      mcc_la1[188] = mcc_gen;
      if (mcc_2_14(2)) {
        mcc_consume_token(NOT);
        expOperator(exp, stack, Operator.Get("not"));
        exp.Text.Append(" not ");
        Operand(exp, stack);
      } else if (mcc_2_15(3)) {
        f = Function();
            exp.AddElement(f); exp.Text.Append(f);
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case DATE:
        case TIME:
        case TIMESTAMP:
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case DATE:
            tt = mcc_consume_token(DATE);
                    time_fname="DATEOB";
            break;
          case TIME:
            tt = mcc_consume_token(TIME);
                    time_fname="TIMEOB";
            break;
          case TIMESTAMP:
            tt = mcc_consume_token(TIMESTAMP);
                         time_fname="TIMESTAMPOB";
            break;
          default:
            mcc_la1[178] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
          t = mcc_consume_token(STRING_LITERAL);
      Object param_ob1 = Parser.Util.ToParamObject(t, case_insensitive_identifiers);
      exp_list = new Expression[] { new Expression(param_ob1) };
      f = Parser.Util.ResolveFunctionName(time_fname, exp_list);
      exp.AddElement(f);
      exp.Text.Append(tt.image).Append(" ").Append(t.image);
          break;
        case CURRENT_TIME:
        case CURRENT_DATE:
        case CURRENT_TIMESTAMP:
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case CURRENT_TIMESTAMP:
            tt = mcc_consume_token(CURRENT_TIMESTAMP);
                                 time_fname="TIMESTAMPOB";
            break;
          case CURRENT_TIME:
            tt = mcc_consume_token(CURRENT_TIME);
                                 time_fname="TIMEOB";
            break;
          case CURRENT_DATE:
            tt = mcc_consume_token(CURRENT_DATE);
                                 time_fname="DATEOB";
            break;
          default:
            mcc_la1[179] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
      exp_list = new Expression[0];
      f = Parser.Util.ResolveFunctionName(time_fname, exp_list);
      exp.AddElement(f);
      exp.Text.Append(tt.image);
          break;
        case DBTIMEZONE:
          tt = mcc_consume_token(DBTIMEZONE);
                       time_fname="DBTIMEZONE";
       exp_list = new Expression[0];
       f = Parser.Util.ResolveFunctionName(time_fname, exp_list);
       exp.AddElement(f);
       exp.Text.Append(tt.image);
          break;
        case INTERVAL:
          mcc_consume_token(INTERVAL);
          t = mcc_consume_token(STRING_LITERAL);
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case DAY:
          case YEAR:
          case HOUR:
          case MONTH:
          case SECOND:
          case MINUTE:
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case YEAR:
              mcc_consume_token(YEAR);
               interval_form = "YEAR";
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case TO:
                mcc_consume_token(TO);
                mcc_consume_token(MONTH);
                                                          interval_form="YEAR TO MONTH";
                break;
              default:
                mcc_la1[180] = mcc_gen;
                ;
                break;
              }
              break;
            case MONTH:
              mcc_consume_token(MONTH);
                interval_form = "MONTH";
              break;
            case DAY:
              mcc_consume_token(DAY);
              interval_form = "DAY";
              switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
              case TO:
                mcc_consume_token(TO);
                mcc_consume_token(SECOND);
                                                         interval_form = "DAY TO SECOND";
                break;
              default:
                mcc_la1[181] = mcc_gen;
                ;
                break;
              }
              break;
            case HOUR:
              mcc_consume_token(HOUR);
               interval_form = "HOUR";
              break;
            case MINUTE:
              mcc_consume_token(MINUTE);
                 interval_form = "MINUTE";
              break;
            case SECOND:
              mcc_consume_token(SECOND);
                 interval_form = "SECOND";
              break;
            default:
              mcc_la1[182] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            mcc_la1[183] = mcc_gen;
            ;
            break;
          }
      object param_ob2 = Parser.Util.ToParamObject(t, case_insensitive_identifiers);
      exp_list = new Expression[2];
      exp_list[0] = new Expression(param_ob2);
      exp_list[1] = new Expression(TObject.CreateString(interval_form));
      f =  Parser.Util.ResolveFunctionName("intervalob", exp_list);
      exp.AddElement(f);
      exp.Text.Append("INTERVAL").Append(" ").Append(t.image).Append(" ").Append(interval_form);
          break;
        case EXISTS:
          mcc_consume_token(EXISTS);
          mcc_consume_token(248);
          select_expression = GetTableSelectExpression();
          mcc_consume_token(249);
      exp_list = new Expression[1];
      exp_list[0] = new Expression(select_expression);
      f = Parser.Util.ResolveFunctionName("sql_exists", exp_list);
      exp.AddElement(f);
      exp.Text.Append("EXISTS(").Append(select_expression.ToString()).Append(")");
          break;
        case UNIQUE:
          mcc_consume_token(UNIQUE);
          mcc_consume_token(248);
          select_expression = GetTableSelectExpression();
          mcc_consume_token(249);
      exp_list = new Expression[1];
      exp_list[0] = new Expression(select_expression);
      f = Parser.Util.ResolveFunctionName("sql_unique", exp_list);
      exp.AddElement(f);
      exp.Text.Append("UNIQUE(").Append(select_expression.ToString()).Append(")");
          break;
        case SELECT:
          select_expression = GetTableSelectExpression();
        exp.AddElement(select_expression);
        exp.Text.Append(select_expression.ToString());
          break;
        case NEW:
          mcc_consume_token(NEW);
          f = Instantiation();
            exp.AddElement(f); exp.Text.Append(f);
          break;
        case BOOLEAN_LITERAL:
        case NULL_LITERAL:
        case STRING_LITERAL:
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case STRING_LITERAL:
            t = mcc_consume_token(STRING_LITERAL);
            break;
          case BOOLEAN_LITERAL:
            t = mcc_consume_token(BOOLEAN_LITERAL);
            break;
          case NULL_LITERAL:
            t = mcc_consume_token(NULL_LITERAL);
            break;
          default:
            mcc_la1[184] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
          param_ob = Parser.Util.ToParamObject(t, case_insensitive_identifiers);
          exp.AddElement(param_ob);
          exp.Text.Append(t.image);
          break;
        case ADD:
        case SUBTRACT:
        case NAME:
        case ACTION:
        case GROUPS:
        case OPTION:
        case CSHARP:
        case ACCOUNT:
        case PASSWORD:
        case LANGUAGE:
        case PRIVILEGES:
        case DAY:
        case YEAR:
        case HOUR:
        case MONTH:
        case SECOND:
        case MINUTE:
        case NUMBER_LITERAL:
        case QUOTED_VARIABLE:
        case IDENTIFIER:
        case DOT_DELIMINATED_REF:
        case QUOTED_DELIMINATED_REF:
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case ADD:
          case SUBTRACT:
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case ADD:
              mcc_consume_token(ADD);
              break;
            case SUBTRACT:
              mcc_consume_token(SUBTRACT);
                               negative = true;
              break;
            default:
              mcc_la1[185] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            mcc_la1[186] = mcc_gen;
            ;
            break;
          }
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case NUMBER_LITERAL:
            t = mcc_consume_token(NUMBER_LITERAL);
            break;
          case QUOTED_VARIABLE:
            t = mcc_consume_token(QUOTED_VARIABLE);
            break;
          case DOT_DELIMINATED_REF:
            t = mcc_consume_token(DOT_DELIMINATED_REF);
            break;
          case QUOTED_DELIMINATED_REF:
            t = mcc_consume_token(QUOTED_DELIMINATED_REF);
            break;
          case NAME:
          case ACTION:
          case GROUPS:
          case OPTION:
          case CSHARP:
          case ACCOUNT:
          case PASSWORD:
          case LANGUAGE:
          case PRIVILEGES:
          case DAY:
          case YEAR:
          case HOUR:
          case MONTH:
          case SECOND:
          case MINUTE:
          case IDENTIFIER:
            t = SQLIdentifier();
            break;
          default:
            mcc_la1[187] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
          if (t.kind == SQLConstants.NUMBER_LITERAL) {
            param_ob = Parser.Util.ParseNumberToken(t, negative);
            exp.AddElement(param_ob);
          }
          else {
            param_ob = Parser.Util.ToParamObject(t, case_insensitive_identifiers);
            if (negative) {
              exp.AddElement(Parser.Util.Zero);
              exp.AddElement(param_ob);
              exp.AddElement(Operator.Get("-"));
            }
            else {
              exp.AddElement(param_ob);
            }
          }
          if (negative) {
            exp.Text.Append('-');
          }
          exp.Text.Append(t.image);
          break;
        default:
          mcc_la1[189] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
  }

  public void SubQueryExpression(Expression exp, Stack stack) {
  TableSelectExpression select;
  Expression[] exp_arr;
    mcc_consume_token(248);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SELECT:
      select = GetTableSelectExpression();
        exp.AddElement(select);
        exp.Text.Append(" [SELECT]");
      break;
    default:
      mcc_la1[190] = mcc_gen;
      exp_arr = ExpressionList();
        exp.AddElement(Parser.Util.ToArrayParamObject(exp_arr));
        exp.Text.Append(" (" + Parser.Util.ExpressionListToString(exp_arr) + ")");
      break;
    }
    mcc_consume_token(249);
  }

// Parses a simple positive integer constant.
  public int PositiveIntegerConstant() {
  Token t;
    t = mcc_consume_token(NUMBER_LITERAL);
    int val = Int32.Parse(t.image);
    if (val < 0) {throw GenerateParseException();}
    {return val;}
    throw new Exception("Missing return statement in function");
  }

  public void SubQueryOperator(Expression exp, Stack stack) {
  Token t;
  String op_string;
  String query_type = "SINGLE";
  Operator op;
    if (mcc_2_16(2)) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case IN:
        mcc_consume_token(IN);
                              op = Operator.Get("IN");
        break;
      case NOT:
        mcc_consume_token(NOT);
        mcc_consume_token(IN);
                                    op = Operator.Get("NOT IN");
        break;
      default:
        mcc_la1[191] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ASSIGNMENT:
      case EQUALS:
      case GR:
      case LE:
      case GREQ:
      case LEEQ:
      case NOTEQ:
        op_string = GetSubQueryBooleanOperator();
                                                    op = Operator.Get(op_string);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case ALL:
        case ANY:
        case SOME:
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case ANY:
            t = mcc_consume_token(ANY);
            break;
          case ALL:
            t = mcc_consume_token(ALL);
            break;
          case SOME:
            t = mcc_consume_token(SOME);
            break;
          default:
            mcc_la1[192] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
                                         query_type=t.image;
          break;
        default:
          mcc_la1[193] = mcc_gen;
          ;
          break;
        }
      op = op.GetSubQueryForm(query_type);
        break;
      default:
        mcc_la1[194] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
    expOperator(exp, stack, op);
    exp.Text.Append(" " + op + " ");
  }

  public void BetweenPredicate(Expression exp, Stack stack) {
  bool not_s = false;
  Expression exp1, exp2;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NOT:
      mcc_consume_token(NOT);
              not_s = true;
      break;
    default:
      mcc_la1[195] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(BETWEEN);
    exp1 = DoNonBooleanExpression();
    mcc_consume_token(AND);
    exp2 = DoNonBooleanExpression();
    // Flush the operator stack to precedence 8
    flushOperatorStack(exp, stack, 8);
    // Get the end expression
    Expression end_exp = exp.EndExpression;
    if (not_s) {
      exp.Concat(exp1);
      exp.AddElement(Operator.Get("<"));
      exp.Concat(end_exp);
      exp.Concat(exp2);
      exp.AddElement(Operator.Get(">"));
      exp.AddElement(Operator.Get("or"));
      exp.Text.Append(" not between ");
    }
    else {
      exp.Concat(exp1);
      exp.AddElement(Operator.Get(">="));
      exp.Concat(end_exp);
      exp.Concat(exp2);
      exp.AddElement(Operator.Get("<="));
      exp.AddElement(Operator.Get("and"));
      exp.Text.Append(" between ");
    }
    exp.Text.Append(exp1.Text.ToString());
    exp.Text.Append(" and ");
    exp.Text.Append(exp2.Text.ToString());
  }

  public void BooleanOperator(Expression exp, Stack stack) {
  Token t;
  String op_string;
  Operator op;
    op_string = GetBooleanOperator();
                                         op = Operator.Get(op_string);
    expOperator(exp, stack, op);
    exp.Text.Append(" " + op + " ");
  }

  public void NumericOperator(Expression exp, Stack stack) {
  Token t;
  String op_string;
  Operator op;
    op_string = GetNumericOperator();
                                         op = Operator.Get(op_string);
    expOperator(exp, stack, op);
    exp.Text.Append(" " + op + " ");
  }

  public void StringOperator(Expression exp, Stack stack) {
  Token t;
  String op_string;
  Operator op;
    op_string = GetStringOperator();
                                        op = Operator.Get(op_string);
    expOperator(exp, stack, op);
    exp.Text.Append(" " + op + " ");
  }

  public String GetBooleanOperator() {
  Token t;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASSIGNMENT:
      t = mcc_consume_token(ASSIGNMENT);
      break;
    case EQUALS:
      t = mcc_consume_token(EQUALS);
      break;
    case GR:
      t = mcc_consume_token(GR);
      break;
    case LE:
      t = mcc_consume_token(LE);
      break;
    case GREQ:
      t = mcc_consume_token(GREQ);
      break;
    case LEEQ:
      t = mcc_consume_token(LEEQ);
      break;
    case NOTEQ:
      t = mcc_consume_token(NOTEQ);
      break;
    default:
      mcc_la1[196] = mcc_gen;
      if (mcc_2_17(2)) {
        mcc_consume_token(IS);
        mcc_consume_token(NOT);
                                {return "IS NOT";}
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case IS:
          t = mcc_consume_token(IS);
          break;
        case LIKE:
          t = mcc_consume_token(LIKE);
          break;
        case NOT:
          mcc_consume_token(NOT);
          mcc_consume_token(LIKE);
                                {return "NOT LIKE";}
          break;
        default:
          mcc_la1[197] = mcc_gen;
          if (mcc_2_18(2)) {
            mcc_consume_token(SOUNDS);
            mcc_consume_token(LIKE);
                                     {return "SOUNDS LIKE";}
          } else {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case AND:
              t = mcc_consume_token(AND);
              break;
            case OR:
              t = mcc_consume_token(OR);
              break;
            default:
              mcc_la1[198] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        }
      }
      break;
    }
    {return t.image;}
    throw new Exception("Missing return statement in function");
  }

  public String GetSubQueryBooleanOperator() {
  Token t;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASSIGNMENT:
      t = mcc_consume_token(ASSIGNMENT);
      break;
    case EQUALS:
      t = mcc_consume_token(EQUALS);
      break;
    case GR:
      t = mcc_consume_token(GR);
      break;
    case LE:
      t = mcc_consume_token(LE);
      break;
    case GREQ:
      t = mcc_consume_token(GREQ);
      break;
    case LEEQ:
      t = mcc_consume_token(LEEQ);
      break;
    case NOTEQ:
      t = mcc_consume_token(NOTEQ);
      break;
    default:
      mcc_la1[199] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return t.image;}
    throw new Exception("Missing return statement in function");
  }

  public String GetNumericOperator() {
  Token t;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case DIVIDE:
      t = mcc_consume_token(DIVIDE);
      break;
    case ADD:
      t = mcc_consume_token(ADD);
      break;
    case SUBTRACT:
      t = mcc_consume_token(SUBTRACT);
      break;
    case STAR:
      t = mcc_consume_token(STAR);
      break;
    case MODULUS:
      t = mcc_consume_token(MODULUS);
      break;
    default:
      mcc_la1[200] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
     {return t.image;}
    throw new Exception("Missing return statement in function");
  }

  public String GetStringOperator() {
  Token t;
    t = mcc_consume_token(CONCAT);
     {return t.image;}
    throw new Exception("Missing return statement in function");
  }

  public Token FunctionIdentifier() {
  Token t;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IF:
      t = mcc_consume_token(IF);
      break;
    case USER:
      t = mcc_consume_token(USER);
      break;
    case IDENTITY:
      t = mcc_consume_token(IDENTITY);
      break;
    case IDENTIFIER:
      t = mcc_consume_token(IDENTIFIER);
      break;
    default:
      mcc_la1[201] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return t;}
    throw new Exception("Missing return statement in function");
  }

  public FunctionDef Function() {
  Token t, t2 = null, t3 = null;
  FunctionDef f;
  Expression exp1, exp2;
  Expression[] exp_list;
  TType cast_type;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case COUNT:
      t = mcc_consume_token(COUNT);
      mcc_consume_token(248);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DISTINCT:
        mcc_consume_token(DISTINCT);
                                       t.image="distinct_count";
        break;
      default:
        mcc_la1[202] = mcc_gen;
        ;
        break;
      }
      exp_list = FunctionParams();
      mcc_consume_token(249);
      break;
    case TRIM:
      t = mcc_consume_token(TRIM);
      mcc_consume_token(248);
      if (mcc_2_19(3)) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case BOTH:
        case LEADING:
        case TRAILING:
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case LEADING:
            t2 = mcc_consume_token(LEADING);
            break;
          case BOTH:
            t2 = mcc_consume_token(BOTH);
            break;
          case TRAILING:
            t2 = mcc_consume_token(TRAILING);
            break;
          default:
            mcc_la1[203] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          mcc_la1[204] = mcc_gen;
          ;
          break;
        }
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case STRING_LITERAL:
          t3 = mcc_consume_token(STRING_LITERAL);
          break;
        default:
          mcc_la1[205] = mcc_gen;
          ;
          break;
        }
        mcc_consume_token(FROM);
      } else {
        ;
      }
      exp1 = DoExpression();
      mcc_consume_token(249);
                          exp_list = new Expression[3];
                          String ttype = t2 == null ? "both" : t2.image.ToLower();
                          Object str_char = t3 == null ? TObject.CreateString(" ") :
                                                         Parser.Util.ToParamObject(t3, case_insensitive_identifiers);
                          exp_list[0] = new Expression(TObject.CreateString(ttype));
                          exp_list[0].Text.Append("'" + ttype + "'");
                          exp_list[1] = new Expression(str_char);
                          exp_list[1].Text.Append("'" + str_char + "'");
                          exp_list[2] = exp1;
                          {return Parser.Util.ResolveFunctionName("sql_trim", exp_list);}
      break;
    case EXTRACT:
      t = mcc_consume_token(EXTRACT);
      mcc_consume_token(248);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case YEAR:
        t2 = mcc_consume_token(YEAR);
        break;
      case MONTH:
        t2 = mcc_consume_token(MONTH);
        break;
      case DAY:
        t2 = mcc_consume_token(DAY);
        break;
      case HOUR:
        t2 = mcc_consume_token(HOUR);
        break;
      case MINUTE:
        t2 = mcc_consume_token(MINUTE);
        break;
      case SECOND:
        t2 = mcc_consume_token(SECOND);
        break;
      default:
        mcc_la1[206] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      mcc_consume_token(FROM);
      exp1 = DoExpression();
      mcc_consume_token(249);
                          exp_list = new Expression[2];
                          exp_list[0] = new Expression(TObject.CreateString(t2.image.ToLower()));
                          exp_list[0].Text.Append("'" + t2.image + "'");
                          exp_list[1] = exp1;
                          {return Parser.Util.ResolveFunctionName("extract", exp_list);}
      break;
    case CAST:
      t = mcc_consume_token(CAST);
      mcc_consume_token(248);
      exp1 = DoExpression();
      mcc_consume_token(AS);
      cast_type = GetTType();
      mcc_consume_token(249);
                          exp_list = new Expression[2];
                          String enc_form = TType.Encode(cast_type);
                          exp_list[0] = exp1;
                          exp_list[1] = new Expression(TObject.CreateString(enc_form));
                          exp_list[1].Text.Append("'" + enc_form + "'");
                          {return Parser.Util.ResolveFunctionName("sql_cast", exp_list);}
      break;
    case IF:
    case USER:
    case IDENTITY:
    case IDENTIFIER:
      t = FunctionIdentifier();
      mcc_consume_token(248);
      exp_list = FunctionParams();
      mcc_consume_token(249);
      break;
    default:
      mcc_la1[207] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return Parser.Util.ResolveFunctionName(t.image, exp_list);}
    throw new Exception("Missing return statement in function");
  }

// An instantiation of an object.  For example, 'System.Drawing.Point(40, 30)'
  public FunctionDef Instantiation() {
  Token t;
  Expression[] args;
    // PENDING: Handling arrays (eg. 'System.String[] { 'Antonello', 'Provenzano' }' or 'double[] { 25, 2, 75, 26 }' )
      t = mcc_consume_token(DOT_DELIMINATED_REF);
    mcc_consume_token(248);
    args = ExpressionList();
    mcc_consume_token(249);
    Expression[] comp_args = new Expression[args.Length + 1];
    Array.Copy(args, 0, comp_args, 1, args.Length);
    comp_args[0] = new Expression(TObject.CreateString(t.image));
    comp_args[0].Text.Append("'" + t.image + "'");
    {return Parser.Util.ResolveFunctionName("_new_Object", comp_args);}
    throw new Exception("Missing return statement in function");
  }

// Parameters for a function
  public Expression[] FunctionParams() {
  Expression[] exp_list;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case STAR:
      mcc_consume_token(STAR);
             exp_list = FunctionFactory.GlobList;
      break;
    default:
      mcc_la1[208] = mcc_gen;
      exp_list = ExpressionList();
      break;
    }
    {return exp_list;}
    throw new Exception("Missing return statement in function");
  }

  public Expression[] ExpressionList() {
  ArrayList list = new ArrayList();
  Expression e;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ADD:
    case SUBTRACT:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case SELECT:
    case IF:
    case NEW:
    case TRIM:
    case USER:
    case CAST:
    case NAME:
    case COUNT:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case EXISTS:
    case UNIQUE:
    case ACCOUNT:
    case PASSWORD:
    case EXTRACT:
    case IDENTITY:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case DATE:
    case TIME:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case INTERVAL:
    case TIMESTAMP:
    case CURRENT_TIME:
    case CURRENT_DATE:
    case CURRENT_TIMESTAMP:
    case DBTIMEZONE:
    case NOT:
    case NUMBER_LITERAL:
    case STRING_LITERAL:
    case QUOTED_VARIABLE:
    case IDENTIFIER:
    case DOT_DELIMINATED_REF:
    case QUOTED_DELIMINATED_REF:
    case NAMED_PARAMETER:
    case PARAMETER_REF:
    case VARIABLE_REF:
    case 248:
      e = DoExpression();
                         list.Add(e);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 250:
          ;
          break;
        default:
          mcc_la1[209] = mcc_gen;
          goto label_20;
        }
        mcc_consume_token(250);
        e = DoExpression();
                               list.Add(e);
      }label_20: ;
      
      break;
    default:
      mcc_la1[210] = mcc_gen;
      ;
      break;
    }
    {return (Expression[]) list.ToArray(typeof(Expression));}
    throw new Exception("Missing return statement in function");
  }

  public CompositeFunction GetComposite() {
  CompositeFunction composite = CompositeFunction.None;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case UNION:
      mcc_consume_token(UNION);
               composite = CompositeFunction.Union;
      break;
    case INTERSECT:
      mcc_consume_token(INTERSECT);
                   composite = CompositeFunction.Intersect;
      break;
    case EXCEPT:
      mcc_consume_token(EXCEPT);
                composite = CompositeFunction.Except;
      break;
    default:
      mcc_la1[211] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return composite;}
    throw new Exception("Missing return statement in function");
  }

  public String TableName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    case OLD:
      name = mcc_consume_token(OLD);
      break;
    case NEW:
      name = mcc_consume_token(NEW);
      break;
    case DOT_DELIMINATED_REF:
      name = mcc_consume_token(DOT_DELIMINATED_REF);
      break;
    case QUOTED_DELIMINATED_REF:
      name = mcc_consume_token(QUOTED_DELIMINATED_REF);
      break;
    default:
      mcc_la1[212] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

  public String SequenceName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    case DOT_DELIMINATED_REF:
      name = mcc_consume_token(DOT_DELIMINATED_REF);
      break;
    case QUOTED_DELIMINATED_REF:
      name = mcc_consume_token(QUOTED_DELIMINATED_REF);
      break;
    default:
      mcc_la1[213] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

  public String TriggerName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    default:
      mcc_la1[214] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

  public String IndexName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    default:
      mcc_la1[215] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// A username
  public String UserName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case IDENTIFIER:
      name = mcc_consume_token(IDENTIFIER);
      break;
    case PUBLIC:
      name = mcc_consume_token(PUBLIC);
      break;
    default:
      mcc_la1[216] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// Name of a schema
  public String SchemaName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    default:
      mcc_la1[217] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// Name of a constraint name
  public String ConstraintName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    default:
      mcc_la1[218] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// Parses a column name  
  public String ColumnName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    case DOT_DELIMINATED_REF:
      name = mcc_consume_token(DOT_DELIMINATED_REF);
      break;
    case QUOTED_DELIMINATED_REF:
      name = mcc_consume_token(QUOTED_DELIMINATED_REF);
      break;
    default:
      mcc_la1[219] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// Parses a column name as a VariableName object  
  public VariableName ColumnNameVariable() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    case DOT_DELIMINATED_REF:
      name = mcc_consume_token(DOT_DELIMINATED_REF);
      break;
    case QUOTED_DELIMINATED_REF:
      name = mcc_consume_token(QUOTED_DELIMINATED_REF);
      break;
    default:
      mcc_la1[220] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return (VariableName) Parser.Util.ToParamObject(name, case_insensitive_identifiers);}
    throw new Exception("Missing return statement in function");
  }

// Parses an aliased table name  
  public String TableAliasName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    default:
      mcc_la1[221] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// Parses a procedure name  
  public String ProcedureName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    case DOT_DELIMINATED_REF:
      name = mcc_consume_token(DOT_DELIMINATED_REF);
      break;
    case QUOTED_DELIMINATED_REF:
      name = mcc_consume_token(QUOTED_DELIMINATED_REF);
      break;
    default:
      mcc_la1[222] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// Parses a function name
  public String FunctionName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    case DOT_DELIMINATED_REF:
      name = mcc_consume_token(DOT_DELIMINATED_REF);
      break;
    case QUOTED_DELIMINATED_REF:
      name = mcc_consume_token(QUOTED_DELIMINATED_REF);
      break;
    default:
      mcc_la1[223] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// Parses the name of an argument in a procedure/function declaration
  public String ProcArgumentName() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUOTED_VARIABLE:
      name = mcc_consume_token(QUOTED_VARIABLE);
      break;
    case NAME:
    case ACTION:
    case GROUPS:
    case OPTION:
    case CSHARP:
    case ACCOUNT:
    case PASSWORD:
    case LANGUAGE:
    case PRIVILEGES:
    case DAY:
    case YEAR:
    case HOUR:
    case MONTH:
    case SECOND:
    case MINUTE:
    case IDENTIFIER:
      name = SQLIdentifier();
      break;
    default:
      mcc_la1[224] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return CaseCheck(Parser.Util.AsNonQuotedRef(name));}
    throw new Exception("Missing return statement in function");
  }

// Parses an SQL identifier
  public Token SQLIdentifier() {
  Token name;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IDENTIFIER:
      name = mcc_consume_token(IDENTIFIER);
      break;
    case OPTION:
      name = mcc_consume_token(OPTION);
      break;
    case ACCOUNT:
      name = mcc_consume_token(ACCOUNT);
      break;
    case PASSWORD:
      name = mcc_consume_token(PASSWORD);
      break;
    case PRIVILEGES:
      name = mcc_consume_token(PRIVILEGES);
      break;
    case GROUPS:
      name = mcc_consume_token(GROUPS);
      break;
    case LANGUAGE:
      name = mcc_consume_token(LANGUAGE);
      break;
    case NAME:
      name = mcc_consume_token(NAME);
      break;
    case CSHARP:
      name = mcc_consume_token(CSHARP);
      break;
    case ACTION:
      name = mcc_consume_token(ACTION);
      break;
    case YEAR:
      name = mcc_consume_token(YEAR);
      break;
    case MONTH:
      name = mcc_consume_token(MONTH);
      break;
    case DAY:
      name = mcc_consume_token(DAY);
      break;
    case HOUR:
      name = mcc_consume_token(HOUR);
      break;
    case MINUTE:
      name = mcc_consume_token(MINUTE);
      break;
    case SECOND:
      name = mcc_consume_token(SECOND);
      break;
    default:
      mcc_la1[225] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return name;}
    throw new Exception("Missing return statement in function");
  }

  private bool mcc_2_1(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_1(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(0, xla); }
  }

  private bool mcc_2_2(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_2(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(1, xla); }
  }

  private bool mcc_2_3(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_3(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(2, xla); }
  }

  private bool mcc_2_4(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_4(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(3, xla); }
  }

  private bool mcc_2_5(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_5(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(4, xla); }
  }

  private bool mcc_2_6(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_6(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(5, xla); }
  }

  private bool mcc_2_7(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_7(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(6, xla); }
  }

  private bool mcc_2_8(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_8(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(7, xla); }
  }

  private bool mcc_2_9(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_9(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(8, xla); }
  }

  private bool mcc_2_10(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_10(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(9, xla); }
  }

  private bool mcc_2_11(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_11(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(10, xla); }
  }

  private bool mcc_2_12(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_12(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(11, xla); }
  }

  private bool mcc_2_13(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_13(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(12, xla); }
  }

  private bool mcc_2_14(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_14(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(13, xla); }
  }

  private bool mcc_2_15(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_15(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(14, xla); }
  }

  private bool mcc_2_16(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_16(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(15, xla); }
  }

  private bool mcc_2_17(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_17(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(16, xla); }
  }

  private bool mcc_2_18(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_18(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(17, xla); }
  }

  private bool mcc_2_19(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_19(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(18, xla); }
  }

  private bool mcc_3R_85() {
    if (mcc_3R_79()) return true;
    return false;
  }

  private bool mcc_3_2() {
    if (mcc_scan_token(IDENTITY)) return true;
    return false;
  }

  private bool mcc_3R_51() {
    if (mcc_scan_token(EXISTS)) return true;
    if (mcc_scan_token(248)) return true;
    return false;
  }

  private bool mcc_3R_42() {
    if (mcc_3R_68()) return true;
    return false;
  }

  private bool mcc_3R_97() {
    if (mcc_3R_100()) return true;
    return false;
  }

  private bool mcc_3_6() {
    if (mcc_scan_token(LONG)) return true;
    if (mcc_scan_token(BINARY)) return true;
    if (mcc_scan_token(VARYING)) return true;
    return false;
  }

  private bool mcc_3_5() {
    if (mcc_scan_token(BINARY)) return true;
    if (mcc_scan_token(VARYING)) return true;
    return false;
  }

  private bool mcc_3R_93() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_97()) mcc_scanpos = xsp;
    if (mcc_3R_98()) return true;
    return false;
  }

  private bool mcc_3R_92() {
    if (mcc_scan_token(IDENTITY)) return true;
    return false;
  }

  private bool mcc_3R_75() {
    if (mcc_scan_token(SELECT)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_92()) {
    mcc_scanpos = xsp;
    if (mcc_3R_93()) return true;
    }
    return false;
  }

  private bool mcc_3R_57() {
    if (mcc_3R_78()) return true;
    return false;
  }

  private bool mcc_3R_50() {
    if (mcc_scan_token(INTERVAL)) return true;
    if (mcc_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private bool mcc_3R_102() {
    if (mcc_3R_85()) return true;
    return false;
  }

  private bool mcc_3R_49() {
    if (mcc_scan_token(DBTIMEZONE)) return true;
    return false;
  }

  private bool mcc_3R_99() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_102()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_74() {
    if (mcc_scan_token(CURRENT_DATE)) return true;
    return false;
  }

  private bool mcc_3R_73() {
    if (mcc_scan_token(CURRENT_TIME)) return true;
    return false;
  }

  private bool mcc_3R_72() {
    if (mcc_scan_token(CURRENT_TIMESTAMP)) return true;
    return false;
  }

  private bool mcc_3R_38() {
    if (mcc_scan_token(CLOB)) return true;
    return false;
  }

  private bool mcc_3R_37() {
    if (mcc_scan_token(VARCHAR)) return true;
    return false;
  }

  private bool mcc_3R_36() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(182)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(151)) return true;
    }
    return false;
  }

  private bool mcc_3R_95() {
    if (mcc_3R_99()) return true;
    return false;
  }

  private bool mcc_3R_35() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(183)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(194)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(207)) return true;
    }
    }
    return false;
  }

  private bool mcc_3_4() {
    if (mcc_scan_token(LONG)) return true;
    if (mcc_scan_token(CHARACTER)) return true;
    if (mcc_scan_token(VARYING)) return true;
    return false;
  }

  private bool mcc_3R_48() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_72()) {
    mcc_scanpos = xsp;
    if (mcc_3R_73()) {
    mcc_scanpos = xsp;
    if (mcc_3R_74()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_21() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_3()) {
    mcc_scanpos = xsp;
    if (mcc_3_4()) {
    mcc_scanpos = xsp;
    if (mcc_3R_35()) {
    mcc_scanpos = xsp;
    if (mcc_3R_36()) {
    mcc_scanpos = xsp;
    if (mcc_3R_37()) {
    mcc_scanpos = xsp;
    if (mcc_3R_38()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3_3() {
    if (mcc_scan_token(CHARACTER)) return true;
    if (mcc_scan_token(VARYING)) return true;
    return false;
  }

  private bool mcc_3R_94() {
    if (mcc_scan_token(STAR)) return true;
    return false;
  }

  private bool mcc_3R_84() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_94()) {
    mcc_scanpos = xsp;
    if (mcc_3R_95()) return true;
    }
    return false;
  }

  private bool mcc_3R_71() {
    if (mcc_scan_token(TIMESTAMP)) return true;
    return false;
  }

  private bool mcc_3R_70() {
    if (mcc_scan_token(TIME)) return true;
    return false;
  }

  private bool mcc_3R_69() {
    if (mcc_scan_token(DATE)) return true;
    return false;
  }

  private bool mcc_3R_87() {
    if (mcc_scan_token(NOT)) return true;
    return false;
  }

  private bool mcc_3R_66() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_87()) mcc_scanpos = xsp;
    if (mcc_scan_token(BETWEEN)) return true;
    if (mcc_3R_88()) return true;
    return false;
  }

  private bool mcc_3R_33() {
    if (mcc_scan_token(NOT)) return true;
    if (mcc_scan_token(IN)) return true;
    return false;
  }

  private bool mcc_3R_32() {
    if (mcc_scan_token(IN)) return true;
    return false;
  }

  private bool mcc_3R_47() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_69()) {
    mcc_scanpos = xsp;
    if (mcc_3R_70()) {
    mcc_scanpos = xsp;
    if (mcc_3R_71()) return true;
    }
    }
    if (mcc_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private bool mcc_3_15() {
    if (mcc_3R_31()) return true;
    return false;
  }

  private bool mcc_3R_80() {
    if (mcc_scan_token(DOT_DELIMINATED_REF)) return true;
    return false;
  }

  private bool mcc_3R_108() {
    if (mcc_scan_token(QUOTEDGLOBVARIABLE)) return true;
    return false;
  }

  private bool mcc_3R_107() {
    if (mcc_scan_token(GLOBVARIABLE)) return true;
    return false;
  }

  private bool mcc_3_9() {
    if (mcc_scan_token(SET)) return true;
    if (mcc_scan_token(NULL_LITERAL)) return true;
    return false;
  }

  private bool mcc_3_14() {
    if (mcc_scan_token(NOT)) return true;
    if (mcc_3R_25()) return true;
    return false;
  }

  private bool mcc_3R_106() {
    if (mcc_scan_token(STAR)) return true;
    return false;
  }

  private bool mcc_3R_105() {
    if (mcc_3R_85()) return true;
    return false;
  }

  private bool mcc_3R_82() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(46)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(45)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(61)) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_58() {
    if (mcc_3R_81()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_82()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_101() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_105()) {
    mcc_scanpos = xsp;
    if (mcc_3R_106()) {
    mcc_scanpos = xsp;
    if (mcc_3R_107()) {
    mcc_scanpos = xsp;
    if (mcc_3R_108()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_1() {
    if (mcc_scan_token(SET)) return true;
    if (mcc_scan_token(GROUPS)) return true;
    return false;
  }

  private bool mcc_3R_46() {
    if (mcc_scan_token(VARIABLE_REF)) return true;
    return false;
  }

  private bool mcc_3R_34() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(124)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(60)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(140)) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_90() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(235)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(109)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(122)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(139)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(157)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(107)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(148)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(75)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(110)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(106)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(186)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(189)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(177)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(187)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(191)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(190)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3_16() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_32()) {
    mcc_scanpos = xsp;
    if (mcc_3R_33()) return true;
    }
    return false;
  }

  private bool mcc_3R_63() {
    if (mcc_3R_86()) return true;
    if (mcc_scan_token(248)) return true;
    if (mcc_3R_84()) return true;
    if (mcc_scan_token(249)) return true;
    return false;
  }

  private bool mcc_3R_29() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_16()) {
    mcc_scanpos = xsp;
    if (mcc_3R_58()) return true;
    }
    return false;
  }

  private bool mcc_3R_45() {
    if (mcc_scan_token(NAMED_PARAMETER)) return true;
    return false;
  }

  private bool mcc_3R_98() {
    if (mcc_3R_101()) return true;
    return false;
  }

  private bool mcc_3R_62() {
    if (mcc_scan_token(CAST)) return true;
    if (mcc_scan_token(248)) return true;
    if (mcc_3R_85()) return true;
    return false;
  }

  private bool mcc_3R_44() {
    if (mcc_scan_token(PARAMETER_REF)) return true;
    return false;
  }

  private bool mcc_3R_104() {
    if (mcc_scan_token(ALL)) return true;
    return false;
  }

  private bool mcc_3_8() {
    if (mcc_scan_token(ON)) return true;
    if (mcc_scan_token(DELETE)) return true;
    return false;
  }

  private bool mcc_3R_43() {
    if (mcc_scan_token(248)) return true;
    if (mcc_3R_79()) return true;
    return false;
  }

  private bool mcc_3R_103() {
    if (mcc_scan_token(DISTINCT)) return true;
    return false;
  }

  private bool mcc_3_19() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_34()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(233)) mcc_scanpos = xsp;
    if (mcc_scan_token(FROM)) return true;
    return false;
  }

  private bool mcc_3R_83() {
    if (mcc_scan_token(DISTINCT)) return true;
    return false;
  }

  private bool mcc_3R_100() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_103()) {
    mcc_scanpos = xsp;
    if (mcc_3R_104()) return true;
    }
    return false;
  }

  private bool mcc_3R_25() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_43()) {
    mcc_scanpos = xsp;
    if (mcc_3R_44()) {
    mcc_scanpos = xsp;
    if (mcc_3R_45()) {
    mcc_scanpos = xsp;
    if (mcc_3R_46()) {
    mcc_scanpos = xsp;
    if (mcc_3_14()) {
    mcc_scanpos = xsp;
    if (mcc_3_15()) {
    mcc_scanpos = xsp;
    if (mcc_3R_47()) {
    mcc_scanpos = xsp;
    if (mcc_3R_48()) {
    mcc_scanpos = xsp;
    if (mcc_3R_49()) {
    mcc_scanpos = xsp;
    if (mcc_3R_50()) {
    mcc_scanpos = xsp;
    if (mcc_3R_51()) {
    mcc_scanpos = xsp;
    if (mcc_3R_52()) {
    mcc_scanpos = xsp;
    if (mcc_3R_53()) {
    mcc_scanpos = xsp;
    if (mcc_3R_54()) {
    mcc_scanpos = xsp;
    if (mcc_3R_55()) {
    mcc_scanpos = xsp;
    if (mcc_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_61() {
    if (mcc_scan_token(EXTRACT)) return true;
    if (mcc_scan_token(248)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(186)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(189)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(177)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(187)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(191)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(190)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_65() {
    if (mcc_scan_token(REGEX_LITERAL)) return true;
    return false;
  }

  private bool mcc_3R_28() {
    if (mcc_3R_41()) return true;
    return false;
  }

  private bool mcc_3R_40() {
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_60() {
    if (mcc_scan_token(TRIM)) return true;
    if (mcc_scan_token(248)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_19()) mcc_scanpos = xsp;
    if (mcc_3R_85()) return true;
    return false;
  }

  private bool mcc_3R_27() {
    if (mcc_3R_42()) return true;
    return false;
  }

  private bool mcc_3R_26() {
    if (mcc_3R_57()) return true;
    return false;
  }

  private bool mcc_3_13() {
    if (mcc_3R_29()) return true;
    if (mcc_3R_30()) return true;
    return false;
  }

  private bool mcc_3R_59() {
    if (mcc_scan_token(COUNT)) return true;
    if (mcc_scan_token(248)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_83()) mcc_scanpos = xsp;
    if (mcc_3R_84()) return true;
    if (mcc_scan_token(249)) return true;
    return false;
  }

  private bool mcc_3R_30() {
    if (mcc_scan_token(248)) return true;
    return false;
  }

  private bool mcc_3R_31() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_59()) {
    mcc_scanpos = xsp;
    if (mcc_3R_60()) {
    mcc_scanpos = xsp;
    if (mcc_3R_61()) {
    mcc_scanpos = xsp;
    if (mcc_3R_62()) {
    mcc_scanpos = xsp;
    if (mcc_3R_63()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_64() {
    if (mcc_scan_token(REGEX)) return true;
    if (mcc_3R_79()) return true;
    return false;
  }

  private bool mcc_3R_39() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_64()) {
    mcc_scanpos = xsp;
    if (mcc_3R_65()) return true;
    }
    return false;
  }

  private bool mcc_3R_24() {
    if (mcc_3R_42()) return true;
    return false;
  }

  private bool mcc_3R_23() {
    if (mcc_3R_41()) return true;
    return false;
  }

  private bool mcc_3R_86() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(42)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(72)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(146)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(235)) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_12() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_26()) {
    mcc_scanpos = xsp;
    if (mcc_3R_27()) {
    mcc_scanpos = xsp;
    if (mcc_3R_28()) return true;
    }
    }
    if (mcc_3R_25()) return true;
    return false;
  }

  private bool mcc_3R_22() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_12()) {
    mcc_scanpos = xsp;
    if (mcc_3R_39()) {
    mcc_scanpos = xsp;
    if (mcc_3_13()) {
    mcc_scanpos = xsp;
    if (mcc_3R_40()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_89() {
    if (mcc_scan_token(SUBTRACT)) return true;
    return false;
  }

  private bool mcc_3R_77() {
    if (mcc_3R_90()) return true;
    return false;
  }

  private bool mcc_3R_67() {
    if (mcc_scan_token(CONCAT)) return true;
    return false;
  }

  private bool mcc_3_10() {
    if (mcc_3R_22()) return true;
    return false;
  }

  private bool mcc_3_7() {
    if (mcc_3R_21()) return true;
    return false;
  }

  private bool mcc_3_11() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_23()) {
    mcc_scanpos = xsp;
    if (mcc_3R_24()) return true;
    }
    if (mcc_3R_25()) return true;
    return false;
  }

  private bool mcc_3R_76() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(16)) {
    mcc_scanpos = xsp;
    if (mcc_3R_89()) return true;
    }
    return false;
  }

  private bool mcc_3R_68() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(15)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(16)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(17)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(7)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(19)) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_96() {
    if (mcc_3R_25()) return true;
    return false;
  }

  private bool mcc_3R_56() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_76()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(232)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(234)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(236)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(237)) {
    mcc_scanpos = xsp;
    if (mcc_3R_77()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_91() {
    if (mcc_scan_token(NOT)) return true;
    if (mcc_scan_token(LIKE)) return true;
    return false;
  }

  private bool mcc_3R_81() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(8)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(9)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(10)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(11)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(12)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(13)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(14)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_55() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(233)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(21)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(22)) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_79() {
    if (mcc_3R_25()) return true;
    return false;
  }

  private bool mcc_3R_54() {
    if (mcc_scan_token(NEW)) return true;
    if (mcc_3R_80()) return true;
    return false;
  }

  private bool mcc_3_18() {
    if (mcc_scan_token(SOUNDS)) return true;
    if (mcc_scan_token(LIKE)) return true;
    return false;
  }

  private bool mcc_3_17() {
    if (mcc_scan_token(IS)) return true;
    if (mcc_scan_token(NOT)) return true;
    return false;
  }

  private bool mcc_3R_78() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(8)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(9)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(10)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(11)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(12)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(13)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(14)) {
    mcc_scanpos = xsp;
    if (mcc_3_17()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(39)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(226)) {
    mcc_scanpos = xsp;
    if (mcc_3R_91()) {
    mcc_scanpos = xsp;
    if (mcc_3_18()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(228)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(229)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_53() {
    if (mcc_3R_75()) return true;
    return false;
  }

  private bool mcc_3R_88() {
    if (mcc_3R_96()) return true;
    return false;
  }

  private bool mcc_3R_41() {
    if (mcc_3R_67()) return true;
    return false;
  }

  private bool mcc_3R_52() {
    if (mcc_scan_token(UNIQUE)) return true;
    if (mcc_scan_token(248)) return true;
    return false;
  }

  public SQLTokenManager token_source;
  SimpleCharStream mcc_input_stream;
  public Token token, mcc_nt;
  private int mcc_ntk;
  private Token mcc_scanpos, mcc_lastpos;
  private int mcc_la;
  public bool lookingAhead = false;
  private bool mcc_semLA;
  private int mcc_gen;
  private int[] mcc_la1 = new int[226];
  static private int[] mcc_la1_0;
  static private int[] mcc_la1_1;
  static private int[] mcc_la1_2;
  static private int[] mcc_la1_3;
  static private int[] mcc_la1_4;
  static private int[] mcc_la1_5;
  static private int[] mcc_la1_6;
  static private int[] mcc_la1_7;
  static SQL() {
      mcc_gla1_0();
      mcc_gla1_1();
      mcc_gla1_2();
      mcc_gla1_3();
      mcc_gla1_4();
      mcc_gla1_5();
      mcc_gla1_6();
      mcc_gla1_7();
   }
   private static void mcc_gla1_0() {
      mcc_la1_0 = new int[] {-16777216,-16777216,1048577,0,0,0,0,0,0,256,0,140705792,0,0,536870912,536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,268435456,0,0,0,0,0,140705792,0,0,0,0,134217728,134217728,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-805306368,0,0,0,0,0,0,-671088640,0,140705920,0,0,0,0,0,0,0,0,0,0,0,16777216,0,0,83886080,0,0,140705792,0,140705792,0,0,0,0,0,140705920,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4194304,0,0,4194304,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1015936,1048448,8388608,8388608,0,0,0,0,0,0,0,6291456,196608,196608,0,0,140705792,134217728,0,0,0,32512,0,32512,0,0,32512,753792,0,0,0,0,0,0,0,128,0,140705792,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
   }
   private static void mcc_gla1_1() {
      mcc_la1_1 = new int[] {134283371,134283371,0,0,0,0,0,0,0,0,0,1049600,0,0,0,0,0,1024,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,65536,0,0,0,0,4194304,0,0,1073741824,0,1049600,0,0,0,0,0,65536,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,1572864,0,0,8192,8192,1057792,0,1073741824,0,0,0,0,8192,0,0,0,0,65536,0,0,2097152,0,1572864,1049600,0,1049600,0,8192,0,256,0,1049600,0,262144,0,262144,262144,1572864,256,1573120,-2147483648,1572864,0,-2147483648,0,-2147483648,0,-2147483648,-2147483648,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,512,512,512,0,0,4096,65536,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,2048,2048,0,0,0,0,0,0,0,1048576,0,0,536895488,536895488,0,0,0,128,0,0,0,1024,0,268435456,268435456,0,0,1024,0,0,1049600,0,1572864,0,0,0,0,0,0,0,0,0,0,0,0,0,};
   }
   private static void mcc_gla1_2() {
      mcc_la1_2 = new int[] {67115008,67115008,0,37749136,37749008,0,2048,0,0,0,0,133896,262144,8388608,4194560,4194304,0,0,536870912,0,0,0,0,0,0,0,0,0,0,65536,1048576,524288,32,0,0,0,0,0,0,0,0,0,2,133896,262144,8388608,2,0,0,0,0,0,262144,64,0,-2147483648,0,1073741824,1073741824,0,0,2048,0,0,0,0,0,32768,0,4194304,4196352,0,0,0,0,133896,2,0,262144,0,0,0,0,0,0,536872960,0,0,0,2048,0,0,2048,133896,0,133896,0,0,0,0,2048,133896,0,1,0,1,1,2048,0,2048,18874372,2048,16777216,18874372,268435456,18874372,268435456,18874372,18874372,2048,0,2048,3072,0,0,536872960,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,2048,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,131848,0,0,133896,0,2048,2048,2048,2048,0,2048,2048,2048,2048,2048,2048,2048,2048,2048,};
   }
   private static void mcc_gla1_3() {
      mcc_la1_3 = new int[] {201358612,201358612,0,-2138832896,-2147221504,134217728,67136768,0,0,0,0,76049408,0,0,0,0,0,0,0,-2147483648,-2147483648,33554432,0,8388608,0,0,0,0,0,0,0,0,128,0,0,512,0,0,0,0,0,0,0,76049408,0,0,0,0,2097152,2097152,262144,0,0,0,4,0,0,0,0,0,0,67136512,33554432,0,0,262144,0,64,0,0,67398656,0,0,8,0,76049408,0,0,0,0,4194304,0,0,65538,16777216,92302336,16777216,0,16777216,83913728,0,0,67136512,76049408,0,76049408,0,0,0,0,67136512,76049408,0,0,0,0,0,67136512,0,67136512,0,67136512,0,0,0,0,0,0,0,67136512,0,67136512,67136512,0,0,75525120,0,8388608,0,0,8388608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8388608,0,0,0,0,0,0,0,0,0,0,0,0,0,1048576,0,0,1073741824,0,0,0,0,0,0,0,0,0,67136512,0,76049408,0,0,0,0,0,0,0,0,0,0,0,0,0,268435456,268435456,0,0,0,0,0,76049408,65538,67136512,67136512,67136512,67136512,32768,67136512,67136512,67136512,67136512,67136512,67136512,67136512,67136512,67136512,};
   }
   private static void mcc_gla1_4() {
      mcc_la1_4 = new int[] {537921536,537921536,0,134218312,584,0,537921536,128,0,0,32768,554977280,0,0,0,0,134217728,0,0,8,8,0,0,0,0,0,2097152,16,32,0,0,0,0,0,0,0,32768,256,0,0,0,0,0,554977280,0,0,0,0,0,0,0,0,0,0,0,0,131072,0,0,0,0,537921600,0,0,0,0,0,0,0,0,537921536,0,536870912,0,524288,538724352,0,0,0,0,0,8192,0,268435456,0,1611663360,0,0,0,1611663360,0,0,537921536,538200065,0,538200065,0,524288,0,0,537921536,538200064,0,0,0,0,0,537921536,0,537921536,0,537921536,0,0,0,0,0,0,0,537921536,0,537921536,546572288,0,0,1611663360,1,0,0,0,0,0,0,0,8388608,8388608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,262144,1073741824,0,0,0,0,0,0,-2080374784,1024,0,33619968,-2147483648,-2147483648,-2147483648,33619968,67108864,-2080374784,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,537921536,0,537921536,0,0,0,0,0,0,0,0,0,0,0,262144,524288,4096,4096,0,0,278528,0,0,538200064,268435456,537921536,537921536,537921536,537921536,0,537921536,537921536,537921536,537921536,537921536,537921536,537921536,537921536,537921536,};
   }
   private static void mcc_gla1_5() {
      mcc_la1_5 = new int[] {-335413248,-335413248,0,0,0,0,-335413248,0,0,0,0,-285081600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,-285081600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-335413248,0,0,0,0,0,0,0,0,-335413248,0,0,1,0,-285081600,0,0,0,128,0,0,0,0,0,-335413236,0,0,0,-335413244,0,0,-335413248,-285081600,0,-285081600,0,0,0,0,-335413248,-285081600,0,0,0,0,0,-335413248,0,-335413248,0,-335413248,0,0,0,0,0,0,0,-335413248,0,-335413248,-65536,0,0,-335413236,0,4,96,96,4,7680,57344,8388608,4194304,13631488,262144,269221888,65536,50331648,2097152,67239936,67239936,0,0,0,7680,57344,256,0,0,0,0,321716224,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50331648,0,0,0,-335413248,-335413248,0,0,0,-335413248,0,-285081600,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-335413248,0,0,0,-285081600,0,-335413248,-335413248,-335413248,-335413248,0,-335413248,-335413248,-335413248,-335413248,-335413248,-335413248,-335413248,-335413248,-335413248,};
   }
   private static void mcc_gla1_6() {
      mcc_la1_6 = new int[] {0,0,0,0,0,0,0,0,0,0,0,-1073721344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,528482304,528482304,528482304,0,-1073721344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393216,0,0,0,0,0,0,0,0,0,-1073721344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1073721344,0,-1073721344,0,0,0,0,0,-1073721344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131071,0,0,0,0,0,0,0,0,0,0,32772,0,33796,512,2915,128,16384,73736,0,0,0,0,0,0,0,0,0,0,0,16,97259,0,0,0,0,0,0,0,0,536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,-1073741824,0,0,0,0,0,0,0,0,0,-1073721344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1073721344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
   }
   private static void mcc_gla1_7() {
      mcc_la1_7 = new int[] {2048,2048,0,0,0,0,2048,0,128,0,0,19677059,0,0,0,0,0,0,0,0,0,0,16777216,0,0,67108864,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19677059,0,0,0,16777216,0,16777216,2048,16777216,0,0,0,0,0,128,128,67108864,67108864,2048,0,128,2048,2048,0,0,32,0,15360,67108864,0,0,0,19873667,0,0,0,0,0,0,0,0,0,15360,0,0,0,15360,0,67108864,2112512,19677059,67108864,19677059,67108864,0,67108864,0,3072,19873667,67108864,0,67108864,0,0,16792576,0,15360,67108864,16792576,0,67108864,0,67108864,0,67108864,67108864,3072,67108864,3072,3072,67108864,67108864,15360,0,128,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,20480,16777216,16777216,0,0,0,67108864,16777216,16777216,0,0,0,16777216,0,0,0,0,0,128,0,0,0,128,128,128,0,0,128,67108864,67108864,0,180,8,8,128,0,1,0,0,0,0,512,0,0,15616,19660800,16131,0,192,0,0,0,128,0,132,48,0,0,2048,0,0,0,512,0,2048,0,67108864,19677059,0,15360,15360,3072,3072,3072,3072,3072,15360,15360,3072,15360,15360,3072,2048,};
   }
  private MccCalls[] mcc_2_rtns = new MccCalls[19];
  private bool mcc_rescan = false;
  private int mcc_gc = 0;

  public SQL(System.IO.Stream stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 226; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 226; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public SQL(System.IO.TextReader stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 226; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 226; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public SQL(SQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 226; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(SQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 226; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

   private Token mcc_consume_token(int kind) {
    Token oldToken = null;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    if (token.kind == kind) {
      mcc_gen++;
      if (++mcc_gc > 100) {
        mcc_gc = 0;
        for (int i = 0; i < mcc_2_rtns.Length; i++) {
          MccCalls c = mcc_2_rtns[i];
          while (c != null) {
            if (c.gen < mcc_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    mcc_kind = kind;
    throw GenerateParseException();
  }

  private class LookaheadSuccess : System.Exception { }
  private LookaheadSuccess mcc_ls = new LookaheadSuccess();
  private bool mcc_scan_token(int kind) {
    if (mcc_scanpos == mcc_lastpos) {
      mcc_la--;
      if (mcc_scanpos.next == null) {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next = token_source.GetNextToken();
      } else {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next;
      }
    } else {
      mcc_scanpos = mcc_scanpos.next;
    }
    if (mcc_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != mcc_scanpos) { i++; tok = tok.next; }
      if (tok != null) mcc_add_error_token(kind, i);
    }
    if (mcc_scanpos.kind != kind) return true;
    if (mcc_la == 0 && mcc_scanpos == mcc_lastpos) throw mcc_ls;
    return false;
  }

  public Token GetNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    mcc_gen++;
    return token;
  }

  public Token GetToken(int index) {
    Token t = lookingAhead ? mcc_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.GetNextToken();
    }
    return t;
  }

  private int mcc_mntk() {
    if ((mcc_nt=token.next) == null)
      return (mcc_ntk = (token.next=token_source.GetNextToken()).kind);
    else
      return (mcc_ntk = mcc_nt.kind);
  }

  private System.Collections.ArrayList mcc_expentries = new System.Collections.ArrayList();
  private int[] mcc_expentry;
  private int mcc_kind = -1;
  private int[] mcc_lasttokens = new int[100];
  private int mcc_endpos;

  private void mcc_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == mcc_endpos + 1) {
      mcc_lasttokens[mcc_endpos++] = kind;
    } else if (mcc_endpos != 0) {
      mcc_expentry = new int[mcc_endpos];
      for (int i = 0; i < mcc_endpos; i++) {
        mcc_expentry[i] = mcc_lasttokens[i];
      }
      bool exists = false;
      for (System.Collections.IEnumerator e = mcc_expentries.GetEnumerator(); e.MoveNext();) {
        int[] oldentry = (int[])e.Current;
        if (oldentry.Length == mcc_expentry.Length) {
          exists = true;
          for (int i = 0; i < mcc_expentry.Length; i++) {
            if (oldentry[i] != mcc_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) mcc_expentries.Add(mcc_expentry);
      if (pos != 0) mcc_lasttokens[(mcc_endpos = pos) - 1] = kind;
    }
  }

  public ParseException GenerateParseException() {
    mcc_expentries.Clear();
    bool[] la1tokens = new bool[251];
    for (int i = 0; i < 251; i++) {
      la1tokens[i] = false;
    }
    if (mcc_kind >= 0) {
      la1tokens[mcc_kind] = true;
      mcc_kind = -1;
    }
    for (int i = 0; i < 226; i++) {
      if (mcc_la1[i] == mcc_gen) {
        for (int j = 0; j < 32; j++) {
          if ((mcc_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((mcc_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((mcc_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((mcc_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((mcc_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((mcc_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((mcc_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((mcc_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 251; i++) {
      if (la1tokens[i]) {
        mcc_expentry = new int[1];
        mcc_expentry[0] = i;
        mcc_expentries.Add(mcc_expentry);
      }
    }
    mcc_endpos = 0;
    mcc_rescan_token();
    mcc_add_error_token(0, 0);
    int[][] exptokseq = new int[mcc_expentries.Count][];
    for (int i = 0; i < mcc_expentries.Count; i++) {
      exptokseq[i] = (int[])mcc_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void mcc_rescan_token() {
    mcc_rescan = true;
    for (int i = 0; i < 19; i++) {
      MccCalls p = mcc_2_rtns[i];
      do {
        if (p.gen > mcc_gen) {
          mcc_la = p.arg; mcc_lastpos = mcc_scanpos = p.first;
          switch (i) {
            case 0: mcc_3_1(); break;
            case 1: mcc_3_2(); break;
            case 2: mcc_3_3(); break;
            case 3: mcc_3_4(); break;
            case 4: mcc_3_5(); break;
            case 5: mcc_3_6(); break;
            case 6: mcc_3_7(); break;
            case 7: mcc_3_8(); break;
            case 8: mcc_3_9(); break;
            case 9: mcc_3_10(); break;
            case 10: mcc_3_11(); break;
            case 11: mcc_3_12(); break;
            case 12: mcc_3_13(); break;
            case 13: mcc_3_14(); break;
            case 14: mcc_3_15(); break;
            case 15: mcc_3_16(); break;
            case 16: mcc_3_17(); break;
            case 17: mcc_3_18(); break;
            case 18: mcc_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    mcc_rescan = false;
  }

  private void mcc_save(int index, int xla) {
    MccCalls p = mcc_2_rtns[index];
    while (p.gen > mcc_gen) {
      if (p.next == null) { p = p.next = new MccCalls(); break; }
      p = p.next;
    }
    p.gen = mcc_gen + xla - mcc_la; p.first = token; p.arg = xla;
  }

  class MccCalls {
    public int gen;
    public Token first;
    public int arg;
    public MccCalls next;
  }

}
}
