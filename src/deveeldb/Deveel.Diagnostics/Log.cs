// 
//  Copyright 2010  Deveel
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

using System;
using System.IO;

namespace Deveel.Diagnostics {
	/// <summary>
	/// A log file/stream that logs some information generated by the system.
	/// </summary>
	/// <remarks>
	/// This is intended to help with debugging. It safely handles concurrent
	/// output to the log.
	/// </remarks>
	public class Log : IDisposable {
		/// <summary>
		/// The output stream where log information is output to.
		/// </summary>
		private readonly LogWriter logOutput;


		///<summary>
		///</summary>
		///<param name="file"></param>
		///<param name="size"></param>
		///<param name="maxCount"></param>
		public Log(string file, int size, int maxCount) {
			logOutput = new LogWriter(file, size, maxCount);
		}

		///<summary>
		///</summary>
		///<param name="file"></param>
		public Log(string file)
			// Defaults to a maximum of 12 512k log files
			: this(file, 512*1024, 12) {
		}

		protected Log() {
			logOutput = null;
		}

		~Log() {
			Dispose(false);
		}

		/// <summary>
		/// A <see cref="Log"/> that won't actually store a log.
		/// </summary>
		/// <remarks>
		/// This is useful for options where the user doesn't want anything 
		/// logged.
		/// </remarks>
		public static readonly Log Null = new NullLog();

		protected virtual void Dispose(bool disposing) {
			if (disposing) {
				if (logOutput != null)
					logOutput.Dispose();
			}
		}

		/// <summary>
		/// Writes an entry to the log file.
		/// </summary>
		/// <param name="text"></param>
		/// <remarks>
		/// The log file records the time the entry was put into the log, and 
		/// the string which is the log.
		/// </remarks>
		public virtual void Write(String text) {
			lock (this) {
				try {
					logOutput.Write("[");
					logOutput.Write(DateTime.Now.ToString());
					logOutput.Write("] ");
					logOutput.Write(text);
					logOutput.Flush();
				} catch (IOException) {
				}
			}
		}

		///<summary>
		///</summary>
		///<param name="text"></param>
		public virtual void WriteLine(String text) {
			lock (this) {
				try {
					logOutput.Write(text);
					logOutput.WriteLine();
					logOutput.Flush();
				} catch (IOException) {
				}
			}
		}

		/// <summary>
		/// Closes the log file.
		/// </summary>
		public virtual void Close() {
			lock (this) {
				try {
					logOutput.Close();
				} catch (IOException) {
				}
			}
		}

		/// <summary>
		/// An implementation of Log that doesn't log anything.
		/// </summary>
		private class NullLog : Log {
			public override void Write(String text) {
				// Don't do anything,
			}

			public override void WriteLine(String text) {
				// Don't do anything,
			}

			public override void Close() {
				// Don't do anything,
			}
		}

		public void Dispose() {
			Dispose(true);
			GC.SuppressFinalize(this);
		}
	}
}