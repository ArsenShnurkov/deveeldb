2009-10-20  Antonello Provenzano  <antonello@deveel.com>
	* SQLTypes.cs: added the members for interval type (SECOND,
	MINUTE, HOUR, DAY, MONTH, YEAR and INTERVAL)
	
2009-10-15  Antonello Provenzano  <antonello@deveel.com>
	* DatabaseConnection.cs: method GetDbConnection now returns
	a generic IDbConnection.
	* TransactionSystem.cs: now implements IDisposable pattern.

2009-10-14  Antonello Provenzano  <antonello@deveel.com>
	* TObject.cs: 
		- introduced implicit and explicit operators.
		- implemented the Mod function
	
2009-10-12  Antonello Provenzano  <antonello@deveel.com>
	* SelectableScheme.cs: removed methods WriteTo and ReadFrom 
	(present in the old version of McKoi), to prepare the
		introduction of new indices.
	* BlobStore.cs: removed references to #ZipLib to replace
	it with Deveel Zip.
	
2009-10-09  Antonello Provenzano  <antonello@deveel.com>
	* TableDataConglomerate.cs: global renaming for code clarity
		- SYS_INFO -> SYSTEM
		- SYSTEM.sUSRSchemaInfo -> SYSTEM.SCHEMA_INFO
	* Database.cs: 
		- renamed SYS_INFO schema to 'SYSTEM' for code clarity
		- renamed SYS_JDBC to INFORMATION_SCHEMA to comply with
		the SQL standards
			+ Catalogs -> CATALOGS (basically, no change)
			+ Schemas -> SCHEMATA
			+ Tables -> TABLES (basically, no change)
			+ Columns -> COLUMNS (basically, no change)
			+ ColumnPrivileges -> COLUMN_PRIVILEGES
			+ TablePrivileges -> TABLE_PRIVILEGES
	* ParameterSubstiturion.cs: implemented support for named
	parameters.

2009-10-05  Antonello Provenzano  <antonello@deveel.com>
	* DatabaseEventHandler.cs: implementation to handle a different
	behavior of the database event interface logic.
	* Database.cs: 
		- added an overload of the methods Execute and CreateEvent 
		to accept EventHandler delegates.
		- modified the RegisterShutDownDelegate method parameters
		to comply with the new database event interface logic.
	* DatabaseSystem.cs: 
		- modified the parameters of the method RegisterShutDownDelegate 
		to comply with the new database event interface logic.
		- Naming conventions applied

2009-10-04  Antonello Provenzano  <antonello@deveel.com>
	* IDatabaseEvent.cs: Created the interface to replace the logic
	of Database.CreateEevent, from delegate to interface implementation.
	* Database.cs: modified the parameter of CreateEvent and Execute
	methods to implement the new interface logic.
	* TransactionSystem.cs: modified the parameter of CreateEvent to 
	implement the new interface logic.
	* DatabaseDispatcher.cs: 
		- changed the parameter of CreateEvent to implement the new 
		interface logic.
		- modified the inner class DatabaseEvent to accomplish with
		the new interface logic.
		- run method now calls IDatabaseEvent.Execute instead of the
		EventHandler passed.
	* DatabaseConnection.cs: created the class FirePendingTriggerEventsImpl
	to comply with the new database event interface logic.
	* RIDList.cs: implemented the class CreateRIDCacheEventImpl to comply with
	the new database event interface logic.
	* TriggerManager.cs: the inner class FireTriggersDelegate
	now implements the IDatabaseEvent interface.
	* DatabaseSystem.cs: modified the parameter of the method Execute to
	support the new database event interface logic.
	* WorkerPool.cs: modified the parameter of the method Execute to
	support the new database event interface logic.
	* WorkerThread.cs: modified the parameter of the method Execute to
	support the new database event interface logic.