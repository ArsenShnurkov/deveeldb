/* Generated By:CSharpCC: Do not edit this line. SQLTokenManager.cs */
namespace Deveel.Data.Sql {

using System;
using System.Collections;
using Deveel.Data.Functions;
using Deveel.Data.Text;
using Deveel.Data.Util;

public class SQLTokenManager : SQLConstants {
  public  System.IO.TextWriter debugStream = Console.Out;
  public  void SetDebugStream(System.IO.TextWriter ds) { debugStream = ds; }
private int mccStopAtPos(int pos, int kind)
{
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   return pos + 1;
}
private int mccMoveStringLiteralDfa0_0()
{
   switch((int)curChar) {
      case 9:
         mccmatchedKind = 2;
         return mccMoveNfa_0(5, 0);
      case 10:
         mccmatchedKind = 3;
         return mccMoveNfa_0(5, 0);
      case 13:
         mccmatchedKind = 4;
         return mccMoveNfa_0(5, 0);
      case 32:
         mccmatchedKind = 1;
         return mccMoveNfa_0(5, 0);
      case 40:
         mccmatchedKind = 208;
         return mccMoveNfa_0(5, 0);
      case 41:
         mccmatchedKind = 209;
         return mccMoveNfa_0(5, 0);
      case 42:
         mccmatchedKind = 7;
         return mccMoveNfa_0(5, 0);
      case 43:
         mccmatchedKind = 16;
         return mccMoveNfa_0(5, 0);
      case 44:
         mccmatchedKind = 210;
         return mccMoveNfa_0(5, 0);
      case 45:
         mccmatchedKind = 17;
         return mccMoveNfa_0(5, 0);
      case 47:
         mccmatchedKind = 15;
         return mccMoveNfa_0(5, 0);
      case 59:
         mccmatchedKind = 207;
         return mccMoveNfa_0(5, 0);
      case 60:
         mccmatchedKind = 11;
         return mccMoveStringLiteralDfa1_0(8192L, 0L, 0L, 0L);
      case 61:
         mccmatchedKind = 8;
         return mccMoveStringLiteralDfa1_0(512L, 0L, 0L, 0L);
      case 62:
         mccmatchedKind = 10;
         return mccMoveStringLiteralDfa1_0(4096L, 0L, 0L, 0L);
      case 63:
         mccmatchedKind = 204;
         return mccMoveNfa_0(5, 0);
      case 65:
         return mccMoveStringLiteralDfa1_0(1293300568948736L, 4398314946688L, 4613937818241073152L, 0L);
      case 66:
         return mccMoveStringLiteralDfa1_0(36028797018963968L, 35184439197696L, 2353927290880L, 0L);
      case 67:
         return mccMoveStringLiteralDfa1_0(18014401864925184L, 1126999419787784L, 1080863911244267650L, 0L);
      case 68:
         return mccMoveStringLiteralDfa1_0(576460786935791616L, 3458905251308896256L, 1136018850048L, 0L);
      case 69:
         return mccMoveStringLiteralDfa1_0(9007203549708288L, 563027262832640L, 0L, 0L);
      case 70:
         return mccMoveStringLiteralDfa1_0(146366987889541120L, 9007199254740992L, 8598325248L, 0L);
      case 71:
         return mccMoveStringLiteralDfa1_0(0L, 288230376696971264L, 32768L, 0L);
      case 72:
         return mccMoveStringLiteralDfa1_0(0L, 274877906944L, 0L, 0L);
      case 73:
         return mccMoveStringLiteralDfa1_0(1152922742094299136L, -9223372019674710016L, 8796127649836L, 1L);
      case 74:
         return mccMoveStringLiteralDfa1_0(2305843009213693952L, 64L, 0L, 0L);
      case 75:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 4096L, 0L);
      case 76:
         return mccMoveStringLiteralDfa1_0(288230376151711744L, 4611694814520442897L, 1153765929536978944L, 0L);
      case 77:
         return mccMoveStringLiteralDfa1_0(0L, 6755399441055744L, 0L, 0L);
      case 78:
         return mccMoveStringLiteralDfa1_0(567348000980992L, 17592186044448L, 549757911040L, 2L);
      case 79:
         return mccMoveStringLiteralDfa1_0(282041912393728L, 576460754451431424L, -9223371761976868864L, 0L);
      case 80:
         return mccMoveStringLiteralDfa1_0(0L, 72057598332895232L, 132161L, 0L);
      case 82:
         return mccMoveStringLiteralDfa1_0(4503608217305088L, 36030997149523968L, 2337368206672396800L, 0L);
      case 83:
         return mccMoveStringLiteralDfa1_0(72092847171436544L, 18014432869220608L, 36064050110791680L, 0L);
      case 84:
         return mccMoveStringLiteralDfa1_0(4611688217450643456L, 144185556820049920L, 1271040810942480L, 0L);
      case 85:
         return mccMoveStringLiteralDfa1_0(70368811286528L, 549913100292L, 0L, 0L);
      case 86:
         return mccMoveStringLiteralDfa1_0(-9223372036854775808L, 281612415664128L, 87960930222080L, 0L);
      case 87:
         return mccMoveStringLiteralDfa1_0(0L, 1026L, 0L, 0L);
      case 97:
         return mccMoveStringLiteralDfa1_0(1293300568948736L, 4398314946688L, 4613937818241073152L, 0L);
      case 98:
         return mccMoveStringLiteralDfa1_0(36028797018963968L, 35184439197696L, 2353927290880L, 0L);
      case 99:
         return mccMoveStringLiteralDfa1_0(18014401864925184L, 1126999419787784L, 1080863911244267650L, 0L);
      case 100:
         return mccMoveStringLiteralDfa1_0(576460786935791616L, 3458905251308896256L, 1136018850048L, 0L);
      case 101:
         return mccMoveStringLiteralDfa1_0(9007203549708288L, 563027262832640L, 0L, 0L);
      case 102:
         return mccMoveStringLiteralDfa1_0(146366987889541120L, 9007199254740992L, 8598325248L, 0L);
      case 103:
         return mccMoveStringLiteralDfa1_0(0L, 288230376696971264L, 32768L, 0L);
      case 104:
         return mccMoveStringLiteralDfa1_0(0L, 274877906944L, 0L, 0L);
      case 105:
         return mccMoveStringLiteralDfa1_0(1152922742094299136L, -9223372019674710016L, 8796127649836L, 1L);
      case 106:
         return mccMoveStringLiteralDfa1_0(2305843009213693952L, 64L, 0L, 0L);
      case 107:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 4096L, 0L);
      case 108:
         return mccMoveStringLiteralDfa1_0(288230376151711744L, 4611694814520442897L, 1153765929536978944L, 0L);
      case 109:
         return mccMoveStringLiteralDfa1_0(0L, 6755399441055744L, 0L, 0L);
      case 110:
         return mccMoveStringLiteralDfa1_0(567348000980992L, 17592186044448L, 549757911040L, 2L);
      case 111:
         return mccMoveStringLiteralDfa1_0(282041912393728L, 576460754451431424L, -9223371761976868864L, 0L);
      case 112:
         return mccMoveStringLiteralDfa1_0(0L, 72057598332895232L, 132161L, 0L);
      case 114:
         return mccMoveStringLiteralDfa1_0(4503608217305088L, 36030997149523968L, 2337368206672396800L, 0L);
      case 115:
         return mccMoveStringLiteralDfa1_0(72092847171436544L, 18014432869220608L, 36064050110791680L, 0L);
      case 116:
         return mccMoveStringLiteralDfa1_0(4611688217450643456L, 144185556820049920L, 1271040810942480L, 0L);
      case 117:
         return mccMoveStringLiteralDfa1_0(70368811286528L, 549913100292L, 0L, 0L);
      case 118:
         return mccMoveStringLiteralDfa1_0(-9223372036854775808L, 281612415664128L, 87960930222080L, 0L);
      case 119:
         return mccMoveStringLiteralDfa1_0(0L, 1026L, 0L, 0L);
      case 124:
         return mccMoveStringLiteralDfa1_0(262144L, 0L, 0L, 0L);
      default :
         return mccMoveNfa_0(5, 0);
   }
}
private int mccMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 0);
   }
   switch((int)curChar) {
      case 61:
         if ((active0 & 512L) != 0L)
         {
            mccmatchedKind = 9;
            mccmatchedPos = 1;
         }
         else if ((active0 & 4096L) != 0L)
         {
            mccmatchedKind = 12;
            mccmatchedPos = 1;
         }
         else if ((active0 & 8192L) != 0L)
         {
            mccmatchedKind = 13;
            mccmatchedPos = 1;
         }
         break;
      case 65:
         return mccMoveStringLiteralDfa2_0(active0, 27021597764222976L, active1, 4689672591479165032L, active2, 72145557119827968L, active3, 0L);
      case 66:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 274877906944L, active3, 0L);
      case 67:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 4432674684928L, active2, 0L, active3, 0L);
      case 68:
         return mccMoveStringLiteralDfa2_0(active0, 1125899906842624L, active1, 0L, active2, 1048576L, active3, 0L);
      case 69:
         return mccMoveStringLiteralDfa2_0(active0, 865289297442373632L, active1, 1207151618286419968L, active2, 2373398104277521168L, active3, 0L);
      case 70:
         if ((active0 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 40;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 128L, active2, 0L, active3, 0L);
      case 71:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 17179869184L, active2, 0L, active3, 0L);
      case 72:
         return mccMoveStringLiteralDfa2_0(active0, 68727865344L, active1, 1049600L, active2, 536870914L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa2_0(active0, -9223372036854775808L, active1, 2308094809027420162L, active2, 1153066799072280576L, active3, 0L);
      case 76:
         return mccMoveStringLiteralDfa2_0(active0, 290271086510080L, active1, 0L, active2, 8992587776L, active3, 0L);
      case 77:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 35184372088836L, active3, 0L);
      case 78:
         if ((active0 & 549755813888L) != 0L)
         {
            mccmatchedKind = 39;
            mccmatchedPos = 1;
         }
         else if ((active3 & 1L) != 0L)
         {
            mccmatchedKind = 192;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 1152939097329762304L, active1, -9223371486960353280L, active2, 4611694814553989160L, active3, 0L);
      case 79:
         if ((active0 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 41;
            mccmatchedPos = 1;
         }
         else if ((active0 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 42;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 2420684811522801664L, active1, 1099511628305L, active2, 846658315290752L, active3, 2L);
      case 80:
         return mccMoveStringLiteralDfa2_0(active0, 17246978048L, active1, 2147483648L, active2, 0L, active3, 0L);
      case 82:
         if ((active2 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 191;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 4755801206641655808L, active1, 1008876685820690432L, active2, 1125899907007553L, active3, 0L);
      case 83:
         if ((active0 & 137438953472L) != 0L)
         {
            mccmatchedKind = 37;
            mccmatchedPos = 1;
         }
         else if ((active0 & 274877906944L) != 0L)
         {
            mccmatchedKind = 38;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 211106232532992L, active1, 18874372L, active2, 0L, active3, 0L);
      case 84:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 256L, active2, 68719476736L, active3, 0L);
      case 85:
         return mccMoveStringLiteralDfa2_0(active0, 1048576L, active1, 9007203550232576L, active2, 1011058666108878848L, active3, 0L);
      case 88:
         return mccMoveStringLiteralDfa2_0(active0, 4294967296L, active1, 563027262832640L, active2, 0L, active3, 0L);
      case 89:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 2048L, active2, 0L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa2_0(active0, 27021597764222976L, active1, 4689672591479165032L, active2, 72145557119827968L, active3, 0L);
      case 98:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 274877906944L, active3, 0L);
      case 99:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 4432674684928L, active2, 0L, active3, 0L);
      case 100:
         return mccMoveStringLiteralDfa2_0(active0, 1125899906842624L, active1, 0L, active2, 1048576L, active3, 0L);
      case 101:
         return mccMoveStringLiteralDfa2_0(active0, 865289297442373632L, active1, 1207151618286419968L, active2, 2373398104277521168L, active3, 0L);
      case 102:
         if ((active0 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 40;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 128L, active2, 0L, active3, 0L);
      case 103:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 17179869184L, active2, 0L, active3, 0L);
      case 104:
         return mccMoveStringLiteralDfa2_0(active0, 68727865344L, active1, 1049600L, active2, 536870914L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa2_0(active0, -9223372036854775808L, active1, 2308094809027420162L, active2, 1153066799072280576L, active3, 0L);
      case 108:
         return mccMoveStringLiteralDfa2_0(active0, 290271086510080L, active1, 0L, active2, 8992587776L, active3, 0L);
      case 109:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 35184372088836L, active3, 0L);
      case 110:
         if ((active0 & 549755813888L) != 0L)
         {
            mccmatchedKind = 39;
            mccmatchedPos = 1;
         }
         else if ((active3 & 1L) != 0L)
         {
            mccmatchedKind = 192;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 1152939097329762304L, active1, -9223371486960353280L, active2, 4611694814553989160L, active3, 0L);
      case 111:
         if ((active0 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 41;
            mccmatchedPos = 1;
         }
         else if ((active0 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 42;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 2420684811522801664L, active1, 1099511628305L, active2, 846658315290752L, active3, 2L);
      case 112:
         return mccMoveStringLiteralDfa2_0(active0, 17246978048L, active1, 2147483648L, active2, 0L, active3, 0L);
      case 114:
         if ((active2 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 191;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 4755801206641655808L, active1, 1008876685820690432L, active2, 1125899907007553L, active3, 0L);
      case 115:
         if ((active0 & 137438953472L) != 0L)
         {
            mccmatchedKind = 37;
            mccmatchedPos = 1;
         }
         else if ((active0 & 274877906944L) != 0L)
         {
            mccmatchedKind = 38;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 211106232532992L, active1, 18874372L, active2, 0L, active3, 0L);
      case 116:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 256L, active2, 68719476736L, active3, 0L);
      case 117:
         return mccMoveStringLiteralDfa2_0(active0, 1048576L, active1, 9007203550232576L, active2, 1011058666108878848L, active3, 0L);
      case 120:
         return mccMoveStringLiteralDfa2_0(active0, 4294967296L, active1, 563027262832640L, active2, 0L, active3, 0L);
      case 121:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 2048L, active2, 0L, active3, 0L);
      case 124:
         if ((active0 & 262144L) != 0L)
         {
            mccmatchedKind = 18;
            mccmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 1);
}
private int mccMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 1);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 1);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 144123984194044160L, active2, 14671883765022722L, active3, 0L);
      case 66:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4294983680L, active2, 0L, active3, 0L);
      case 67:
         if ((active0 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 47;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 9007199254740992L, active1, -9223367630218323967L, active2, 1099511889920L, active3, 0L);
      case 68:
         if ((active0 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 48;
            mccmatchedPos = 2;
         }
         else if ((active0 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 50;
            mccmatchedPos = 2;
         }
         else if ((active2 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 190;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 67108864L, active1, 576460752303554560L, active2, 24576L, active3, 0L);
      case 69:
         if ((active0 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 46;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, -9223372036720558080L, active1, 562949954470916L, active2, 1048576L, active3, 0L);
      case 70:
         return mccMoveStringLiteralDfa3_0(active0, 288230376151711744L, active1, 1153062242162311168L, active2, 768L, active3, 0L);
      case 71:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 8192L, active2, 2305843026393563136L, active3, 0L);
      case 72:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 34359738368L, active2, 0L, active3, 0L);
      case 73:
         return mccMoveStringLiteralDfa3_0(active0, 6917529027641081856L, active1, 70987225759744L, active2, 132168L, active3, 0L);
      case 74:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 274877906944L, active3, 0L);
      case 75:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 1152921504606846976L, active3, 0L);
      case 76:
         if ((active0 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 43;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 18014407402455040L, active1, 1127136991641600L, active2, 8454144L, active3, 0L);
      case 77:
         return mccMoveStringLiteralDfa3_0(active0, 72057597259153408L, active1, 32800L, active2, 141291539136532L, active3, 0L);
      case 78:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4622945034675748880L, active2, 848960419790976L, active3, 0L);
      case 79:
         return mccMoveStringLiteralDfa3_0(active0, 144115188088438784L, active1, 288230376688844800L, active2, 2208015876097L, active3, 0L);
      case 80:
         return mccMoveStringLiteralDfa3_0(active0, 4294967296L, active1, 0L, active2, 18014398509481984L, active3, 0L);
      case 81:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 18014398509481984L, active2, 0L, active3, 0L);
      case 82:
         if ((active0 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 51;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 281474976710656L, active2, 1044923143200180224L, active3, 0L);
      case 83:
         return mccMoveStringLiteralDfa3_0(active0, 576460787200032768L, active1, 2413929400270585864L, active2, 72057594037927936L, active3, 0L);
      case 84:
         if ((active0 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 45;
            mccmatchedPos = 2;
         }
         else if ((active2 & 16777216L) != 0L)
         {
            mccmatchedKind = 152;
            mccmatchedPos = 2;
         }
         else if ((active2 & 33554432L) != 0L)
         {
            mccmatchedKind = 153;
            mccmatchedPos = 2;
         }
         else if ((active3 & 2L) != 0L)
         {
            mccmatchedKind = 193;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 1188950318822457344L, active1, 54978031386754L, active2, 2260598054191136L, active3, 0L);
      case 85:
         return mccMoveStringLiteralDfa3_0(active0, 68719476736L, active1, 512L, active2, 34359738368L, active3, 0L);
      case 86:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 275951648832L, active2, 0L, active3, 0L);
      case 87:
         if ((active0 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 49;
            mccmatchedPos = 2;
         }
         else if ((active0 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 52;
            mccmatchedPos = 2;
         }
         break;
      case 88:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4503599627370496L, active2, 1073741824L, active3, 0L);
      case 89:
         if ((active0 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 44;
            mccmatchedPos = 2;
         }
         else if ((active2 & 4096L) != 0L)
         {
            mccmatchedKind = 140;
            mccmatchedPos = 2;
         }
         break;
      case 95:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 2097152L, active3, 0L);
      case 97:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 144123984194044160L, active2, 14671883765022722L, active3, 0L);
      case 98:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4294983680L, active2, 0L, active3, 0L);
      case 99:
         if ((active0 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 47;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 9007199254740992L, active1, -9223367630218323967L, active2, 1099511889920L, active3, 0L);
      case 100:
         if ((active0 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 48;
            mccmatchedPos = 2;
         }
         else if ((active0 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 50;
            mccmatchedPos = 2;
         }
         else if ((active2 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 190;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 67108864L, active1, 576460752303554560L, active2, 24576L, active3, 0L);
      case 101:
         if ((active0 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 46;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, -9223372036720558080L, active1, 562949954470916L, active2, 1048576L, active3, 0L);
      case 102:
         return mccMoveStringLiteralDfa3_0(active0, 288230376151711744L, active1, 1153062242162311168L, active2, 768L, active3, 0L);
      case 103:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 8192L, active2, 2305843026393563136L, active3, 0L);
      case 104:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 34359738368L, active2, 0L, active3, 0L);
      case 105:
         return mccMoveStringLiteralDfa3_0(active0, 6917529027641081856L, active1, 70987225759744L, active2, 132168L, active3, 0L);
      case 106:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 274877906944L, active3, 0L);
      case 107:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 1152921504606846976L, active3, 0L);
      case 108:
         if ((active0 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 43;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 18014407402455040L, active1, 1127136991641600L, active2, 8454144L, active3, 0L);
      case 109:
         return mccMoveStringLiteralDfa3_0(active0, 72057597259153408L, active1, 32800L, active2, 141291539136532L, active3, 0L);
      case 110:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4622945034675748880L, active2, 848960419790976L, active3, 0L);
      case 111:
         return mccMoveStringLiteralDfa3_0(active0, 144115188088438784L, active1, 288230376688844800L, active2, 2208015876097L, active3, 0L);
      case 112:
         return mccMoveStringLiteralDfa3_0(active0, 4294967296L, active1, 0L, active2, 18014398509481984L, active3, 0L);
      case 113:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 18014398509481984L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 51;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 281474976710656L, active2, 1044923143200180224L, active3, 0L);
      case 115:
         return mccMoveStringLiteralDfa3_0(active0, 576460787200032768L, active1, 2413929400270585864L, active2, 72057594037927936L, active3, 0L);
      case 116:
         if ((active0 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 45;
            mccmatchedPos = 2;
         }
         else if ((active2 & 16777216L) != 0L)
         {
            mccmatchedKind = 152;
            mccmatchedPos = 2;
         }
         else if ((active2 & 33554432L) != 0L)
         {
            mccmatchedKind = 153;
            mccmatchedPos = 2;
         }
         else if ((active3 & 2L) != 0L)
         {
            mccmatchedKind = 193;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 1188950318822457344L, active1, 54978031386754L, active2, 2260598054191136L, active3, 0L);
      case 117:
         return mccMoveStringLiteralDfa3_0(active0, 68719476736L, active1, 512L, active2, 34359738368L, active3, 0L);
      case 118:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 275951648832L, active2, 0L, active3, 0L);
      case 119:
         if ((active0 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 49;
            mccmatchedPos = 2;
         }
         else if ((active0 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 52;
            mccmatchedPos = 2;
         }
         break;
      case 120:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4503599627370496L, active2, 1073741824L, active3, 0L);
      case 121:
         if ((active0 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 44;
            mccmatchedPos = 2;
         }
         else if ((active2 & 4096L) != 0L)
         {
            mccmatchedKind = 140;
            mccmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 2);
}
private int mccMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return mccMoveNfa_0(5, 2);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 2);
   }
   switch((int)curChar) {
      case 65:
         if ((active1 & 64L) != 0L)
         {
            mccmatchedKind = 70;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 201326592L, active1, 140737488355328L, active2, 146028888064L);
      case 66:
         if ((active2 & 134217728L) != 0L)
         {
            mccmatchedKind = 155;
            mccmatchedPos = 3;
         }
         else if ((active2 & 268435456L) != 0L)
         {
            mccmatchedKind = 156;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 70403103916032L);
      case 67:
         if ((active0 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 59;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 34359738368L, active1, 9570149209210880L, active2, 72075186223972353L);
      case 68:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 8796093022208L, active2, 13510798884208640L);
      case 69:
         if ((active0 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 56;
            mccmatchedPos = 3;
         }
         else if ((active1 & 32L) != 0L)
         {
            mccmatchedKind = 69;
            mccmatchedPos = 3;
         }
         else if ((active2 & 2147483648L) != 0L)
         {
            mccmatchedKind = 159;
            mccmatchedPos = 3;
         }
         else if ((active2 & 4294967296L) != 0L)
         {
            mccmatchedKind = 160;
            mccmatchedPos = 3;
         }
         else if ((active2 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 188;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 855638016L, active1, 1729382299860664448L, active2, 2324007765938301732L);
      case 71:
         if ((active1 & 16L) != 0L)
         {
            mccmatchedKind = 68;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4611756387188342784L, active2, 844424930131968L);
      case 72:
         if ((active0 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 53;
            mccmatchedPos = 3;
         }
         else if ((active0 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 55;
            mccmatchedPos = 3;
         }
         else if ((active1 & 2L) != 0L)
         {
            mccmatchedKind = 65;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 12288L, active2, 0L);
      case 73:
         return mccMoveStringLiteralDfa4_0(active0, 17179869184L, active1, 144115465369714688L, active2, 36029982429937664L);
      case 75:
         if ((active1 & 1L) != 0L)
         {
            mccmatchedKind = 64;
            mccmatchedPos = 3;
         }
         break;
      case 76:
         if ((active0 & 1048576L) != 0L)
         {
            mccmatchedKind = 20;
            mccmatchedPos = 3;
         }
         else if ((active0 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 54;
            mccmatchedPos = 3;
         }
         else if ((active2 & 67108864L) != 0L)
         {
            mccmatchedKind = 154;
            mccmatchedPos = 3;
         }
         else if ((active2 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 169;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 12884901888L, active1, 1125904201828352L, active2, 35184380542976L);
      case 77:
         if ((active0 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 57;
            mccmatchedPos = 3;
         }
         else if ((active0 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 62;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 1073741824L, active1, 0L, active2, 132096L);
      case 78:
         if ((active0 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 61;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 10486272L, active2, 1125899907891200L);
      case 79:
         if ((active0 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 60;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4416505643008L, active2, 2251799818141696L);
      case 80:
         if ((active0 & 4194304L) != 0L)
         {
            mccmatchedKind = 22;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 2147483648L, active1, 0L, active2, 16L);
      case 81:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 549755813888L, active2, 0L);
      case 82:
         if ((active1 & 4L) != 0L)
         {
            mccmatchedKind = 66;
            mccmatchedPos = 3;
         }
         else if ((active2 & 536870912L) != 0L)
         {
            mccmatchedKind = 157;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, -9223372036854774528L, active2, 1008806316530991106L);
      case 83:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 72057662757666816L, active2, 128L);
      case 84:
         if ((active0 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 58;
            mccmatchedPos = 3;
         }
         else if ((active1 & 8L) != 0L)
         {
            mccmatchedKind = 67;
            mccmatchedPos = 3;
         }
         else if ((active2 & 1073741824L) != 0L)
         {
            mccmatchedKind = 158;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 68719476736L, active1, 2341871806232657920L, active2, 524296L);
      case 85:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 306265803391500288L, active2, 32768L);
      case 86:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 6755399441055744L, active2, 64L);
      case 87:
         if ((active0 & 8388608L) != 0L)
         {
            mccmatchedKind = 23;
            mccmatchedPos = 3;
         }
         else if ((active0 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 63;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 35184372088832L, active2, 0L);
      case 89:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 281474976710656L, active2, 4398046511104L);
      case 97:
         if ((active1 & 64L) != 0L)
         {
            mccmatchedKind = 70;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 201326592L, active1, 140737488355328L, active2, 146028888064L);
      case 98:
         if ((active2 & 134217728L) != 0L)
         {
            mccmatchedKind = 155;
            mccmatchedPos = 3;
         }
         else if ((active2 & 268435456L) != 0L)
         {
            mccmatchedKind = 156;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 70403103916032L);
      case 99:
         if ((active0 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 59;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 34359738368L, active1, 9570149209210880L, active2, 72075186223972353L);
      case 100:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 8796093022208L, active2, 13510798884208640L);
      case 101:
         if ((active0 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 56;
            mccmatchedPos = 3;
         }
         else if ((active1 & 32L) != 0L)
         {
            mccmatchedKind = 69;
            mccmatchedPos = 3;
         }
         else if ((active2 & 2147483648L) != 0L)
         {
            mccmatchedKind = 159;
            mccmatchedPos = 3;
         }
         else if ((active2 & 4294967296L) != 0L)
         {
            mccmatchedKind = 160;
            mccmatchedPos = 3;
         }
         else if ((active2 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 188;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 855638016L, active1, 1729382299860664448L, active2, 2324007765938301732L);
      case 103:
         if ((active1 & 16L) != 0L)
         {
            mccmatchedKind = 68;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4611756387188342784L, active2, 844424930131968L);
      case 104:
         if ((active0 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 53;
            mccmatchedPos = 3;
         }
         else if ((active0 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 55;
            mccmatchedPos = 3;
         }
         else if ((active1 & 2L) != 0L)
         {
            mccmatchedKind = 65;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 12288L, active2, 0L);
      case 105:
         return mccMoveStringLiteralDfa4_0(active0, 17179869184L, active1, 144115465369714688L, active2, 36029982429937664L);
      case 107:
         if ((active1 & 1L) != 0L)
         {
            mccmatchedKind = 64;
            mccmatchedPos = 3;
         }
         break;
      case 108:
         if ((active0 & 1048576L) != 0L)
         {
            mccmatchedKind = 20;
            mccmatchedPos = 3;
         }
         else if ((active0 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 54;
            mccmatchedPos = 3;
         }
         else if ((active2 & 67108864L) != 0L)
         {
            mccmatchedKind = 154;
            mccmatchedPos = 3;
         }
         else if ((active2 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 169;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 12884901888L, active1, 1125904201828352L, active2, 35184380542976L);
      case 109:
         if ((active0 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 57;
            mccmatchedPos = 3;
         }
         else if ((active0 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 62;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 1073741824L, active1, 0L, active2, 132096L);
      case 110:
         if ((active0 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 61;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 10486272L, active2, 1125899907891200L);
      case 111:
         if ((active0 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 60;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4416505643008L, active2, 2251799818141696L);
      case 112:
         if ((active0 & 4194304L) != 0L)
         {
            mccmatchedKind = 22;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 2147483648L, active1, 0L, active2, 16L);
      case 113:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 549755813888L, active2, 0L);
      case 114:
         if ((active1 & 4L) != 0L)
         {
            mccmatchedKind = 66;
            mccmatchedPos = 3;
         }
         else if ((active2 & 536870912L) != 0L)
         {
            mccmatchedKind = 157;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, -9223372036854774528L, active2, 1008806316530991106L);
      case 115:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 72057662757666816L, active2, 128L);
      case 116:
         if ((active0 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 58;
            mccmatchedPos = 3;
         }
         else if ((active1 & 8L) != 0L)
         {
            mccmatchedKind = 67;
            mccmatchedPos = 3;
         }
         else if ((active2 & 1073741824L) != 0L)
         {
            mccmatchedKind = 158;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 68719476736L, active1, 2341871806232657920L, active2, 524296L);
      case 117:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 306265803391500288L, active2, 32768L);
      case 118:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 6755399441055744L, active2, 64L);
      case 119:
         if ((active0 & 8388608L) != 0L)
         {
            mccmatchedKind = 23;
            mccmatchedPos = 3;
         }
         else if ((active0 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 63;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 35184372088832L, active2, 0L);
      case 121:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 281474976710656L, active2, 4398046511104L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 3);
}
private int mccMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 3);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 3);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 15762598695796736L);
      case 65:
         return mccMoveStringLiteralDfa5_0(active0, 6442450944L, active1, 6755399441055744L, active2, 126100789566571522L);
      case 66:
         return mccMoveStringLiteralDfa5_0(active0, 8589934592L, active1, 1125899906842624L, active2, 0L);
      case 67:
         return mccMoveStringLiteralDfa5_0(active0, 33554432L, active1, 134217728L, active2, 274877906944L);
      case 68:
         return mccMoveStringLiteralDfa5_0(active0, 68719476736L, active1, 0L, active2, 4L);
      case 69:
         if ((active1 & 1024L) != 0L)
         {
            mccmatchedKind = 74;
            mccmatchedPos = 4;
         }
         else if ((active1 & 2048L) != 0L)
         {
            mccmatchedKind = 75;
            mccmatchedPos = 4;
         }
         else if ((active1 & 4096L) != 0L)
         {
            mccmatchedKind = 76;
            mccmatchedPos = 4;
         }
         else if ((active1 & 16384L) != 0L)
         {
            mccmatchedKind = 78;
            mccmatchedPos = 4;
         }
         else if ((active1 & 16777216L) != 0L)
         {
            mccmatchedKind = 88;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, -9205322316534251520L, active2, 1008806316533088257L);
      case 71:
         if ((active1 & 2097152L) != 0L)
         {
            mccmatchedKind = 85;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 70368744177664L, active2, 8796093022208L);
      case 72:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 17592186044416L);
      case 73:
         return mccMoveStringLiteralDfa5_0(active0, 1073741824L, active1, 2306133284578394112L, active2, 74766791215176L);
      case 75:
         if ((active1 & 1048576L) != 0L)
         {
            mccmatchedKind = 84;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 1073741824L, active2, 0L);
      case 76:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 144115188075855872L, active2, 35218731827200L);
      case 77:
         return mccMoveStringLiteralDfa5_0(active0, 17179869184L, active1, 1133871366144L, active2, 1099511627776L);
      case 78:
         if ((active1 & 4194304L) != 0L)
         {
            mccmatchedKind = 86;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 274877906944L, active2, 85903802368L);
      case 79:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 2415919104L, active2, 16L);
      case 80:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 288230385278517248L, active2, 32768L);
      case 82:
         if ((active0 & 16777216L) != 0L)
         {
            mccmatchedKind = 24;
            mccmatchedPos = 4;
         }
         else if ((active1 & 128L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 4;
         }
         else if ((active1 & 65536L) != 0L)
         {
            mccmatchedKind = 80;
            mccmatchedPos = 4;
         }
         else if ((active1 & 524288L) != 0L)
         {
            mccmatchedKind = 83;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 34896609280L, active1, 1765430862419066880L, active2, 687194768160L);
      case 83:
         if ((active1 & 262144L) != 0L)
         {
            mccmatchedKind = 82;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 1266637395197952L);
      case 84:
         if ((active1 & 256L) != 0L)
         {
            mccmatchedKind = 72;
            mccmatchedPos = 4;
         }
         else if ((active1 & 512L) != 0L)
         {
            mccmatchedKind = 73;
            mccmatchedPos = 4;
         }
         else if ((active1 & 8192L) != 0L)
         {
            mccmatchedKind = 77;
            mccmatchedPos = 4;
         }
         else if ((active1 & 32768L) != 0L)
         {
            mccmatchedKind = 79;
            mccmatchedPos = 4;
         }
         else if ((active1 & 8388608L) != 0L)
         {
            mccmatchedKind = 87;
            mccmatchedPos = 4;
         }
         else if ((active2 & 8589934592L) != 0L)
         {
            mccmatchedKind = 161;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 469762048L, active1, 9007267974217728L, active2, 1048704L);
      case 85:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 4612394653671489536L, active2, 0L);
      case 86:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 844424930131968L);
      case 87:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 72057594037927936L, active2, 0L);
      case 88:
         if ((active1 & 131072L) != 0L)
         {
            mccmatchedKind = 81;
            mccmatchedPos = 4;
         }
         else if ((active2 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 189;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 24576L);
      case 95:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 8388608L);
      case 97:
         return mccMoveStringLiteralDfa5_0(active0, 6442450944L, active1, 6755399441055744L, active2, 126100789566571522L);
      case 98:
         return mccMoveStringLiteralDfa5_0(active0, 8589934592L, active1, 1125899906842624L, active2, 0L);
      case 99:
         return mccMoveStringLiteralDfa5_0(active0, 33554432L, active1, 134217728L, active2, 274877906944L);
      case 100:
         return mccMoveStringLiteralDfa5_0(active0, 68719476736L, active1, 0L, active2, 4L);
      case 101:
         if ((active1 & 1024L) != 0L)
         {
            mccmatchedKind = 74;
            mccmatchedPos = 4;
         }
         else if ((active1 & 2048L) != 0L)
         {
            mccmatchedKind = 75;
            mccmatchedPos = 4;
         }
         else if ((active1 & 4096L) != 0L)
         {
            mccmatchedKind = 76;
            mccmatchedPos = 4;
         }
         else if ((active1 & 16384L) != 0L)
         {
            mccmatchedKind = 78;
            mccmatchedPos = 4;
         }
         else if ((active1 & 16777216L) != 0L)
         {
            mccmatchedKind = 88;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, -9205322316534251520L, active2, 1008806316533088257L);
      case 103:
         if ((active1 & 2097152L) != 0L)
         {
            mccmatchedKind = 85;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 70368744177664L, active2, 8796093022208L);
      case 104:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 17592186044416L);
      case 105:
         return mccMoveStringLiteralDfa5_0(active0, 1073741824L, active1, 2306133284578394112L, active2, 74766791215176L);
      case 107:
         if ((active1 & 1048576L) != 0L)
         {
            mccmatchedKind = 84;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 1073741824L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 144115188075855872L, active2, 35218731827200L);
      case 109:
         return mccMoveStringLiteralDfa5_0(active0, 17179869184L, active1, 1133871366144L, active2, 1099511627776L);
      case 110:
         if ((active1 & 4194304L) != 0L)
         {
            mccmatchedKind = 86;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 274877906944L, active2, 85903802368L);
      case 111:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 2415919104L, active2, 16L);
      case 112:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 288230385278517248L, active2, 32768L);
      case 114:
         if ((active0 & 16777216L) != 0L)
         {
            mccmatchedKind = 24;
            mccmatchedPos = 4;
         }
         else if ((active1 & 128L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 4;
         }
         else if ((active1 & 65536L) != 0L)
         {
            mccmatchedKind = 80;
            mccmatchedPos = 4;
         }
         else if ((active1 & 524288L) != 0L)
         {
            mccmatchedKind = 83;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 34896609280L, active1, 1765430862419066880L, active2, 687194768160L);
      case 115:
         if ((active1 & 262144L) != 0L)
         {
            mccmatchedKind = 82;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 1266637395197952L);
      case 116:
         if ((active1 & 256L) != 0L)
         {
            mccmatchedKind = 72;
            mccmatchedPos = 4;
         }
         else if ((active1 & 512L) != 0L)
         {
            mccmatchedKind = 73;
            mccmatchedPos = 4;
         }
         else if ((active1 & 8192L) != 0L)
         {
            mccmatchedKind = 77;
            mccmatchedPos = 4;
         }
         else if ((active1 & 32768L) != 0L)
         {
            mccmatchedKind = 79;
            mccmatchedPos = 4;
         }
         else if ((active1 & 8388608L) != 0L)
         {
            mccmatchedKind = 87;
            mccmatchedPos = 4;
         }
         else if ((active2 & 8589934592L) != 0L)
         {
            mccmatchedKind = 161;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 469762048L, active1, 9007267974217728L, active2, 1048704L);
      case 117:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 4612394653671489536L, active2, 0L);
      case 118:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 844424930131968L);
      case 119:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 72057594037927936L, active2, 0L);
      case 120:
         if ((active1 & 131072L) != 0L)
         {
            mccmatchedKind = 81;
            mccmatchedPos = 4;
         }
         else if ((active2 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 189;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 24576L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 4);
}
private int mccMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 4);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 4);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 864691128455135232L, active2, 32768L);
      case 65:
         if ((active1 & 34359738368L) != 0L)
         {
            mccmatchedKind = 99;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 8589934592L, active1, 4612829510520274944L, active2, 1989016535171080L);
      case 67:
         if ((active1 & 4294967296L) != 0L)
         {
            mccmatchedKind = 96;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 2147483648L, active1, 0L, active2, 6755399443152898L);
      case 68:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 72057594046578689L);
      case 69:
         if ((active0 & 67108864L) != 0L)
         {
            mccmatchedKind = 26;
            mccmatchedPos = 5;
         }
         else if ((active0 & 134217728L) != 0L)
         {
            mccmatchedKind = 27;
            mccmatchedPos = 5;
         }
         else if ((active0 & 268435456L) != 0L)
         {
            mccmatchedKind = 28;
            mccmatchedPos = 5;
         }
         else if ((active1 & 67108864L) != 0L)
         {
            mccmatchedKind = 90;
            mccmatchedPos = 5;
         }
         else if ((active1 & 1073741824L) != 0L)
         {
            mccmatchedKind = 94;
            mccmatchedPos = 5;
         }
         else if ((active1 & 17179869184L) != 0L)
         {
            mccmatchedKind = 98;
            mccmatchedPos = 5;
         }
         else if ((active1 & 549755813888L) != 0L)
         {
            mccmatchedKind = 103;
            mccmatchedPos = 5;
         }
         else if ((active2 & 34359738368L) != 0L)
         {
            mccmatchedKind = 163;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 105553116266496L, active2, 8796093022720L);
      case 71:
         if ((active1 & 274877906944L) != 0L)
         {
            mccmatchedKind = 102;
            mccmatchedPos = 5;
         }
         else if ((active2 & 68719476736L) != 0L)
         {
            mccmatchedKind = 164;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 2048L);
      case 73:
         return mccMoveStringLiteralDfa6_0(active0, 55834574848L, active1, 189151184349560832L, active2, 35734133145604L);
      case 75:
         if ((active1 & 134217728L) != 0L)
         {
            mccmatchedKind = 91;
            mccmatchedPos = 5;
         }
         break;
      case 76:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 6896136929411072L, active2, 36028797018964032L);
      case 77:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, -9223372036854775808L, active2, 0L);
      case 78:
         if ((active1 & 33554432L) != 0L)
         {
            mccmatchedKind = 89;
            mccmatchedPos = 5;
         }
         else if ((active1 & 268435456L) != 0L)
         {
            mccmatchedKind = 92;
            mccmatchedPos = 5;
         }
         else if ((active1 & 2147483648L) != 0L)
         {
            mccmatchedKind = 95;
            mccmatchedPos = 5;
         }
         else if ((active1 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 104;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 2324154275862675456L, active2, 1008881083321679872L);
      case 79:
         return mccMoveStringLiteralDfa6_0(active0, 68719476736L, active1, 72057594037927936L, active2, 0L);
      case 82:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 1152921504606846976L, active2, 132496L);
      case 83:
         if ((active1 & 536870912L) != 0L)
         {
            mccmatchedKind = 93;
            mccmatchedPos = 5;
         }
         else if ((active1 & 68719476736L) != 0L)
         {
            mccmatchedKind = 100;
            mccmatchedPos = 5;
         }
         else if ((active1 & 137438953472L) != 0L)
         {
            mccmatchedKind = 101;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 32L);
      case 84:
         if ((active0 & 33554432L) != 0L)
         {
            mccmatchedKind = 25;
            mccmatchedPos = 5;
         }
         else if ((active0 & 536870912L) != 0L)
         {
            mccmatchedKind = 29;
            mccmatchedPos = 5;
         }
         else if ((active0 & 1073741824L) != 0L)
         {
            mccmatchedKind = 30;
            mccmatchedPos = 5;
         }
         else if ((active1 & 8589934592L) != 0L)
         {
            mccmatchedKind = 97;
            mccmatchedPos = 5;
         }
         else if ((active2 & 17179869184L) != 0L)
         {
            mccmatchedKind = 162;
            mccmatchedPos = 5;
         }
         else if ((active2 & 274877906944L) != 0L)
         {
            mccmatchedKind = 166;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 562949953421312L, active2, 18155135997902848L);
      case 85:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 9007199254740992L);
      case 89:
         if ((active2 & 137438953472L) != 0L)
         {
            mccmatchedKind = 165;
            mccmatchedPos = 5;
         }
         break;
      case 95:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 24576L);
      case 97:
         if ((active1 & 34359738368L) != 0L)
         {
            mccmatchedKind = 99;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 8589934592L, active1, 4612829510520274944L, active2, 1989016535171080L);
      case 99:
         if ((active1 & 4294967296L) != 0L)
         {
            mccmatchedKind = 96;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 2147483648L, active1, 0L, active2, 6755399443152898L);
      case 100:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 72057594046578689L);
      case 101:
         if ((active0 & 67108864L) != 0L)
         {
            mccmatchedKind = 26;
            mccmatchedPos = 5;
         }
         else if ((active0 & 134217728L) != 0L)
         {
            mccmatchedKind = 27;
            mccmatchedPos = 5;
         }
         else if ((active0 & 268435456L) != 0L)
         {
            mccmatchedKind = 28;
            mccmatchedPos = 5;
         }
         else if ((active1 & 67108864L) != 0L)
         {
            mccmatchedKind = 90;
            mccmatchedPos = 5;
         }
         else if ((active1 & 1073741824L) != 0L)
         {
            mccmatchedKind = 94;
            mccmatchedPos = 5;
         }
         else if ((active1 & 17179869184L) != 0L)
         {
            mccmatchedKind = 98;
            mccmatchedPos = 5;
         }
         else if ((active1 & 549755813888L) != 0L)
         {
            mccmatchedKind = 103;
            mccmatchedPos = 5;
         }
         else if ((active2 & 34359738368L) != 0L)
         {
            mccmatchedKind = 163;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 105553116266496L, active2, 8796093022720L);
      case 103:
         if ((active1 & 274877906944L) != 0L)
         {
            mccmatchedKind = 102;
            mccmatchedPos = 5;
         }
         else if ((active2 & 68719476736L) != 0L)
         {
            mccmatchedKind = 164;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 2048L);
      case 105:
         return mccMoveStringLiteralDfa6_0(active0, 55834574848L, active1, 189151184349560832L, active2, 35734133145604L);
      case 107:
         if ((active1 & 134217728L) != 0L)
         {
            mccmatchedKind = 91;
            mccmatchedPos = 5;
         }
         break;
      case 108:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 6896136929411072L, active2, 36028797018964032L);
      case 109:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, -9223372036854775808L, active2, 0L);
      case 110:
         if ((active1 & 33554432L) != 0L)
         {
            mccmatchedKind = 89;
            mccmatchedPos = 5;
         }
         else if ((active1 & 268435456L) != 0L)
         {
            mccmatchedKind = 92;
            mccmatchedPos = 5;
         }
         else if ((active1 & 2147483648L) != 0L)
         {
            mccmatchedKind = 95;
            mccmatchedPos = 5;
         }
         else if ((active1 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 104;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 2324154275862675456L, active2, 1008881083321679872L);
      case 111:
         return mccMoveStringLiteralDfa6_0(active0, 68719476736L, active1, 72057594037927936L, active2, 0L);
      case 114:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 1152921504606846976L, active2, 132496L);
      case 115:
         if ((active1 & 536870912L) != 0L)
         {
            mccmatchedKind = 93;
            mccmatchedPos = 5;
         }
         else if ((active1 & 68719476736L) != 0L)
         {
            mccmatchedKind = 100;
            mccmatchedPos = 5;
         }
         else if ((active1 & 137438953472L) != 0L)
         {
            mccmatchedKind = 101;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 32L);
      case 116:
         if ((active0 & 33554432L) != 0L)
         {
            mccmatchedKind = 25;
            mccmatchedPos = 5;
         }
         else if ((active0 & 536870912L) != 0L)
         {
            mccmatchedKind = 29;
            mccmatchedPos = 5;
         }
         else if ((active0 & 1073741824L) != 0L)
         {
            mccmatchedKind = 30;
            mccmatchedPos = 5;
         }
         else if ((active1 & 8589934592L) != 0L)
         {
            mccmatchedKind = 97;
            mccmatchedPos = 5;
         }
         else if ((active2 & 17179869184L) != 0L)
         {
            mccmatchedKind = 162;
            mccmatchedPos = 5;
         }
         else if ((active2 & 274877906944L) != 0L)
         {
            mccmatchedKind = 166;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 562949953421312L, active2, 18155135997902848L);
      case 117:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 9007199254740992L);
      case 121:
         if ((active2 & 137438953472L) != 0L)
         {
            mccmatchedKind = 165;
            mccmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 5);
}
private int mccMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 5);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 5);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 18225504742277524L);
      case 66:
         return mccMoveStringLiteralDfa7_0(active0, 34359738368L, active1, 864691128455135232L, active2, 16384L);
      case 67:
         if ((active2 & 549755813888L) != 0L)
         {
            mccmatchedKind = 167;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 8589934592L, active1, 2361012104648982528L, active2, 1125899912085504L);
      case 69:
         if ((active1 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 113;
            mccmatchedPos = 6;
         }
         else if ((active2 & 65536L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 6;
         }
         else if ((active2 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 184;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, -8070450532247928832L, active2, 8388704L);
      case 71:
         if ((active1 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 107;
            mccmatchedPos = 6;
         }
         else if ((active1 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 112;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 4611686018427387904L, active2, 0L);
      case 73:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 36028797018963968L);
      case 76:
         if ((active1 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 108;
            mccmatchedPos = 6;
         }
         else if ((active2 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 168;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 8L);
      case 77:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 32768L);
      case 78:
         if ((active0 & 4294967296L) != 0L)
         {
            mccmatchedKind = 32;
            mccmatchedPos = 6;
         }
         else if ((active1 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 109;
            mccmatchedPos = 6;
         }
         else if ((active2 & 2048L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 144115188075855872L, active2, 9042383626838528L);
      case 79:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 9007199254740992L, active2, 6755399443152896L);
      case 82:
         if ((active1 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 110;
            mccmatchedPos = 6;
         }
         else if ((active2 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 171;
            mccmatchedPos = 6;
         }
         else if ((active2 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 172;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 72057594037927936L, active2, 844424930656256L);
      case 83:
         if ((active1 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 105;
            mccmatchedPos = 6;
         }
         break;
      case 84:
         if ((active0 & 2147483648L) != 0L)
         {
            mccmatchedKind = 31;
            mccmatchedPos = 6;
         }
         else if ((active1 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 106;
            mccmatchedPos = 6;
         }
         else if ((active1 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 111;
            mccmatchedPos = 6;
         }
         else if ((active2 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 170;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 1008806316530991106L);
      case 85:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 6755399441055744L, active2, 1L);
      case 87:
         return mccMoveStringLiteralDfa7_0(active0, 68719476736L, active1, 0L, active2, 0L);
      case 89:
         if ((active2 & 1024L) != 0L)
         {
            mccmatchedKind = 138;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 131072L);
      case 90:
         return mccMoveStringLiteralDfa7_0(active0, 17179869184L, active1, 0L, active2, 0L);
      case 97:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 18225504742277524L);
      case 98:
         return mccMoveStringLiteralDfa7_0(active0, 34359738368L, active1, 864691128455135232L, active2, 16384L);
      case 99:
         if ((active2 & 549755813888L) != 0L)
         {
            mccmatchedKind = 167;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 8589934592L, active1, 2361012104648982528L, active2, 1125899912085504L);
      case 101:
         if ((active1 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 113;
            mccmatchedPos = 6;
         }
         else if ((active2 & 65536L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 6;
         }
         else if ((active2 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 184;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, -8070450532247928832L, active2, 8388704L);
      case 103:
         if ((active1 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 107;
            mccmatchedPos = 6;
         }
         else if ((active1 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 112;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 4611686018427387904L, active2, 0L);
      case 105:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 36028797018963968L);
      case 108:
         if ((active1 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 108;
            mccmatchedPos = 6;
         }
         else if ((active2 & 1099511627776L) != 0L)
         {
            mccmatchedKind = 168;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 8L);
      case 109:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 32768L);
      case 110:
         if ((active0 & 4294967296L) != 0L)
         {
            mccmatchedKind = 32;
            mccmatchedPos = 6;
         }
         else if ((active1 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 109;
            mccmatchedPos = 6;
         }
         else if ((active2 & 2048L) != 0L)
         {
            mccmatchedKind = 139;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 144115188075855872L, active2, 9042383626838528L);
      case 111:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 9007199254740992L, active2, 6755399443152896L);
      case 114:
         if ((active1 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 110;
            mccmatchedPos = 6;
         }
         else if ((active2 & 8796093022208L) != 0L)
         {
            mccmatchedKind = 171;
            mccmatchedPos = 6;
         }
         else if ((active2 & 17592186044416L) != 0L)
         {
            mccmatchedKind = 172;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 72057594037927936L, active2, 844424930656256L);
      case 115:
         if ((active1 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 105;
            mccmatchedPos = 6;
         }
         break;
      case 116:
         if ((active0 & 2147483648L) != 0L)
         {
            mccmatchedKind = 31;
            mccmatchedPos = 6;
         }
         else if ((active1 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 106;
            mccmatchedPos = 6;
         }
         else if ((active1 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 111;
            mccmatchedPos = 6;
         }
         else if ((active2 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 170;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 1008806316530991106L);
      case 117:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 6755399441055744L, active2, 1L);
      case 119:
         return mccMoveStringLiteralDfa7_0(active0, 68719476736L, active1, 0L, active2, 0L);
      case 121:
         if ((active2 & 1024L) != 0L)
         {
            mccmatchedKind = 138;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 131072L);
      case 122:
         return mccMoveStringLiteralDfa7_0(active0, 17179869184L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 6);
}
private int mccMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 6);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 6);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 5275648L);
      case 66:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 18577348462903552L);
      case 67:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 9288674239840800L);
      case 68:
         if ((active1 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 120;
            mccmatchedPos = 7;
         }
         else if ((active1 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 124;
            mccmatchedPos = 7;
         }
         break;
      case 69:
         if ((active0 & 17179869184L) != 0L)
         {
            mccmatchedKind = 34;
            mccmatchedPos = 7;
         }
         else if ((active0 & 34359738368L) != 0L)
         {
            mccmatchedKind = 35;
            mccmatchedPos = 7;
         }
         else if ((active1 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 115;
            mccmatchedPos = 7;
         }
         else if ((active1 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 116;
            mccmatchedPos = 7;
         }
         else if ((active1 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 118;
            mccmatchedPos = 7;
         }
         else if ((active1 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 126;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 2L);
      case 71:
         if ((active1 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 121;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 64L);
      case 73:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 128L);
      case 75:
         if ((active0 & 8589934592L) != 0L)
         {
            mccmatchedKind = 33;
            mccmatchedPos = 7;
         }
         else if ((active1 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 114;
            mccmatchedPos = 7;
         }
         break;
      case 76:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 16392L);
      case 77:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 6896136931508224L);
      case 78:
         if ((active0 & 68719476736L) != 0L)
         {
            mccmatchedKind = 36;
            mccmatchedPos = 7;
         }
         else if ((active1 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 117;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, -9223372036854775808L, active2, 0L);
      case 79:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 8192L);
      case 82:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 70368744439825L);
      case 84:
         if ((active1 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 119;
            mccmatchedPos = 7;
         }
         else if ((active1 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 125;
            mccmatchedPos = 7;
         }
         else if ((active2 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 173;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 1125899906842628L);
      case 89:
         if ((active1 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 122;
            mccmatchedPos = 7;
         }
         else if ((active1 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 123;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 524288L);
      case 90:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 36028797018963968L);
      case 95:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 1008806316531122176L);
      case 97:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 5275648L);
      case 98:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 18577348462903552L);
      case 99:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 9288674239840800L);
      case 100:
         if ((active1 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 120;
            mccmatchedPos = 7;
         }
         else if ((active1 & 1152921504606846976L) != 0L)
         {
            mccmatchedKind = 124;
            mccmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 17179869184L) != 0L)
         {
            mccmatchedKind = 34;
            mccmatchedPos = 7;
         }
         else if ((active0 & 34359738368L) != 0L)
         {
            mccmatchedKind = 35;
            mccmatchedPos = 7;
         }
         else if ((active1 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 115;
            mccmatchedPos = 7;
         }
         else if ((active1 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 116;
            mccmatchedPos = 7;
         }
         else if ((active1 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 118;
            mccmatchedPos = 7;
         }
         else if ((active1 & 4611686018427387904L) != 0L)
         {
            mccmatchedKind = 126;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 2L);
      case 103:
         if ((active1 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 121;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 64L);
      case 105:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 128L);
      case 107:
         if ((active0 & 8589934592L) != 0L)
         {
            mccmatchedKind = 33;
            mccmatchedPos = 7;
         }
         else if ((active1 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 114;
            mccmatchedPos = 7;
         }
         break;
      case 108:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 16392L);
      case 109:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 6896136931508224L);
      case 110:
         if ((active0 & 68719476736L) != 0L)
         {
            mccmatchedKind = 36;
            mccmatchedPos = 7;
         }
         else if ((active1 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 117;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, -9223372036854775808L, active2, 0L);
      case 111:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 8192L);
      case 114:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 70368744439825L);
      case 116:
         if ((active1 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 119;
            mccmatchedPos = 7;
         }
         else if ((active1 & 2305843009213693952L) != 0L)
         {
            mccmatchedKind = 125;
            mccmatchedPos = 7;
         }
         else if ((active2 & 35184372088832L) != 0L)
         {
            mccmatchedKind = 173;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 1125899906842628L);
      case 121:
         if ((active1 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 122;
            mccmatchedPos = 7;
         }
         else if ((active1 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 123;
            mccmatchedPos = 7;
         }
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 524288L);
      case 122:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 36028797018963968L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 7);
}
private int mccMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 7);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 7);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 36028797018963968L);
      case 68:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 288230376151711744L);
      case 69:
         if ((active2 & 1L) != 0L)
         {
            mccmatchedKind = 128;
            mccmatchedPos = 8;
         }
         else if ((active2 & 4L) != 0L)
         {
            mccmatchedKind = 130;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 576L);
      case 72:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 281474976710656L);
      case 73:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 1688849860280320L);
      case 76:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 18014398514725120L);
      case 77:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 6755399441055744L);
      case 78:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 8320L);
      case 79:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 9007199263129600L);
      case 80:
         if ((active2 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 175;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 2097152L);
      case 82:
         if ((active2 & 2L) != 0L)
         {
            mccmatchedKind = 129;
            mccmatchedPos = 8;
         }
         break;
      case 83:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 131072L);
      case 84:
         if ((active1 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 127;
            mccmatchedPos = 8;
         }
         else if ((active2 & 32L) != 0L)
         {
            mccmatchedKind = 133;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 720575940379279360L);
      case 88:
         if ((active2 & 32768L) != 0L)
         {
            mccmatchedKind = 143;
            mccmatchedPos = 8;
         }
         break;
      case 89:
         if ((active2 & 8L) != 0L)
         {
            mccmatchedKind = 131;
            mccmatchedPos = 8;
         }
         else if ((active2 & 16L) != 0L)
         {
            mccmatchedKind = 132;
            mccmatchedPos = 8;
         }
         else if ((active2 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 174;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 262144L);
      case 95:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 524288L);
      case 97:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 36028797018963968L);
      case 100:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 288230376151711744L);
      case 101:
         if ((active2 & 1L) != 0L)
         {
            mccmatchedKind = 128;
            mccmatchedPos = 8;
         }
         else if ((active2 & 4L) != 0L)
         {
            mccmatchedKind = 130;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 576L);
      case 104:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 281474976710656L);
      case 105:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 1688849860280320L);
      case 108:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 18014398514725120L);
      case 109:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 6755399441055744L);
      case 110:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 8320L);
      case 111:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 9007199263129600L);
      case 112:
         if ((active2 & 140737488355328L) != 0L)
         {
            mccmatchedKind = 175;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 2097152L);
      case 114:
         if ((active2 & 2L) != 0L)
         {
            mccmatchedKind = 129;
            mccmatchedPos = 8;
         }
         break;
      case 115:
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 131072L);
      case 116:
         if ((active1 & -9223372036854775808L) != 0L)
         {
            mccmatchedKind = 127;
            mccmatchedPos = 8;
         }
         else if ((active2 & 32L) != 0L)
         {
            mccmatchedKind = 133;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 720575940379279360L);
      case 120:
         if ((active2 & 32768L) != 0L)
         {
            mccmatchedKind = 143;
            mccmatchedPos = 8;
         }
         break;
      case 121:
         if ((active2 & 8L) != 0L)
         {
            mccmatchedKind = 131;
            mccmatchedPos = 8;
         }
         else if ((active2 & 16L) != 0L)
         {
            mccmatchedKind = 132;
            mccmatchedPos = 8;
         }
         else if ((active2 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 174;
            mccmatchedPos = 8;
         }
         return mccMoveStringLiteralDfa9_0(active1, 0L, active2, 262144L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 8);
}
private int mccMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 8);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 8);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa10_0(active2, 288511851128422400L);
      case 66:
         return mccMoveStringLiteralDfa10_0(active2, 36028797018963968L);
      case 69:
         if ((active2 & 256L) != 0L)
         {
            mccmatchedKind = 136;
            mccmatchedPos = 9;
         }
         else if ((active2 & 8192L) != 0L)
         {
            mccmatchedKind = 141;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 18014398509481984L);
      case 73:
         return mccMoveStringLiteralDfa10_0(active2, 727331339820335104L);
      case 77:
         return mccMoveStringLiteralDfa10_0(active2, 9007199263129600L);
      case 78:
         return mccMoveStringLiteralDfa10_0(active2, 562949953421312L);
      case 79:
         return mccMoveStringLiteralDfa10_0(active2, 1125899908939776L);
      case 83:
         if ((active2 & 64L) != 0L)
         {
            mccmatchedKind = 134;
            mccmatchedPos = 9;
         }
         else if ((active2 & 512L) != 0L)
         {
            mccmatchedKind = 137;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 540672L);
      case 84:
         if ((active2 & 128L) != 0L)
         {
            mccmatchedKind = 135;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 131072L);
      case 95:
         return mccMoveStringLiteralDfa10_0(active2, 5505024L);
      case 97:
         return mccMoveStringLiteralDfa10_0(active2, 288511851128422400L);
      case 98:
         return mccMoveStringLiteralDfa10_0(active2, 36028797018963968L);
      case 101:
         if ((active2 & 256L) != 0L)
         {
            mccmatchedKind = 136;
            mccmatchedPos = 9;
         }
         else if ((active2 & 8192L) != 0L)
         {
            mccmatchedKind = 141;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 18014398509481984L);
      case 105:
         return mccMoveStringLiteralDfa10_0(active2, 727331339820335104L);
      case 109:
         return mccMoveStringLiteralDfa10_0(active2, 9007199263129600L);
      case 110:
         return mccMoveStringLiteralDfa10_0(active2, 562949953421312L);
      case 111:
         return mccMoveStringLiteralDfa10_0(active2, 1125899908939776L);
      case 115:
         if ((active2 & 64L) != 0L)
         {
            mccmatchedKind = 134;
            mccmatchedPos = 9;
         }
         else if ((active2 & 512L) != 0L)
         {
            mccmatchedKind = 137;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 540672L);
      case 116:
         if ((active2 & 128L) != 0L)
         {
            mccmatchedKind = 135;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active2, 131072L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 9);
}
private int mccMoveStringLiteralDfa10_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 9);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 9);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa11_0(active2, 18014398509481984L);
      case 65:
         return mccMoveStringLiteralDfa11_0(active2, 562949953421312L);
      case 68:
         return mccMoveStringLiteralDfa11_0(active2, 4194304L);
      case 76:
         return mccMoveStringLiteralDfa11_0(active2, 36028797018963968L);
      case 77:
         return mccMoveStringLiteralDfa11_0(active2, 729583139634020352L);
      case 78:
         return mccMoveStringLiteralDfa11_0(active2, 1125899906842624L);
      case 80:
         return mccMoveStringLiteralDfa11_0(active2, 8388608L);
      case 82:
         if ((active2 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 176;
            mccmatchedPos = 10;
         }
         return mccMoveStringLiteralDfa11_0(active2, 131072L);
      case 83:
         return mccMoveStringLiteralDfa11_0(active2, 3407872L);
      case 84:
         if ((active2 & 16384L) != 0L)
         {
            mccmatchedKind = 142;
            mccmatchedPos = 10;
         }
         else if ((active2 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 179;
            mccmatchedPos = 10;
         }
         return mccMoveStringLiteralDfa11_0(active2, 292733975779606528L);
      case 97:
         return mccMoveStringLiteralDfa11_0(active2, 562949953421312L);
      case 100:
         return mccMoveStringLiteralDfa11_0(active2, 4194304L);
      case 108:
         return mccMoveStringLiteralDfa11_0(active2, 36028797018963968L);
      case 109:
         return mccMoveStringLiteralDfa11_0(active2, 729583139634020352L);
      case 110:
         return mccMoveStringLiteralDfa11_0(active2, 1125899906842624L);
      case 112:
         return mccMoveStringLiteralDfa11_0(active2, 8388608L);
      case 114:
         if ((active2 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 176;
            mccmatchedPos = 10;
         }
         return mccMoveStringLiteralDfa11_0(active2, 131072L);
      case 115:
         return mccMoveStringLiteralDfa11_0(active2, 3407872L);
      case 116:
         if ((active2 & 16384L) != 0L)
         {
            mccmatchedKind = 142;
            mccmatchedPos = 10;
         }
         else if ((active2 & 2251799813685248L) != 0L)
         {
            mccmatchedKind = 179;
            mccmatchedPos = 10;
         }
         return mccMoveStringLiteralDfa11_0(active2, 292733975779606528L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 10);
}
private int mccMoveStringLiteralDfa11_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 10);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 10);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa12_0(active2, 1125899906842624L);
      case 69:
         if ((active2 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 183;
            mccmatchedPos = 11;
         }
         else if ((active2 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 185;
            mccmatchedPos = 11;
         }
         else if ((active2 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 186;
            mccmatchedPos = 11;
         }
         return mccMoveStringLiteralDfa12_0(active2, 576460752307748864L);
      case 73:
         return mccMoveStringLiteralDfa12_0(active2, 9007199256838144L);
      case 79:
         return mccMoveStringLiteralDfa12_0(active2, 8388608L);
      case 82:
         return mccMoveStringLiteralDfa12_0(active2, 18577348463427584L);
      case 84:
         return mccMoveStringLiteralDfa12_0(active2, 4503599628681216L);
      case 101:
         if ((active2 & 36028797018963968L) != 0L)
         {
            mccmatchedKind = 183;
            mccmatchedPos = 11;
         }
         else if ((active2 & 144115188075855872L) != 0L)
         {
            mccmatchedKind = 185;
            mccmatchedPos = 11;
         }
         else if ((active2 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 186;
            mccmatchedPos = 11;
         }
         return mccMoveStringLiteralDfa12_0(active2, 576460752307748864L);
      case 105:
         return mccMoveStringLiteralDfa12_0(active2, 9007199256838144L);
      case 111:
         return mccMoveStringLiteralDfa12_0(active2, 8388608L);
      case 114:
         return mccMoveStringLiteralDfa12_0(active2, 18577348463427584L);
      case 116:
         return mccMoveStringLiteralDfa12_0(active2, 4503599628681216L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 11);
}
private int mccMoveStringLiteralDfa12_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 11);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 11);
   }
   switch((int)curChar) {
      case 67:
         return mccMoveStringLiteralDfa13_0(active2, 4194304L);
      case 69:
         return mccMoveStringLiteralDfa13_0(active2, 22517998137376768L);
      case 73:
         return mccMoveStringLiteralDfa13_0(active2, 1125899906842624L);
      case 78:
         return mccMoveStringLiteralDfa13_0(active2, 131072L);
      case 82:
         return mccMoveStringLiteralDfa13_0(active2, 1310720L);
      case 83:
         return mccMoveStringLiteralDfa13_0(active2, 576460752311812096L);
      case 84:
         return mccMoveStringLiteralDfa13_0(active2, 9007199256838144L);
      case 89:
         if ((active2 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 177;
            mccmatchedPos = 12;
         }
         break;
      case 99:
         return mccMoveStringLiteralDfa13_0(active2, 4194304L);
      case 101:
         return mccMoveStringLiteralDfa13_0(active2, 22517998137376768L);
      case 105:
         return mccMoveStringLiteralDfa13_0(active2, 1125899906842624L);
      case 110:
         return mccMoveStringLiteralDfa13_0(active2, 131072L);
      case 114:
         return mccMoveStringLiteralDfa13_0(active2, 1310720L);
      case 115:
         return mccMoveStringLiteralDfa13_0(active2, 576460752311812096L);
      case 116:
         return mccMoveStringLiteralDfa13_0(active2, 9007199256838144L);
      case 121:
         if ((active2 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 177;
            mccmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 12);
}
private int mccMoveStringLiteralDfa13_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 12);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 12);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa14_0(active2, 18014398509481984L);
      case 68:
         if ((active2 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 180;
            mccmatchedPos = 13;
         }
         break;
      case 69:
         return mccMoveStringLiteralDfa14_0(active2, 1310720L);
      case 71:
         return mccMoveStringLiteralDfa14_0(active2, 131072L);
      case 73:
         return mccMoveStringLiteralDfa14_0(active2, 10485760L);
      case 78:
         return mccMoveStringLiteralDfa14_0(active2, 524288L);
      case 79:
         return mccMoveStringLiteralDfa14_0(active2, 4194304L);
      case 83:
         return mccMoveStringLiteralDfa14_0(active2, 1125899906842624L);
      case 84:
         return mccMoveStringLiteralDfa14_0(active2, 585467951558164480L);
      case 97:
         return mccMoveStringLiteralDfa14_0(active2, 18014398509481984L);
      case 100:
         if ((active2 & 4503599627370496L) != 0L)
         {
            mccmatchedKind = 180;
            mccmatchedPos = 13;
         }
         break;
      case 101:
         return mccMoveStringLiteralDfa14_0(active2, 1310720L);
      case 103:
         return mccMoveStringLiteralDfa14_0(active2, 131072L);
      case 105:
         return mccMoveStringLiteralDfa14_0(active2, 10485760L);
      case 110:
         return mccMoveStringLiteralDfa14_0(active2, 524288L);
      case 111:
         return mccMoveStringLiteralDfa14_0(active2, 4194304L);
      case 115:
         return mccMoveStringLiteralDfa14_0(active2, 1125899906842624L);
      case 116:
         return mccMoveStringLiteralDfa14_0(active2, 585467951558164480L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 13);
}
private int mccMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 13);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 13);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa15_0(active2, 576460752303423488L);
      case 68:
         if ((active2 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 182;
            mccmatchedPos = 14;
         }
         break;
      case 69:
         return mccMoveStringLiteralDfa15_0(active2, 9007199254740992L);
      case 71:
         return mccMoveStringLiteralDfa15_0(active2, 524288L);
      case 77:
         return mccMoveStringLiteralDfa15_0(active2, 4194304L);
      case 78:
         return mccMoveStringLiteralDfa15_0(active2, 1310720L);
      case 79:
         return mccMoveStringLiteralDfa15_0(active2, 1125899908939776L);
      case 84:
         return mccMoveStringLiteralDfa15_0(active2, 8519680L);
      case 97:
         return mccMoveStringLiteralDfa15_0(active2, 576460752303423488L);
      case 100:
         if ((active2 & 18014398509481984L) != 0L)
         {
            mccmatchedKind = 182;
            mccmatchedPos = 14;
         }
         break;
      case 101:
         return mccMoveStringLiteralDfa15_0(active2, 9007199254740992L);
      case 103:
         return mccMoveStringLiteralDfa15_0(active2, 524288L);
      case 109:
         return mccMoveStringLiteralDfa15_0(active2, 4194304L);
      case 110:
         return mccMoveStringLiteralDfa15_0(active2, 1310720L);
      case 111:
         return mccMoveStringLiteralDfa15_0(active2, 1125899908939776L);
      case 116:
         return mccMoveStringLiteralDfa15_0(active2, 8519680L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 14);
}
private int mccMoveStringLiteralDfa15_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 14);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 14);
   }
   switch((int)curChar) {
      case 68:
         if ((active2 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 181;
            mccmatchedPos = 15;
         }
         break;
      case 71:
         return mccMoveStringLiteralDfa16_0(active2, 1310720L);
      case 72:
         if ((active2 & 131072L) != 0L)
         {
            mccmatchedKind = 145;
            mccmatchedPos = 15;
         }
         break;
      case 73:
         return mccMoveStringLiteralDfa16_0(active2, 8388608L);
      case 76:
         return mccMoveStringLiteralDfa16_0(active2, 1125899906842624L);
      case 77:
         return mccMoveStringLiteralDfa16_0(active2, 576460752303423488L);
      case 78:
         if ((active2 & 2097152L) != 0L)
         {
            mccmatchedKind = 149;
            mccmatchedPos = 15;
         }
         break;
      case 80:
         return mccMoveStringLiteralDfa16_0(active2, 4194304L);
      case 84:
         return mccMoveStringLiteralDfa16_0(active2, 524288L);
      case 100:
         if ((active2 & 9007199254740992L) != 0L)
         {
            mccmatchedKind = 181;
            mccmatchedPos = 15;
         }
         break;
      case 103:
         return mccMoveStringLiteralDfa16_0(active2, 1310720L);
      case 104:
         if ((active2 & 131072L) != 0L)
         {
            mccmatchedKind = 145;
            mccmatchedPos = 15;
         }
         break;
      case 105:
         return mccMoveStringLiteralDfa16_0(active2, 8388608L);
      case 108:
         return mccMoveStringLiteralDfa16_0(active2, 1125899906842624L);
      case 109:
         return mccMoveStringLiteralDfa16_0(active2, 576460752303423488L);
      case 110:
         if ((active2 & 2097152L) != 0L)
         {
            mccmatchedKind = 149;
            mccmatchedPos = 15;
         }
         break;
      case 112:
         return mccMoveStringLiteralDfa16_0(active2, 4194304L);
      case 116:
         return mccMoveStringLiteralDfa16_0(active2, 524288L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 15);
}
private int mccMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 15);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 15);
   }
   switch((int)curChar) {
      case 65:
         return mccMoveStringLiteralDfa17_0(active2, 1125899906842624L);
      case 72:
         if ((active2 & 524288L) != 0L)
         {
            mccmatchedKind = 147;
            mccmatchedPos = 16;
         }
         break;
      case 79:
         return mccMoveStringLiteralDfa17_0(active2, 12582912L);
      case 80:
         if ((active2 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 187;
            mccmatchedPos = 16;
         }
         break;
      case 84:
         return mccMoveStringLiteralDfa17_0(active2, 1310720L);
      case 97:
         return mccMoveStringLiteralDfa17_0(active2, 1125899906842624L);
      case 104:
         if ((active2 & 524288L) != 0L)
         {
            mccmatchedKind = 147;
            mccmatchedPos = 16;
         }
         break;
      case 111:
         return mccMoveStringLiteralDfa17_0(active2, 12582912L);
      case 112:
         if ((active2 & 576460752303423488L) != 0L)
         {
            mccmatchedKind = 187;
            mccmatchedPos = 16;
         }
         break;
      case 116:
         return mccMoveStringLiteralDfa17_0(active2, 1310720L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 16);
}
private int mccMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 16);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 16);
   }
   switch((int)curChar) {
      case 72:
         if ((active2 & 262144L) != 0L)
         {
            mccmatchedKind = 146;
            mccmatchedPos = 17;
         }
         else if ((active2 & 1048576L) != 0L)
         {
            mccmatchedKind = 148;
            mccmatchedPos = 17;
         }
         break;
      case 78:
         if ((active2 & 8388608L) != 0L)
         {
            mccmatchedKind = 151;
            mccmatchedPos = 17;
         }
         break;
      case 83:
         return mccMoveStringLiteralDfa18_0(active2, 4194304L);
      case 84:
         return mccMoveStringLiteralDfa18_0(active2, 1125899906842624L);
      case 104:
         if ((active2 & 262144L) != 0L)
         {
            mccmatchedKind = 146;
            mccmatchedPos = 17;
         }
         else if ((active2 & 1048576L) != 0L)
         {
            mccmatchedKind = 148;
            mccmatchedPos = 17;
         }
         break;
      case 110:
         if ((active2 & 8388608L) != 0L)
         {
            mccmatchedKind = 151;
            mccmatchedPos = 17;
         }
         break;
      case 115:
         return mccMoveStringLiteralDfa18_0(active2, 4194304L);
      case 116:
         return mccMoveStringLiteralDfa18_0(active2, 1125899906842624L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 17);
}
private int mccMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 17);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 17);
   }
   switch((int)curChar) {
      case 73:
         return mccMoveStringLiteralDfa19_0(active2, 1125899911036928L);
      case 105:
         return mccMoveStringLiteralDfa19_0(active2, 1125899911036928L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 18);
}
private int mccMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 18);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 18);
   }
   switch((int)curChar) {
      case 79:
         return mccMoveStringLiteralDfa20_0(active2, 1125899906842624L);
      case 84:
         return mccMoveStringLiteralDfa20_0(active2, 4194304L);
      case 111:
         return mccMoveStringLiteralDfa20_0(active2, 1125899906842624L);
      case 116:
         return mccMoveStringLiteralDfa20_0(active2, 4194304L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 19);
}
private int mccMoveStringLiteralDfa20_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 19);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 19);
   }
   switch((int)curChar) {
      case 73:
         return mccMoveStringLiteralDfa21_0(active2, 4194304L);
      case 78:
         return mccMoveStringLiteralDfa21_0(active2, 1125899906842624L);
      case 105:
         return mccMoveStringLiteralDfa21_0(active2, 4194304L);
      case 110:
         return mccMoveStringLiteralDfa21_0(active2, 1125899906842624L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 20);
}
private int mccMoveStringLiteralDfa21_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 20);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 20);
   }
   switch((int)curChar) {
      case 32:
         return mccMoveStringLiteralDfa22_0(active2, 1125899906842624L);
      case 79:
         return mccMoveStringLiteralDfa22_0(active2, 4194304L);
      case 111:
         return mccMoveStringLiteralDfa22_0(active2, 4194304L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 21);
}
private int mccMoveStringLiteralDfa22_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 21);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 21);
   }
   switch((int)curChar) {
      case 76:
         return mccMoveStringLiteralDfa23_0(active2, 1125899906842624L);
      case 78:
         if ((active2 & 4194304L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 22;
         }
         break;
      case 108:
         return mccMoveStringLiteralDfa23_0(active2, 1125899906842624L);
      case 110:
         if ((active2 & 4194304L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 22;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 22);
}
private int mccMoveStringLiteralDfa23_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 22);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 22);
   }
   switch((int)curChar) {
      case 69:
         return mccMoveStringLiteralDfa24_0(active2, 1125899906842624L);
      case 101:
         return mccMoveStringLiteralDfa24_0(active2, 1125899906842624L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 23);
}
private int mccMoveStringLiteralDfa24_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 23);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 23);
   }
   switch((int)curChar) {
      case 86:
         return mccMoveStringLiteralDfa25_0(active2, 1125899906842624L);
      case 118:
         return mccMoveStringLiteralDfa25_0(active2, 1125899906842624L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 24);
}
private int mccMoveStringLiteralDfa25_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 24);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 24);
   }
   switch((int)curChar) {
      case 69:
         return mccMoveStringLiteralDfa26_0(active2, 1125899906842624L);
      case 101:
         return mccMoveStringLiteralDfa26_0(active2, 1125899906842624L);
      default :
         break;
   }
   return mccMoveNfa_0(5, 25);
}
private int mccMoveStringLiteralDfa26_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccMoveNfa_0(5, 25);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
   return mccMoveNfa_0(5, 25);
   }
   switch((int)curChar) {
      case 76:
         if ((active2 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 178;
            mccmatchedPos = 26;
         }
         break;
      case 108:
         if ((active2 & 1125899906842624L) != 0L)
         {
            mccmatchedKind = 178;
            mccmatchedPos = 26;
         }
         break;
      default :
         break;
   }
   return mccMoveNfa_0(5, 26);
}
private void mccCheckNAdd(int state)
{
   if (mccrounds[state] != mccround)
   {
      mccstateSet[mccnewStateCnt++] = state;
      mccrounds[state] = mccround;
   }
}
private void mccAddStates(int start, int end)
{
   do {
      mccstateSet[mccnewStateCnt++] = mccnextStates[start];
   } while (start++ != end);
}
private void mccCheckNAddTwoStates(int state1, int state2)
{
   mccCheckNAdd(state1);
   mccCheckNAdd(state2);
}
private void mccCheckNAddStates(int start, int end)
{
   do {
      mccCheckNAdd(mccnextStates[start]);
   } while (start++ != end);
}
private void mccCheckNAddStates(int start)
{
   mccCheckNAdd(mccnextStates[start]);
   mccCheckNAdd(mccnextStates[start + 1]);
}
static readonly long[] mccbitVec0 = {
   -2, -1L, -1L, -1L
};
static readonly long[] mccbitVec1 = {
   -1L, -1L, -1L, -1L
};
static readonly long[] mccbitVec2 = {
   0L, 0L, -1L, -1L
};
private int mccMoveNfa_0(int startState, int curPos)
{
   int strKind = mccmatchedKind;
   int strPos = mccmatchedPos;
   int seenUpto = curPos + 1;
   input_stream.Backup(seenUpto);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { throw new Exception("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 84;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 5:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 194)
                        kind = 194;
                     mccCheckNAddStates(0, 2);
                  }
                  else if (curChar == 34)
                     mccCheckNAddStates(3, 8);
                  else if (curChar == 39)
                     mccCheckNAddStates(9, 12);
                  else if (curChar == 46)
                     mccCheckNAdd(42);
                  else if (curChar == 60)
                     mccstateSet[mccnewStateCnt++] = 14;
                  else if (curChar == 33)
                     mccstateSet[mccnewStateCnt++] = 12;
                  else if (curChar == 45)
                     mccstateSet[mccnewStateCnt++] = 6;
                  else if (curChar == 47)
                     mccstateSet[mccnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 47)
                     mccCheckNAddStates(13, 15);
                  break;
               case 1:
                  if ((-9217 & l) != 0L)
                     mccCheckNAddStates(13, 15);
                  break;
               case 2:
                  if ((9216 & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 45)
                     mccCheckNAddStates(16, 18);
                  break;
               case 7:
                  if ((-9217 & l) != 0L)
                     mccCheckNAddStates(16, 18);
                  break;
               case 8:
                  if ((9216 & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 9:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     mccstateSet[mccnewStateCnt++] = 6;
                  break;
               case 12:
                  if (curChar == 61 && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if (curChar == 33)
                     mccstateSet[mccnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 62 && kind > 14)
                     kind = 14;
                  break;
               case 15:
                  if (curChar == 60)
                     mccstateSet[mccnewStateCnt++] = 14;
                  break;
               case 24:
                  if (curChar == 47)
                     mccCheckNAddStates(19, 21);
                  break;
               case 25:
                  if ((-140737488364545 & l) != 0L)
                     mccCheckNAddStates(19, 21);
                  break;
               case 27:
                  if (curChar != 47)
                     break;
                  if (kind > 21)
                     kind = 21;
                  mccstateSet[mccnewStateCnt++] = 28;
                  break;
               case 29:
                  if (curChar == 32)
                     mccstateSet[mccnewStateCnt++] = 24;
                  break;
               case 35:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  mccCheckNAddStates(0, 2);
                  break;
               case 36:
                  if (curChar == 46)
                     mccCheckNAdd(37);
                  break;
               case 37:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  mccCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(40);
                  break;
               case 40:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  mccCheckNAdd(40);
                  break;
               case 41:
                  if (curChar == 46)
                     mccCheckNAdd(42);
                  break;
               case 42:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  mccCheckNAddTwoStates(42, 38);
                  break;
               case 43:
               case 44:
                  if (curChar == 39)
                     mccCheckNAddStates(9, 12);
                  break;
               case 45:
                  if (curChar == 39)
                     mccstateSet[mccnewStateCnt++] = 44;
                  break;
               case 47:
                  if ((687194767360 & l) != 0L)
                     mccCheckNAddStates(9, 12);
                  break;
               case 48:
                  if ((-549755813889 & l) != 0L)
                     mccCheckNAddStates(9, 12);
                  break;
               case 49:
                  if (curChar == 39 && kind > 195)
                     kind = 195;
                  break;
               case 50:
                  if (curChar == 34)
                     mccCheckNAddStates(3, 8);
                  break;
               case 51:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 34 && kind > 196)
                     kind = 196;
                  break;
               case 53:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar != 34)
                     break;
                  if (kind > 199)
                     kind = 199;
                  mccstateSet[mccnewStateCnt++] = 55;
                  break;
               case 55:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 56;
                  break;
               case 56:
                  if (curChar == 34)
                     mccCheckNAddTwoStates(57, 54);
                  break;
               case 57:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(57, 54);
                  break;
               case 58:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 34)
                     mccAddStates(22, 23);
                  break;
               case 60:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 61;
                  break;
               case 61:
                  if (curChar == 34)
                     mccCheckNAddTwoStates(62, 59);
                  break;
               case 62:
                  if ((-17179869185 & l) != 0L)
                     mccCheckNAddTwoStates(62, 59);
                  break;
               case 63:
                  if (curChar == 42 && kind > 203)
                     kind = 203;
                  break;
               case 64:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 63;
                  break;
               case 66:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  mccstateSet[mccnewStateCnt++] = 66;
                  break;
               case 67:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  mccCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 69;
                  break;
               case 70:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  mccCheckNAddTwoStates(68, 70);
                  break;
               case 71:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(24, 26);
                  break;
               case 72:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 73;
                  break;
               case 74:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(27, 29);
                  break;
               case 77:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 201)
                     kind = 201;
                  mccstateSet[mccnewStateCnt++] = 77;
                  break;
               case 78:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(30, 32);
                  break;
               case 79:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 80;
                  break;
               case 81:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(33, 35);
                  break;
               case 82:
                  if (curChar == 42 && kind > 202)
                     kind = 202;
                  break;
               case 83:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 5:
                  if ((576460745995190270 & l) != 0L)
                  {
                     if (kind > 197)
                        kind = 197;
                     mccCheckNAddStates(36, 45);
                  }
                  if ((1125899907104768 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 33;
                  else if ((274877907008 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 22;
                  else if ((4503599628419072 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 18;
                  break;
               case 1:
                  mccAddStates(13, 15);
                  break;
               case 7:
                  mccAddStates(16, 18);
                  break;
               case 16:
                  if ((137438953504 & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 17:
                  if ((9007199256838144 & l) != 0L)
                     mccCheckNAdd(16);
                  break;
               case 18:
                  if ((1125899907104768 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((4503599628419072 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((2251799814209536 & l) != 0L)
                     mccCheckNAdd(16);
                  break;
               case 21:
                  if ((17592186048512 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((8589934594 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((274877907008 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 22;
                  break;
               case 25:
                  mccAddStates(19, 21);
                  break;
               case 26:
                  if (curChar == 92)
                     mccstateSet[mccnewStateCnt++] = 24;
                  break;
               case 28:
                  if ((2289183209562624 & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  mccstateSet[mccnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((72057594054705152 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((137438953504 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((549755814016 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((137438953504 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((1125899907104768 & l) != 0L)
                     mccstateSet[mccnewStateCnt++] = 33;
                  break;
               case 38:
                  if (curChar == 69)
                     mccAddStates(46, 47);
                  break;
               case 46:
                  if (curChar == 92)
                     mccstateSet[mccnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((576460746129408000 & l) != 0L)
                     mccCheckNAddStates(9, 12);
                  break;
               case 48:
                  if ((-268435457 & l) != 0L)
                     mccCheckNAddStates(9, 12);
                  break;
               case 51:
                  mccAddStates(48, 49);
                  break;
               case 53:
                  mccCheckNAddTwoStates(53, 54);
                  break;
               case 57:
                  mccCheckNAddTwoStates(57, 54);
                  break;
               case 58:
                  mccCheckNAddTwoStates(58, 59);
                  break;
               case 62:
                  mccCheckNAddTwoStates(62, 59);
                  break;
               case 65:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  mccCheckNAddStates(36, 45);
                  break;
               case 66:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  mccCheckNAdd(66);
                  break;
               case 67:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  mccCheckNAddTwoStates(67, 68);
                  break;
               case 69:
               case 70:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  mccCheckNAddTwoStates(68, 70);
                  break;
               case 71:
                  if ((576460745995190270 & l) != 0L)
                     mccCheckNAddStates(24, 26);
                  break;
               case 73:
               case 74:
                  if ((576460745995190270 & l) != 0L)
                     mccCheckNAddStates(27, 29);
                  break;
               case 75:
                  if (curChar == 93 && kind > 200)
                     kind = 200;
                  break;
               case 76:
                  if (curChar == 91)
                     mccstateSet[mccnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 201)
                     kind = 201;
                  mccCheckNAdd(77);
                  break;
               case 78:
                  if ((576460745995190270 & l) != 0L)
                     mccCheckNAddStates(30, 32);
                  break;
               case 80:
               case 81:
                  if ((576460745995190270 & l) != 0L)
                     mccCheckNAddStates(33, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 63);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 1:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(13, 15);
                  break;
               case 7:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(16, 18);
                  break;
               case 25:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(19, 21);
                  break;
               case 48:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(9, 12);
                  break;
               case 51:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccAddStates(48, 49);
                  break;
               case 53:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccCheckNAddTwoStates(53, 54);
                  break;
               case 57:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccCheckNAddTwoStates(57, 54);
                  break;
               case 58:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccCheckNAddTwoStates(58, 59);
                  break;
               case 62:
                  if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                     mccCheckNAddTwoStates(62, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 84 - (mccnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { break; }
   }
   if (mccmatchedPos > strPos)
      return curPos;

   int toRet = Math.Max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.Min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.ReadChar(); }
         catch(System.IO.IOException) { throw new Exception("Internal Error : Please send a bug report."); }

   if (mccmatchedPos < strPos)
   {
      mccmatchedKind = strKind;
      mccmatchedPos = strPos;
   }
   else if (mccmatchedPos == strPos && mccmatchedKind > strKind)
      mccmatchedKind = strKind;

   return toRet;
}
static readonly int[] mccnextStates = {
   35, 36, 38, 51, 52, 53, 54, 58, 59, 45, 46, 48, 49, 1, 2, 4, 
   7, 8, 10, 25, 26, 27, 60, 64, 71, 72, 76, 72, 74, 76, 78, 79, 
   83, 79, 81, 83, 66, 67, 68, 71, 72, 76, 77, 78, 79, 83, 39, 40, 
   51, 52, 
};
private static bool mccCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((mccbitVec2[i2] & l2) != 0L);
      default : 
         if ((mccbitVec0[i1] & l1) != 0L)
            if ((mccbitVec1[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
public static readonly string[] mccstrLiteralImages = {
"", null, null, null, null, null, null, "*", "=", "==", ">", "<", ">=", "<=", 
null, "/", "+", "-", "||", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "?", null, null, ";", "(", ")", ",", };
public static readonly string[] lexStateNames = {
   "DEFAULT", 
};
static readonly long[] mcctoToken = {
   -127, -1, -1, 499711, 
};
static readonly long[] mcctoSkip = {
   126, 0, 0, 0, 
};
protected SimpleCharStream input_stream;
private readonly int[] mccrounds = new int[84];
private readonly int[] mccstateSet = new int[168];
protected char curChar;
public SQLTokenManager(SimpleCharStream stream) {
   if (SimpleCharStream.staticFlag)
      throw new System.SystemException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SQLTokenManager(SimpleCharStream stream, int lexState) :
   this(stream) {
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream) {
   mccmatchedPos = mccnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   mccround = -2147483647;
   for (i = 84; i-- > 0;)
      mccrounds[i] = Int32.MinValue;
}
public void ReInit(SimpleCharStream stream, int lexState) {
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState) {
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.InvalidLexicalState);
   else
      curLexState = lexState;
}

protected Token mccFillToken()
{
   Token t = Token.NewToken(mccmatchedKind);
   t.kind = mccmatchedKind;
   string im = mccstrLiteralImages[mccmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.BeginLine;
   t.beginColumn = input_stream.BeginColumn;
   t.endLine = input_stream.EndLine;
   t.endColumn = input_stream.EndColumn;
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int mccnewStateCnt;
int mccround;
int mccmatchedPos;
int mccmatchedKind;

public Token GetNextToken() {
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

for (;;) {
   try {
      curChar = input_stream.BeginToken();
   } catch(System.IO.IOException) {
      mccmatchedKind = 0;
      matchedToken = mccFillToken();
      return matchedToken;
   }

   mccmatchedKind = Int32.MaxValue;
   mccmatchedPos = 0;
   curPos = mccMoveStringLiteralDfa0_0();
   if (mccmatchedKind != Int32.MaxValue) {
      if (mccmatchedPos + 1 < curPos)
         input_stream.Backup(curPos - mccmatchedPos - 1);
      if ((mcctoToken[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
         matchedToken = mccFillToken();
         return matchedToken;
      }
      else
      {
         goto EOFLoop;
      }
   }
   int error_line = input_stream.EndLine;
   int error_column = input_stream.EndColumn;
   string error_after = null;
   bool EOFSeen = false;
   try { input_stream.ReadChar(); input_stream.Backup(1); }
   catch (System.IO.IOException) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      } else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.Backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LexicalError);
EOFLoop: ;
  }
}

}
}
